console.log("Curso din√°mico cargado correctamente üöÄ");

// Obtener el n√∫mero de curso desde la URL
const params = new URLSearchParams(window.location.search);
const cursoSeleccionado = params.get("curso") || "1";

// === Contenido de los m√≥dulos por recurso ===
const contenidoModulos = {
  // Curso 1 ‚Äì L√≥gica de programaci√≥n
  dia1: {
    objetivo: `<p><strong>Objetivos:</strong></p> 
    <p>
    ‚úîÔ∏è Comprender el significado y la utilidad del pensamiento computacional.<br>
    ‚úîÔ∏è Identificar sus pilares principales y su funci√≥n.<br>
    ‚úîÔ∏è Aplicar estas ideas tanto en el aula como en la vida diaria.
     </p>`,
    teoria: `
      <p><strong>Temas:</strong></p>
      <ul>
        <p><strong>¬øQu√© es el pensamiento computacional?</strong></p>
        <p>En este primer tema se abordar√° el pensamiento computacional, una de las habilidades m√°s importantes en la sociedad actual. No se trata √∫nicamente de aprender a programar, sino de razonar y enfrentar los problemas de forma l√≥gica, creativa y estructurada, de manera similar a como lo har√≠a una computadora, pero aplicado a situaciones reales de la vida cotidiana.</p>
        <p>El pensamiento computacional es un proceso cognitivo que permite analizar un problema complejo, comprenderlo y dise√±ar soluciones efectivas. Para ello, requiere de una secuencia ordenada de acciones que ayudan a simplificar la situaci√≥n, identificar lo esencial y organizar los pasos necesarios para resolverla. En otras palabras, implica pensar con precisi√≥n, planificar estrategias y tomar decisiones basadas en el an√°lisis de la informaci√≥n disponible.</p>
        <p>Esta forma de pensamiento no se limita al √°mbito de la tecnolog√≠a o la inform√°tica. Por el contrario, puede aplicarse en cualquier contexto, desde planificar un viaje o un evento hasta resolver desaf√≠os en el aula o en el trabajo. Por ejemplo, al decidir c√≥mo llegar de un punto a otro en la ciudad, el pensamiento computacional nos ayuda a evaluar variables como la distancia, el tiempo, el tr√°fico o el clima, para luego elegir la mejor alternativa. Si alguna condici√≥n cambia, tambi√©n somos capaces de replantear el proceso o ajustar la estrategia, tal como se hace en la programaci√≥n al modificar un algoritmo.  <p>
        <p>De acuerdo con Cervera-Manjarrez et al. (2023), ‚Äúel pensamiento computacional permite que el ser humano se adentre en un mundo rico y vasto de habilidades de abstracci√≥n y pragmatismo que le posibilitan un uso m√°s consciente y adecuado de la tecnolog√≠a‚Äù. Esta idea refuerza que el pensamiento computacional es una competencia clave en la formaci√≥n moderna, pues impulsa el razonamiento l√≥gico, la creatividad, la capacidad de an√°lisis y la resoluci√≥n efectiva de problemas.<p>
        <p>Asimismo, Gonz√°lez y Mart√≠nez (2022) destacan que este tipo de pensamiento fomenta la autonom√≠a, la reflexi√≥n y la transferencia del conocimiento, ya que al enfrentarse a una situaci√≥n problem√°tica, el estudiante aprende a formular hip√≥tesis, analizar opciones y optimizar soluciones. En conjunto, ambas perspectivas subrayan que el desarrollo del pensamiento computacional no solo fortalece habilidades t√©cnicas, sino tambi√©n cognitivas y sociales, promoviendo un aprendizaje m√°s cr√≠tico, colaborativo y adaptable a los retos del mundo digital. <p>
        <p>En s√≠ntesis, el pensamiento computacional no consiste en programar, sino en entender y estructurar el razonamiento humano de manera l√≥gica y eficiente. Es una herramienta poderosa que permite transformar problemas complejos en soluciones claras, fomentando la creatividad, el pensamiento cr√≠tico y el trabajo en equipo. <p>
        <p> Antes de profundizar en sus componentes principales, es importante reconocer algunas ideas equivocadas y concepciones correctas que suelen presentarse al hablar de este concepto. A continuaci√≥n, se muestra un cuadro comparativo que busca diferenciar los mitos y realidades sobre el pensamiento computacional, con el fin de comprender su verdadero alcance y relevancia. <p>
        <p style="margin-top: 25px;">
        <p style="margin-top: 25px;">
        <img src="assets/img/tema1siyno.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>  <p>
        <p><strong>Los cuatro pilares del pensamiento computacional:</strong></p>
        <p>  Descomposici√≥n, reconocimiento de patrones , abstracci√≥n y dise√±o de algoritmos<p>
        <img src="assets/img/Pcompu.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p>El pensamiento computacional se apoya en cuatro habilidades fundamentales que permiten comprender, analizar y resolver problemas de manera estructurada. Estas competencias no solo se aplican en el √°mbito de la inform√°tica, sino tambi√©n en la vida cotidiana, el trabajo y la educaci√≥n, ayudando a desarrollar una mente anal√≠tica, creativa y l√≥gica.  <p>
        <p>Seg√∫n Rodr√≠guez Canfranc (2023), el pensamiento computacional es una competencia clave en la era digital, pues permite adaptarse a un mundo cada vez m√°s tecnol√≥gico. Esta afirmaci√≥n resalta la importancia de desarrollar habilidades cognitivas que vayan m√°s all√° de la programaci√≥n. Pensar de manera computacional implica analizar los problemas con l√≥gica, creatividad y organizaci√≥n, cualidades indispensables para desenvolverse con √©xito en entornos acad√©micos, laborales y cotidianos cada vez m√°s influenciados por la tecnolog√≠a.  <p>
        <p>A diferencia de lo que muchos piensan, el pensamiento computacional no se limita al uso de ordenadores o la escritura de c√≥digo; m√°s bien, es un proceso mental que permite formular problemas y dise√±ar soluciones claras y efectivas, aplicables en cualquier √°mbito. Como se√±ala Jeannette Wing, una de las pioneras del concepto, esta disciplina consiste en ‚Äúresolver problemas, dise√±ar sistemas y comprender el comportamiento humano utilizando los principios fundamentales de la inform√°tica‚Äù.  <p>
        <p>De esta forma, el pensamiento computacional se construye sobre cuatro pilares esenciales que orientan el an√°lisis y la resoluci√≥n de problemas: la descomposici√≥n, el reconocimiento de patrones, la abstracci√≥n y el dise√±o de algoritmos. Cada uno de ellos cumple un rol clave en la formaci√≥n del razonamiento l√≥gico y en la aplicaci√≥n de estrategias eficientes tanto en contextos educativos como en situaciones reales de la vida diaria.  <p>
        <p>A continuaci√≥n, se explican cada una de estas habilidades con m√°s detalle:  <p>
        <p>üìä1. Descomposici√≥n: <p>
        <p>La descomposici√≥n consiste en dividir un problema complejo en partes m√°s peque√±as y manejables, lo que facilita su an√°lisis y soluci√≥n. Esta habilidad ayuda a comprender mejor la estructura del problema, identificar sus componentes principales y abordar cada parte de forma organizada. Al resolver paso a paso, se evita la confusi√≥n y se mejora la eficiencia del trabajo.  <p>
        <p>Ejemplo: Si queremos organizar una feria escolar, podemos dividir el proyecto en subtareas: elegir el lugar, definir los stands, asignar responsables y planificar la difusi√≥n. Cada etapa puede resolverse de manera independiente, logrando una gesti√≥n m√°s clara y efectiva.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/descomponer.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>‚è∫Ô∏è2. Reconocimiento de patrones: <p>
        <p>El reconocimiento de patrones permite detectar similitudes, tendencias o repeticiones entre distintos problemas o situaciones. Esta habilidad es fundamental para reutilizar soluciones previas y optimizar el tiempo, ya que muchos desaf√≠os comparten estructuras comunes. Reconocer patrones tambi√©n fomenta la capacidad de predecir resultados y tomar decisiones m√°s acertadas.  <p>
        <p>Ejemplo: Si un docente nota que sus estudiantes aprenden mejor con actividades visuales, puede aplicar esa misma estrategia en diferentes materias o temas, aprovechando un patr√≥n de aprendizaje efectivo.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/profe.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üßä 3. Abstracci√≥n: <p>
        <p>La abstracci√≥n consiste en identificar los aspectos m√°s importantes de un problema y eliminar los detalles que no son relevantes para su soluci√≥n. De esta forma, se logra simplificar la informaci√≥n, concentrarse en lo esencial y dise√±ar modelos m√°s claros y funcionales. Es una habilidad clave para priorizar, sintetizar y comprender la esencia de cualquier situaci√≥n.  <p>
        <p>Ejemplo: Al dise√±ar una aplicaci√≥n de recetas, no es necesario detallar el color o la textura de los ingredientes; lo esencial es definir los pasos del proceso de preparaci√≥n, las cantidades y el tiempo de cocci√≥n.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/recetaPro.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üíª 4. Dise√±o de algoritmos:  <p>
        <p>El dise√±o de algoritmos implica establecer una secuencia l√≥gica y ordenada de pasos que conducen a la soluci√≥n de un problema. Es la base de la programaci√≥n, pero tambi√©n se aplica en la organizaci√≥n de tareas diarias. Un buen algoritmo debe ser claro, preciso y repetible, de modo que cualquier persona pueda seguirlo y obtener el mismo resultado.  <p>
        <p>Ejemplo: Para preparar un s√°ndwich, el algoritmo ser√≠a: tomar pan, colocar los ingredientes en orden, cerrar y servir. Este m√©todo garantiza coherencia y evita errores en el proceso.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/prepararSand.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>Finalmente, estos cuatro pilares fortalecen el razonamiento l√≥gico, la creatividad, la autonom√≠a y la colaboraci√≥n. Desarrollar el pensamiento computacional no solo prepara para comprender la tecnolog√≠a, sino que tambi√©n mejora la forma en que se analizan y resuelven los problemas cotidianos. En un mundo cada vez m√°s digital, estas habilidades se convierten en herramientas esenciales para el aprendizaje significativo y la adaptaci√≥n a los desaf√≠os del siglo XXI.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/esquemap.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        
        <p><strong>Qu√© es un algoritmo y sus caracter√≠sticas:</strong></p>
        <p style="margin-top: 25px;">
        <img src="assets/img/Algotmos.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        
        <p><strong>¬øQu√© es un algoritmo?</strong></p>
        <p style="margin-top: 30px;">
        <p style="text-align: center; font-style: italic; font-weight: bold;">
        "Un algoritmo es un conjunto de pasos que define c√≥mo hay que realizar una tarea. 
        Para que una m√°quina como una computadora pueda llevar a cabo una tarea, 
        es preciso dise√±ar y representar un algoritmo en una forma que sea compatible con la m√°quina."
        </p>
        <p style="text-align: center; font-style: italic; font-weight: bold;">
        Brookshear, G. (2012), Introducci√≥n a la Computaci√≥n (11a ed.). Pearson.
        </p>
        <p style="margin-top: 30px;">
        <p>En el √°mbito del pensamiento computacional, un algoritmo se entiende como una secuencia finita y ordenada de pasos l√≥gicos que permiten resolver un problema o realizar una tarea de manera sistem√°tica. Seg√∫n Cede√±o y Cede√±o (2021), los algoritmos representan ‚Äúun conjunto de instrucciones bien definidas que, al ejecutarse paso a paso, conducen a la obtenci√≥n de un resultado esperado.‚Äù
         Esto implica que su aplicaci√≥n no se limita al campo de la programaci√≥n, sino que puede observarse tambi√©n en la vida cotidiana, como al seguir una receta, resolver una operaci√≥n matem√°tica o planificar una actividad. <p>
        <p>El pensamiento computacional utiliza los algoritmos como una herramienta esencial para estructurar el razonamiento y organizar las ideas de forma l√≥gica, secuencial y coherente. En esta l√≠nea, Wing (2006) se√±ala que el pensamiento computacional consiste en ‚Äúla formulaci√≥n de problemas y la representaci√≥n de sus soluciones de manera que puedan ser ejecutadas eficazmente por un agente procesador de informaci√≥n.‚Äù Es decir, un algoritmo no solo define qu√© se debe hacer, sino tambi√©n c√≥mo debe hacerse. <p>
        <p style="margin-top: 25px;">
        <p>‚öôÔ∏è Caracter√≠sticas de un algoritmo : <p>
        <p>De acuerdo con Garc√≠a-Molina y Valverde (2019), un algoritmo debe cumplir con una serie de caracter√≠sticas fundamentales que garantizan su eficacia y aplicabilidad. Estas propiedades permiten que un procedimiento sea comprendido, ejecutado y optimizado tanto por personas como por computadoras. <p>
        
        <p style="margin-top: 30px;">
        <img src="assets/img/finito.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p> 1. Finito: <p>
        <p>Un algoritmo debe estar compuesto por un n√∫mero limitado de pasos. Esto significa que el proceso debe tener un punto de inicio y un final claramente definidos. Si las instrucciones se ejecutaran de forma infinita, el problema nunca llegar√≠a a resolverse.<p>
         <p>Ejemplo: Un algoritmo para calcular el promedio de notas termina una vez que obtiene el resultado final, no contin√∫a calculando indefinidamente. <p>
         <p>2. Claridad: <p>
        <p> Cada paso o instrucci√≥n debe expresarse de forma precisa, sin ambig√ºedades o interpretaciones m√∫ltiples. La claridad garantiza que cualquier persona o m√°quina pueda seguir las instrucciones sin cometer errores por confusi√≥n.<p>
         <p> Ejemplo: En lugar de decir ‚Äúprocesar los datos‚Äù, una instrucci√≥n clara ser√≠a ‚Äúsumar los valores num√©ricos de la columna A‚Äù.<p>
        <p>3. Secuencialidad: <p>
        <p>Las instrucciones de un algoritmo deben seguir un orden l√≥gico y coherente. Cada paso depende del anterior y prepara el contexto para el siguiente, lo cual asegura que el resultado sea correcto.<p>
         <p> Ejemplo: Para preparar una receta, primero se re√∫nen los ingredientes, luego se mezclan y finalmente se cocinan; alterar el orden puede arruinar el resultado. <p>
        <p>4. Eficiencia: <p>
        <p>Un algoritmo debe poder aplicarse a una amplia variedad de casos similares, no √∫nicamente a uno espec√≠fico. Esta caracter√≠stica le otorga flexibilidad y reutilizaci√≥n.<p>
        <p>Ejemplo: Un algoritmo que calcula el promedio puede aplicarse tanto a notas escolares como a temperaturas o ingresos, siempre que los datos sean num√©ricos. <p>
        <p>Estas caracter√≠sticas aseguran que los algoritmos sean comprensibles, precisos y adaptables, permitiendo que cualquier proceso ya sea inform√°tico o cotidiano pueda ejecutarse de forma ordenada y eficiente. <p>
        <p style="margin-top: 30px;">
        <img src="assets/img/caraAlg.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üß© Estructura de un algoritmo: <p>
        <p>   Todo algoritmo se compone de tres partes fundamentales que determinan su funcionamiento: <p>
        <p>    - Entrada (input): <p>
        <p>      Corresponde a los datos iniciales o informaci√≥n necesaria para iniciar el proceso. <p>
        <p>      Ejemplo: los ingredientes de una receta o los n√∫meros que se desean sumar. <p>
        <p>    - Proceso (processing): <p>
        <p>      Es el conjunto de pasos, operaciones o transformaciones que se realizan con los datos de entrada para llegar al resultado final.<p>
        <p>      Ejemplo: mezclar los ingredientes, realizar un c√°lculo o seguir un conjunto de reglas l√≥gicas.<p>
        <p>    - Salida (output):<p>
        <p>      Es el resultado final que se obtiene despu√©s de ejecutar correctamente todos los pasos del proceso.<p>
        <p>      Ejemplo: el plato preparado, el resultado de una operaci√≥n matem√°tica o la generaci√≥n de un reporte.<p>
        <p style="margin-top: 30px;">
        <img src="assets/img/eps.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
      
      </ul>
    `,
    ejemplos: `
      <p><strong>Ejemplos:</strong></p>
        <p>Para comprender mejor c√≥mo aplicar el pensamiento computacional en distintas situaciones, a continuaci√≥n exploraremos algunos ejemplos cotidianos.
        Cada uno de ellos mostrar√° c√≥mo se ponen en pr√°ctica sus principales pilares: descomposici√≥n, reconocimiento de patrones, abstracci√≥n y dise√±o de algoritmos as√≠ como la estructura entrada, proceso y salida, que nos ayuda a entender c√≥mo transformamos una idea o informaci√≥n en un resultado concreto. <p>
        <p><strong>üß© Ejemplos del Pensamiento Computacional </strong></p>
        <p style="margin-top: 30px;">
        <p><strong>üß† Ejemplo 1: Reuni√≥n con los amigos en un lugar nuevo</strong></p>
        <p>Situaci√≥n: <p>
        <p>Queremos organizar una salida con amigos, pero cada uno tiene gustos, presupuestos y horarios diferentes. <p>
        <p>Aplicaci√≥n del pensamiento computacional: <p>
        <img src="assets/img/reua.png" alt="Algoritmo" 
        style="float: right; width: 280px; margin: 10px 0 10px 15px; border-radius: 10px;">
        <p> - Descomposici√≥n: Dividimos el problema en partes: elegir actividad, decidir lugar, calcular gastos y coordinar horarios.<p>
        <p> - Reconocimiento de patrones: Analizamos experiencias anteriores para ver qu√© actividades funcionaron bien.<p>
        <p> - Abstracci√≥n: Dejamos de lado detalles irrelevantes (como el color de las sillas del restaurante) y nos enfocamos en lo esencial: disponibilidad, precio y transporte.<p>
        <p> - Algoritmo: <p>
        <p>   Paso a paso: crear una lista de opciones ‚Üí verificar disponibilidad ‚Üí calcular costos ‚Üí confirmar el plan.<p>
        <p>Resultado: <p>
        <p>Se obtiene una planificaci√≥n m√°s clara y r√°pida, donde todos pueden participar y decidir con base en informaci√≥n concreta. <p>
        <p style="margin-top: 30px;">
        <p><strong>üç≥ Ejemplo 2: Cocinemos</strong></p>
        <p>Descomposici√≥n: <p>
        <p>Dividir la tarea en pasos: seleccionar ingredientes, preparar utensilios, cocinar, servir. <p>
        <p>Ejemplo: <p>
        <p> - Entrada ‚Üí lista de ingredientes.<p>
        <p> - Proceso ‚Üí mezclar, batir, cocinar.<p>
        <p> - Salida ‚Üí plato terminado.<p>
        <p> Referencia visual sugerida: Cooking and Decomposition of Food. (2023, marzo 14). YouTube. https://www.youtube.com/watch?v=SR9SWaN-cOY<p>
        <p style="margin-top: 30px;">
        <p><strong>üéÆ Ejemplo 3: Videojuegos </strong></p>
        <p>Situaci√≥n: <p>
        <p>En un videojuego, el jugador debe completar un nivel recolectando objetos, evitando enemigos y encontrando la salida antes de que acabe el tiempo. <p>
         <img src="assets/img/mario.png" alt="Algoritmo" 
        style="float: right; width: 280px; margin: 10px 0 10px 15px; border-radius: 10px;">
        <p>Aplicaci√≥n del pensamiento computacional: <p>
        <p> - Descomposici√≥n: Identificar subproblemas: qu√© objetos recolectar, c√≥mo evitarlos enemigos, c√≥mo salir del nivel. <p>
        <p> - Reconocimiento de patrones: Usar estrategias que funcionaron en niveles anteriores.<p>
        <p> - Abstracci√≥n: Ignorar los elementos decorativos del entorno y centrarse solo en los objetivos necesarios para ganar.<p>
        <p> - Algoritmo:<p>
        <p>   Planificacion de secuencia de acciones: recolectar objetos ‚Üí evitar obst√°culos ‚Üí dirigirse a la salida ‚Üí completar el nivel.<p>
        <p>   Resultado: <p>
        <p>   El jugador optimiza sus decisiones, mejora su desempe√±o y puede aplicar estrategias similares en otros niveles.<p>
        <p style="margin-top: 30px;">
        <p><strong>üìø Ejemplo 4: El collar</strong></p>
        <p>Situaci√≥n: <p>
        <p> Construir un collar de 24 cm. <p>
        <img src="assets/img/collar.png" alt="Algoritmo" 
        style="float: right; width: 280px; margin: 10px 0 10px 15px; border-radius: 10px;">
        <p>Preguntas clave: <p>
        <p> - ¬øCu√°l ser√° el costo total? <p>
        <p> - ¬øQu√© materiales necesito? <p>
        <p> - ¬øQu√© materiales necesito? <p>
        <p> - ¬øCu√°ntas piezas debe tener?<p>
        <p>Pensamiento computacional aplicado: <p>
        <p> - Descomponer el problema (materiales, medidas, costo).<p>
        <p> - Reconocer patrones (si cada cuenta mide 2 cm, se necesitan 12 piezas).<p>
        <p> - Abstraer detalles irrelevantes (colores o formas no afectan el c√°lculo).<p>
        <p> - Dise√±ar un algoritmo:<p>
        <p>   calcular cantidad de piezas √ó costo por unidad = costo total.<p>
        <p style="margin-top: 30px;">
        <p><strong>‚öôÔ∏è Algoritmos</strong></p>
        <p style="margin-top: 30px;">
        <p><strong>ü™• Ejemplo 5: Lavarnos los dientess </strong></p>
        <p> Descomposici√≥n:<p>
        <p> - Elegir el cepillo y la pasta de dientes.<p>
        <p> - Colocar la pasta.<p>
        <p> - Cepillar los dientes por al menos 2 minutos.<p>
        <p> - Enjuagar.<p>
        <p>   Algoritmo:<p>
        <p>   1Ô∏è‚É£ Tomar el cepillo.<p>
        <p>   2Ô∏è‚É£ Aplicar la pasta.<p>
        <p>   3Ô∏è‚É£ Cepillar los dientes en movimientos circulares.<p>
        <p>   4Ô∏è‚É£ Enjuagar con agua.<p>
        <p>   5Ô∏è‚É£ Guardar el cepillo.<p>
        <p style="margin-top: 30px;">
        <p><strong>üß© Ejemplo 6: Hacer un s√°ndwich</strong></p>
        <p>Entrada: Pan, jam√≥n, queso, lechuga, tomate. <p>
        <p>Proceso: <p>
        <p>1Ô∏è‚É£ Tomar una rebanada de pan.
           2Ô∏è‚É£ Colocar los ingredientes en orden.
           3Ô∏è‚É£ Tapar con la otra rebanada. <p>
        <p>Salida: Un s√°ndwich listo para comer. <p>
        <p>Este ejemplo muestra la estructura Entrada ‚Üí Proceso ‚Üí Salida, que representa el funcionamiento b√°sico de cualquier algoritmo. <p>
        <p style="margin-top: 30px;">
        <p><strong>üß© Ejemplo 7: Encendido de una computadora</strong></p>
        <p>Entrada: Presionar el bot√≥n de encendido. <p>
        <img src="assets/img/encecompu.png" alt="Algoritmo" 
        style="float: right; width: 280px; margin: 10px 0 10px 15px; border-radius: 10px;">
        <p>Proceso: <p>
        <p>El sistema verifica los componentes, carga el sistema operativo y prepara el entorno de trabajo.<p>
        <p>Salida: Computadora lista para usar.<p>
        <p>Este ejemplo muestra la estructura Entrada ‚Üí Proceso ‚Üí Salida, que representa el funcionamiento b√°sico de cualquier algoritmo. <p>
        <p style="margin-top: 30px;">
        <p><strong>üß© Ejemplo 8: C√°lculo del promedio de notas</strong></p>
        <p>Entrada: Conjunto de notas (por ejemplo, 15, 17, 19).<p>
        <p>Proceso: <p>
        <p>Sumar las notas y dividir entre la cantidad de valores.<p>
        <p>Salida: Promedio final del estudiante (por ejemplo, 17). <p>
        <p style="margin-top: 30px;">

    `,
    prueba_diagnostica: `
      <p><strong>Prueba diagn√≥stica:</strong> </p>
      <p><strong>üëã ¬°Bienvenido(a) a la Evaluaci√≥n Diagn√≥stica del Tema 1: Pensamiento Computacional y Algoritmos!</strong></p>
        <p>Esta evaluaci√≥n tiene como prop√≥sito conocer tu comprensi√≥n sobre los temas abordados: pensamiento computacional, sus pilares (descomposici√≥n, reconocimiento de patrones, abstracci√≥n y dise√±o de algoritmos), as√≠ como el concepto, la estructura y las caracter√≠sticas de un algoritmo. <p>
        <p> üìä Importante:
        Esta evaluaci√≥n forma parte de la entrada del minicurso y equivale al 25 % de la nota total de este primer minicurso<p>
        <p>üïí Instrucciones:<p>
        <p> - Lee cuidadosamente cada pregunta antes de responder.<p>
        <p> - Marca la alternativa correcta o desarrolla tu respuesta seg√∫n se indique.<p>
        <p> - Solo se permite una respuesta por pregunta.<p>
        <p> - Dispones de 30 minutos para completar la evaluaci√≥n.<p>
        <p> - La nota m√≠nima para aprobar este cuestionario es 11.<p>
        <p>‚ú® ¬°√âxitos! Recuerda que esta es una oportunidad para reflexionar sobre tu forma de pensar, analizar y resolver problemas.<p>
        <div style="text-align: center; margin: 30px 0;">
            <a href="https://form-timer.com/start/92fc7bfb" target="_blank" 
             style="display: inline-block; background-color: #007bff; color: white; 
            padding: 12px 24px; text-decoration: none; border-radius: 8px; 
            font-weight: bold; font-size: 16px; transition: 0.3s;">
           üìù Ir al cuestionario
            </a>
           </div>

    `   
  },
  dia2: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    <p>
    ‚úîÔ∏è Comprender el concepto y la utilidad de los diagramas de flujo.<br>
    ‚úîÔ∏è Aplicar correctamente los elementos y reglas de construcci√≥n de diagramas de flujo.<br>
    ‚úîÔ∏è Desarrollar habilidades de an√°lisis, planificaci√≥n y comunicaci√≥n de procesos mediante diagramas de flujo.<br>
     </p>
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong> Diagramas de flujo, s√≠mbolos y reglas de construcci√≥n.</p>
    <p> <p>
  <p style="margin-top: 25px;">
        <img src="assets/img/esquemap.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
         <p><strong>Los cuatro pilares del pensamiento computacional:</strong></p>
      <p style="margin-top: 25px;">
    <p><strong>¬øQu√© es un diagrama de flujo?</strong></p>
    <p>Los diagramas de flujo son herramientas visuales fundamentales en el √°mbito del pensamiento computacional, ya que permiten representar de manera gr√°fica y ordenada los pasos de un proceso o algoritmo. Estos diagramas utilizan s√≠mbolos estandarizados, como rect√°ngulos para procesos, rombos para decisiones, √≥valos para inicio y fin, y flechas para indicar la secuencia de ejecuci√≥n. Su principal ventaja es que facilitan la comprensi√≥n y an√°lisis de soluciones a problemas complejos, haciendo visible la l√≥gica que subyace en un proceso o algoritmo (Mendiolaza, 2022). <p>
    <p>En el contexto educativo, los diagramas de flujo cumplen un papel esencial para desarrollar habilidades de resoluci√≥n de problemas. Los estudiantes pueden descomponer situaciones complejas en pasos m√°s simples y manejables, promoviendo un enfoque l√≥gico y estructurado. Adem√°s, les permite planificar soluciones antes de ejecutarlas, identificando posibles errores o redundancias, lo que fortalece el pensamiento anal√≠tico y la capacidad de tomar decisiones de manera ordenada (Garc√≠a, 2024). <p>
    <p>El uso de diagramas de flujo en la ense√±anza de la programaci√≥n aporta ventajas adicionales, ya que los estudiantes pueden visualizar la l√≥gica de un algoritmo antes de implementarlo en c√≥digo. Esta visualizaci√≥n previa ayuda a anticipar problemas, optimizar los pasos del proceso y mejorar la eficiencia en la resoluci√≥n de tareas. Tambi√©n facilita la comunicaci√≥n de ideas, permitiendo que otras personas comprendan el algoritmo de manera r√°pida y precisa, independientemente de su experiencia previa en programaci√≥n (De Rivero Manrique, 2022). <p>
    <p>En s√≠ntesis, los diagramas de flujo no solo son representaciones gr√°ficas de algoritmos o procesos, sino que fomentan competencias cr√≠ticas en los estudiantes, como la descomposici√≥n de problemas, el pensamiento l√≥gico y la capacidad de analizar y optimizar soluciones. Su uso continuo contribuye a la formaci√≥n de un pensamiento computacional s√≥lido, aplicable no solo en programaci√≥n, sino tambi√©n en la vida cotidiana y en diversas disciplinas acad√©micas (Mendiolaza et al., 2022). <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/diagram.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Para qu√© sirve:</strong></p>
    <p>Los diagramas de flujo son herramientas fundamentales para representar procesos de manera clara y ordenada. Permiten visualizar cada paso de un procedimiento, decisi√≥n o actividad, mostrando c√≥mo se relacionan entre s√≠ y en qu√© secuencia ocurren. Esto facilita la comprensi√≥n de procesos complejos, ya que convierte informaci√≥n abstracta o extensa en un formato gr√°fico f√°cil de interpretar. Al observar un diagrama de flujo, cualquier persona puede entender r√°pidamente c√≥mo se desarrolla un proceso completo, desde el inicio hasta el final, sin necesidad de leer largos textos o instrucciones confusas.<p>
    <p>Otra funci√≥n importante de los diagramas de flujo es planificar soluciones antes de implementarlas. Antes de ejecutar un procedimiento, los diagramas permiten identificar pasos innecesarios, posibles errores o redundancias en el proceso. Esto es especialmente √∫til en la programaci√≥n, la gesti√≥n de proyectos o en cualquier actividad que requiera varios pasos coordinados. Planificar mediante un diagrama ayuda a ahorrar tiempo, recursos y esfuerzo, ya que se pueden realizar ajustes y mejoras antes de que el proceso real comience. <p>
    <p>Adem√°s, los diagramas de flujo sirven para comunicar ideas de manera efectiva. Cuando se trabaja en equipo, un diagrama gr√°fico es mucho m√°s claro que explicaciones verbales o instrucciones escritas largas. Todos los miembros del equipo pueden entender el procedimiento, las decisiones y la secuencia de acciones de forma r√°pida y uniforme. Esto reduce errores de interpretaci√≥n y mejora la coordinaci√≥n entre las personas que participan en un proyecto, facilitando la colaboraci√≥n y la toma de decisiones. <p>
    <p>Finalmente, los diagramas de flujo no solo son √∫tiles en entornos t√©cnicos o educativos, sino que tambi√©n se aplican en la vida cotidiana. Por ejemplo, se pueden usar para planificar tareas diarias, organizar proyectos personales o describir cualquier proceso que requiera pasos secuenciales. Gracias a su capacidad de simplificar la informaci√≥n y hacerla visual, los diagramas de flujo se convierten en una herramienta vers√°til para analizar, optimizar y comunicar procesos en cualquier √°mbito. <p>
      <p style="margin-top: 25px;">
    <img src="assets/img/digram.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Elementos b√°sicos de un diagrama de flujo</strong></p>
    <p>Los diagramas de flujo son herramientas visuales fundamentales que permiten representar de manera gr√°fica los pasos de un proceso o algoritmo. Utilizan s√≠mbolos estandarizados, como √≥valos, rect√°ngulos, rombos y paralelogramos, para ilustrar acciones, decisiones y flujos de informaci√≥n. Esta estandarizaci√≥n facilita la interpretaci√≥n, comunicaci√≥n y an√°lisis de procesos complejos, asegurando que cualquier persona pueda comprender la secuencia de acciones sin ambig√ºedades (Herrera, 2020).<p>
    <p>Adem√°s, los diagramas de flujo no solo ayudan a comprender los procesos existentes, sino que tambi√©n sirven como herramienta de planificaci√≥n y optimizaci√≥n. Al construir un diagrama, se pueden identificar errores, redundancias o pasos innecesarios antes de implementar el proceso en la pr√°ctica. Esto es especialmente √∫til en programaci√≥n, administraci√≥n de proyectos y dise√±o de sistemas, ya que permite mejorar la eficiencia y claridad del procedimiento. <p>
    <p><strong>√ìvalo (Inicio/Fin): </strong></p>
    <p>El √≥valo marca los l√≠mites de un proceso, se√±alando el punto de partida y el final de la secuencia. Adem√°s de indicar d√≥nde comienza y termina, este s√≠mbolo ayuda a diferenciar el flujo principal de subprocesos o bucles dentro del diagrama. En procesos m√°s complejos, puede utilizarse para representar eventos externos que inician o concluyen un procedimiento, asegurando que los lectores del diagrama identifiquen claramente los puntos cr√≠ticos del proceso. <p>
     <p style="margin-top: 25px;">
    <img src="assets/img/oval.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Rect√°ngulo (Proceso): </strong></p>
    <p>El rect√°ngulo representa cualquier acci√≥n, tarea o actividad dentro de la secuencia. M√°s all√° de ser un simple paso, este s√≠mbolo permite identificar transformaciones de datos, operaciones de c√°lculo o tareas espec√≠ficas que modifican la informaci√≥n. Cada rect√°ngulo debe ser breve, descriptivo y contener instrucciones claras para que el flujo sea comprensible, incluso para personas que no est√©n familiarizadas con el proceso. Adem√°s, los rect√°ngulos se pueden combinar con otros s√≠mbolos para mostrar subprocesos o rutinas repetitivas. <p>
        <p style="margin-top: 25px;">
    <img src="assets/img/rectangulo.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Rombo (Decisi√≥n): </strong></p>
    <p>El rombo indica un punto de decisi√≥n en el proceso, donde se eval√∫a una condici√≥n o se elige entre varias alternativas. Este s√≠mbolo no solo representa bifurcaciones ‚Äús√≠/no‚Äù, sino que tambi√©n puede emplearse para decisiones m√∫ltiples o condiciones l√≥gicas m√°s complejas. Su correcta utilizaci√≥n permite visualizar c√≥mo los resultados de una decisi√≥n afectan el flujo del proceso y facilita la identificaci√≥n de caminos cr√≠ticos o posibles errores en la secuencia. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/des.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Paralelogramo (Entrada/Salida):</strong></p>
    <p>El paralelogramo se utiliza para representar la entrada o salida de datos. Esto incluye informaci√≥n recibida del usuario, de sistemas externos o de sensores, as√≠ como resultados que deben mostrarse o registrarse. Su funci√≥n es destacar los puntos donde el proceso interact√∫a con el entorno, permitiendo diferenciar entre operaciones internas y comunicaci√≥n con factores externos. Es esencial para procesos que requieren interacci√≥n constante con el usuario o sistemas externos. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/paralelogramo .jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Conector: </strong></p>
    <p>El conector, representado como un c√≠rculo peque√±o con una letra o n√∫mero dentro, se utiliza en los diagramas de flujo para unir diferentes partes del proceso cuando el flujo es demasiado largo o se distribuye en varias p√°ginas. Su funci√≥n principal es evitar que las flechas crucen todo el diagrama, manteniendo el esquema m√°s limpio y f√°cil de seguir. A diferencia del √≥valo de inicio o fin, este c√≠rculo no indica el comienzo ni la conclusi√≥n del proceso, sino que act√∫a √∫nicamente como un punto de enlace entre pasos que est√°n separados visualmente, facilitando la lectura y organizaci√≥n del diagrama. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/circulo.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Flechas (Conexi√≥n/Flujo):</strong></p>
    <p>Las flechas indican la direcci√≥n en que se ejecutan los pasos del diagrama, conectando s√≠mbolos y mostrando la secuencia l√≥gica de acciones. Adem√°s de guiar al lector, permiten visualizar ramificaciones, bucles y rutas alternativas dentro del proceso. Su correcta orientaci√≥n asegura que el diagrama sea f√°cil de seguir y que no se pierda la coherencia entre los distintos pasos, facilitando la comprensi√≥n del flujo completo del proceso. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/flecha.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Reglas y buenas pr√°cticas: </strong></p>
     <p>Antes de profundizar en las reglas espec√≠ficas, es importante se√±alar que existen diversas buenas pr√°cticas para la elaboraci√≥n de diagramas de flujo, cada una dise√±ada para mejorar la claridad, comprensi√≥n y eficiencia de los procesos representados. Aunque hay muchas recomendaciones posibles, las que se presentan a continuaci√≥n son consideradas las m√°s comunes y esenciales, ya que su aplicaci√≥n garantiza que el diagrama sea comprensible para cualquier persona, facilite el an√°lisis de los procesos y permita una correcta comunicaci√≥n de la informaci√≥n. Aplicar estas reglas b√°sicas ayuda no solo a representar procesos de manera ordenada, sino tambi√©n a identificar errores, optimizar procedimientos y mantener la coherencia visual en diagramas de flujo complejos, especialmente en entornos educativos y profesionales. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/diasa.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>1. Orden l√≥gico y coherente: </strong></p>
    <p>Es fundamental que los diagramas de flujo sigan una secuencia l√≥gica y coherente, generalmente de arriba hacia abajo o de izquierda a derecha, dependiendo del formato que se utilice. Mantener un orden claro permite que cualquier persona que observe el diagrama pueda seguir los pasos sin confundirse ni perder informaci√≥n importante. Un flujo ordenado facilita identificar r√°pidamente los procesos cr√≠ticos, los puntos de decisi√≥n y las entradas o salidas de informaci√≥n, evitando errores en la interpretaci√≥n. Adem√°s, un diagrama bien estructurado ayuda a planificar y optimizar procesos, ya que permite visualizar de manera clara la relaci√≥n entre cada acci√≥n y su consecuencia, haciendo m√°s sencillo detectar redundancias o pasos innecesarios dentro del proceso general. <p>
    <p>Seg√∫n Asana (2025), "poner las tareas en orden cronol√≥gico es esencial para crear diagramas de flujo efectivos", ya que este orden permite representar los procesos de manera clara y estructurada, facilitando su an√°lisis y comprensi√≥n. Esto es particularmente importante en entornos educativos y profesionales, donde los diagramas se utilizan no solo para mostrar c√≥mo se realizan los pasos, sino tambi√©n para ense√±ar la l√≥gica detr√°s de un proceso o para comunicarla a un equipo de trabajo, asegurando que todos los involucrados comprendan la secuencia completa de manera uniforme. <p>
    <p style="margin-top: 25px;">
    <p><strong>2. Evitar cruces de flechas innecesarios: </strong></p>
    <p>Los cruces de flechas pueden generar confusi√≥n y dificultar la lectura del diagrama de flujo, sobre todo cuando el diagrama es extenso o incluye m√∫ltiples decisiones y procesos paralelos. Mantener un dise√±o limpio es esencial para que el diagrama sea funcional y est√©ticamente claro. Para lograrlo, se recomienda organizar los s√≠mbolos de manera estrat√©gica y, si es necesario, dividir el diagrama en secciones o utilizar conectores que unan partes separadas, evitando que las flechas se crucen o se superpongan. Un diagrama con flechas claras y sin cruces innecesarios no solo mejora la comprensi√≥n, sino que tambi√©n permite detectar errores de manera m√°s r√°pida, facilita la revisi√≥n de procesos y ayuda a mantener la consistencia en la documentaci√≥n de procedimientos. <p>
    <p>Creately (2025) sugiere que se debe "evitar cruzar o superponer l√≠neas", ya que "si las flechas se cruzan o se enredan, el diagrama se ver√° desordenado y ser√° dif√≠cil de seguir". Esta recomendaci√≥n resalta la importancia de mantener un flujo visualmente claro y ordenado, lo que es esencial tanto en la ense√±anza de programaci√≥n y procesos administrativos, como en la documentaci√≥n de sistemas complejos, ya que facilita que cualquier observador pueda comprender r√°pidamente la l√≥gica del procedimiento representado. <p>
    <p style="margin-top: 25px;">
    <p><strong>3. Claridad en nombres y pasos: </strong></p>
    <p>La claridad en los nombres y pasos de un diagrama de flujo es esencial para garantizar que cualquier persona pueda entender f√°cilmente el proceso, incluso si no tiene experiencia previa con √©l. Cada s√≠mbolo debe contener descripciones precisas, cortas y directas que indiquen exactamente qu√© acci√≥n, decisi√≥n o entrada/salida representa. Evitar t√©rminos ambiguos o abreviaciones poco claras ayuda a reducir la confusi√≥n y asegura que los diagramas cumplan su funci√≥n como herramientas de comunicaci√≥n y an√°lisis. Adem√°s, un etiquetado claro permite que los diagramas sean reutilizables, sirviendo como gu√≠a de procesos estandarizados, material educativo o documentaci√≥n para equipos de trabajo en diferentes contextos. <p>
    <p>Nulab (2024) enfatiza la importancia de "etiquetar claramente cada s√≠mbolo y conector para indicar su prop√≥sito o funci√≥n dentro del diagrama de flujo". Esta pr√°ctica asegura que la informaci√≥n se comunique de manera efectiva y sin ambig√ºedades, lo que contribuye a mejorar la comprensi√≥n, la eficiencia en la ejecuci√≥n de los procesos y la capacidad de an√°lisis cr√≠tico. Una correcta nomenclatura tambi√©n facilita la identificaci√≥n de problemas o la implementaci√≥n de mejoras en los procesos, haciendo que los diagramas sean herramientas din√°micas y funcionales en cualquier entorno acad√©mico o profesional. <p>
    <p style="margin-top: 25px;">

    <p><strong>Relaci√≥n con los algoritmos </strong></p> 
    <p>Los algoritmos son secuencias de pasos definidos que permiten resolver un problema o realizar una tarea espec√≠fica. Sin embargo, comprender estos pasos √∫nicamente de manera textual puede resultar complicado, especialmente en procesos extensos o con decisiones m√∫ltiples. En este contexto, los diagramas de flujo se convierten en una representaci√≥n gr√°fica fundamental, ya que muestran visualmente la l√≥gica del algoritmo y la conexi√≥n entre sus diferentes etapas. Cada s√≠mbolo dentro del diagrama representa una acci√≥n o decisi√≥n, lo que facilita seguir la secuencia de operaciones y detectar posibles errores o redundancias. <p>
    <p>Seg√∫n Cormen et al. (2022), ‚Äúalgorithmic representations provide a structured way to model computational processes, ensuring clarity before implementation‚Äù (p. 45). Esto significa que los diagramas de flujo act√∫an como un puente entre la idea abstracta del algoritmo y su implementaci√≥n pr√°ctica, ayudando a los programadores y estudiantes a visualizar el razonamiento detr√°s de cada instrucci√≥n y a construir soluciones m√°s eficientes y comprensibles. <p>
        <p style="margin-top: 25px;">
    <img src="assets/img/algrtimo.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>C√≥mo los diagramas de flujo representan gr√°ficamente los pasos de un algoritmo </strong></p> 
    <p>Los diagramas de flujo representan los pasos de un algoritmo mediante una combinaci√≥n de s√≠mbolos gr√°ficos estandarizados y flechas que indican la direcci√≥n del flujo de control. Cada s√≠mbolo tiene una funci√≥n espec√≠fica: los √≥valos se√±alan el inicio y el fin del proceso, los rect√°ngulos representan operaciones o c√°lculos, los rombos indican decisiones y los paralelogramos muestran las entradas o salidas de datos. Esta estructura facilita la lectura y el an√°lisis del algoritmo, permitiendo entender su funcionamiento sin necesidad de interpretar c√≥digo. <p>
     <p style="margin-top: 25px;">
    <img src="assets/img/paqued.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Conceptos de entrada, proceso y salida aplicados a diagramas de flujo </strong></p> 
    <p>En el dise√±o de diagramas de flujo, los conceptos de entrada, proceso y salida (E-P-S) representan la estructura b√°sica de cualquier algoritmo. La entrada hace referencia a los datos o informaci√≥n inicial que se introduce en el sistema; el proceso comprende las operaciones que transforman o manipulan esa informaci√≥n; y la salida corresponde a los resultados finales generados por el algoritmo. Esta secuencia asegura que el flujo l√≥gico de la informaci√≥n sea coherente y ordenado. <p>
    <p>Brookshear y Brylow (2023) se√±alan que ‚Äúthe input-process-output model remains a cornerstone of computational systems, providing a conceptual foundation for data transformation and algorithmic logic‚Äù (p. 78). As√≠, los diagramas de flujo permiten visualizar c√≥mo los datos ingresan, se procesan y finalmente se convierten en resultados √∫tiles, facilitando la comprensi√≥n y el an√°lisis de sistemas inform√°ticos y procesos administrativos. <p>
    <p style="margin-top: 25px;">

    <p><strong>Tipos de diagramas de flujo:</strong></p> 
    <p><strong> - Lineales:</strong></p> 
    <p>Los diagramas de flujo lineales muestran procesos que siguen una secuencia estrictamente ordenada, sin ramificaciones ni decisiones condicionales. Cada paso se ejecuta de manera consecutiva, lo que los hace ideales para representar algoritmos simples o deterministas, como c√°lculos matem√°ticos o transformaciones directas de datos. Su estructura clara y directa permite comprender f√°cilmente el flujo de ejecuci√≥n. <p>
         <p style="margin-top: 25px;">
    <img src="assets/img/lineales.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong> - Con decisiones:</strong></p> 
    <p>Los diagramas de flujo con decisiones incorporan bifurcaciones l√≥gicas que permiten elegir entre diferentes caminos dentro del proceso, dependiendo del resultado de una condici√≥n. Estas decisiones, representadas mediante el rombo, posibilitan que el algoritmo sea adaptable y responda a distintas circunstancias. Este tipo de diagrama es com√∫n en procesos donde se deben evaluar opciones o verificar condiciones antes de continuar con una acci√≥n determinada. <p>
         <p style="margin-top: 25px;">
    <img src="assets/img/bucles.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong> - Con bucles o ciclos:</strong></p> 
    <p>Los diagramas de flujo con bucles o ciclos representan procesos que se repiten hasta que se cumple una determinada condici√≥n. Estos bucles son esenciales para modelar algoritmos iterativos, como aquellos que procesan listas, realizan c√°lculos repetitivos o eval√∫an condiciones en forma continua. La representaci√≥n gr√°fica de los ciclos ayuda a visualizar la naturaleza repetitiva de muchas tareas computacionales y a comprender la l√≥gica de la iteraci√≥n. <p>
         <p style="margin-top: 25px;">
    <img src="assets/img/bucless.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">

    <p><strong> Videos a Conultar: :</strong></p> 
    <p>‚Ä¢Video de diagrma de flujo: Astraway. (2022, marzo 10). El diagrama de flujo explicado: para qu√© sirve, c√≥mo se hace, tipos, ejemplos, caracter√≠sticas [Video]. YouTube. https://www.youtube.com/watch?v=pWVFKfTUeYQ.</p>
    <p><strong> Programas que te pueden servir para practicar :</strong></p> 
    <p>‚Ä¢ Raptor: RAPTOR es un programa educativo que permite crear y ejecutar algoritmos mediante diagramas de flujo.</p>
    <p>‚Ä¢ Miro: Miro es una pizarra digital en l√≠nea que permite crear diagramas de flujo, mapas mentales y esquemas colaborativos.</p>
    <p>‚Ä¢ Flowgorithm: Flowgorithm es una herramienta gratuita dise√±ada para aprender algoritmos de manera visual.</p>
           <p style="margin-top: 25px;">
    <img src="assets/img/Raptor.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    
    `,

    ejemplos: `<p><strong>Ejemplos:</strong> </p>
    
      <p><strong> Caso 1: Determinar si una empresa obtiene ganancias o p√©rdidas</strong></p> 
      <p>En una empresa, es fundamental conocer si las operaciones realizadas durante un periodo generan ganancias o p√©rdidas. Para ello, se necesita un procedimiento l√≥gico que permita comparar los ingresos totales con los costos totales.  </p> 
            <p style="margin-top: 25px;">
    <img src="assets/img/digrameje1.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p>Fuente: Jorge Cogollo. (2020, abril 15). ¬øQu√© es un diagrama de flujo? C√≥mo hacer diagramas de flujo paso a paso + ejemplos [Video]. YouTube. https://www.youtube.com/watch?v=Kucgc6NpGwc  </p>
    <p style="margin-top: 25px;">  
      <p>El siguiente caso plantea un algoritmo de decisi√≥n que eval√∫a la situaci√≥n econ√≥mica de la empresa: primero se ingresan los valores correspondientes a los ingresos y los costos. Luego, mediante una condici√≥n, se determina si los ingresos son mayores o iguales a los costos. Si esta condici√≥n se cumple, el sistema calcula la ganancia, restando los costos de los ingresos. En caso contrario, calcula la p√©rdida, restando los ingresos de los costos.  </p> 
          <p>Este proceso permite representar de manera clara y estructurada la l√≥gica de decisi√≥n financiera, siendo √∫til para cualquier organizaci√≥n que desee automatizar la evaluaci√≥n de sus resultados econ√≥micos. Adem√°s, el diagrama de flujo facilita la comprensi√≥n del procedimiento, mostrando visualmente las posibles rutas seg√∫n la condici√≥n establecida.  </p> 
            <p><strong> Caso 2: roceso de solicitud y recepci√≥n de compra en una empresa</strong></p> 
          <p>Toda organizaci√≥n necesita un procedimiento ordenado para realizar compras y gestionar proveedores, garantizando que los productos o servicios adquiridos cumplan con los est√°ndares de calidad. Este caso describe un algoritmo con decisi√≥n que representa el flujo del proceso de solicitud de compra dentro de una empresa.  </p> 
               <p style="margin-top: 25px;">
    <img src="assets/img/digrmamej2.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p>LIZARD. (2023, agosto 15). Gu√≠a para realizar diagramas de flujo y ejemplos [Video]. YouTube. https://www.youtube.com/watch?v=HsMgOuOwnFs </p>
    <p style="margin-top: 25px;">     
          <p>El proceso se inicia con la solicitud de compra, que da paso a la b√∫squeda y evaluaci√≥n del proveedor m√°s adecuado. Una vez identificado, se establece la comunicaci√≥n para negociar condiciones, precios y plazos de entrega. Posteriormente, se emite la orden de compra y se procede con la recepci√≥n del producto solicitado.  </p> 
            <p>En este punto, el algoritmo incluye una decisi√≥n clave: verificar si el producto recibido cumple con las especificaciones y est√°ndares requeridos (¬øConforme?).  </p> 
            <p>‚Ä¢ Si la respuesta es ‚ÄúS√≠‚Äù, el producto es aceptado e ingresado a las instalaciones, completando el proceso.  </p> 
            <p>‚Ä¢ Si la respuesta es ‚ÄúNo‚Äù, se activa la gesti√≥n de garant√≠a o devoluci√≥n, hasta que se resuelva la no conformidad.</p> 
            <p>Finalmente, el proceso concluye con el registro del ingreso del producto conforme y el fin del procedimiento. </p> 

    
    `

  },
  dia3: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
    <p>
    ‚úîÔ∏è Comprender el concepto y la funci√≥n de las variables y los tipos de datos en la construcci√≥n de algoritmos<br>
    ‚úîÔ∏è Aplicar correctamente las reglas de declaraci√≥n, asignaci√≥n y uso de variables en ejercicios pr√°cticos de pseudoc√≥digo<br>
    ‚úîÔ∏è Reconocer y diferenciar los principales tipos de datos (num√©ricos, l√≥gicos y de texto)<br>
     </p>
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong> </p>
    
    <p><strong> 1. Concepto de variable </strong></p> 
    <p>Una variable es un elemento fundamental en la programaci√≥n y en el dise√±o de algoritmos. Se define como un espacio de memoria identificado por un nombre, que permite almacenar, modificar y recuperar datos durante la ejecuci√≥n de un programa. Su principal funci√≥n es guardar valores que pueden cambiar seg√∫n las condiciones o las operaciones realizadas dentro del proceso. Gracias a las variables, los algoritmos pueden adaptarse a diferentes situaciones, recibir datos externos, procesarlos y generar resultados din√°micos. <p>
    <p>En t√©rminos pr√°cticos, las variables funcionan como ‚Äúcontenedores‚Äù de informaci√≥n. Por ejemplo, en un algoritmo que calcula el √°rea de un tri√°ngulo, se pueden usar tres variables: base, altura y √°rea. Estas almacenan los valores necesarios y permiten realizar el c√°lculo correspondiente. De esta forma, las variables son esenciales para representar datos temporales, facilitar el manejo de la informaci√≥n y hacer que los algoritmos sean reutilizables y flexibles en diferentes contextos. </p>
    <p>Seg√∫n Valacich y Schneider (2023), ‚Äúlas variables son nombres simb√≥licos que representan valores de datos en la memoria, lo que permite que los programas manipulen y reutilicen la informaci√≥n de manera eficiente‚Äù, lo que evidencia su papel como herramientas clave en el razonamiento l√≥gico y la resoluci√≥n de problemas mediante programaci√≥n. En consecuencia, comprender el concepto de variable es un paso esencial para desarrollar habilidades en pensamiento computacional, ya que constituye la base sobre la cual se construyen estructuras m√°s complejas como las condicionales, los bucles y las funciones. </p>
    <p style="margin-top: 25px;">
    <img src="assets/img/concep.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">

    <p><strong> 2. Reglas para nombrar variables:  </strong></p> 
      <p>Nombrar adecuadamente las variables es un aspecto esencial dentro de la programaci√≥n y del dise√±o de algoritmos, ya que influye directamente en la claridad, comprensi√≥n y mantenimiento del c√≥digo. Una variable debe tener un nombre que describa claramente el tipo de dato o funci√≥n que representa, permitiendo que tanto el programador como otras personas que revisen el c√≥digo comprendan su prop√≥sito de manera inmediata. </p>
      <p> Las reglas para nombrar variables suelen ser comunes en la mayor√≠a de los lenguajes de programaci√≥n. Estas normas aseguran que el c√≥digo sea claro, legible y libre de errores. A continuaci√≥n, se presentan las principales: </p>
      <p> ‚Ä¢ No usar espacios en los nombres de las variables: </p>
      <p> En lugar de espacios, se deben emplear guiones bajos (_) o el formato camelCase.</p>
      <p> Ejemplos: </p>
    <p style="margin-top: 25px;">
    <img src="assets/img/coryI.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">

      <p> ‚Ä¢ No comenzar el nombre con n√∫meros: </p>
      <p>   Los nombres de variables deben iniciar con una letra o un guion bajo</p>
      <p> Ejemplos: </p>
       <p style="margin-top: 25px;">
    <img src="assets/img/c2.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
      <p> ‚Ä¢ Evitar el uso de palabras reservadas del lenguaje: </p>
      <p> Las palabras clave del lenguaje (como if, for, while, print, entre otras) no pueden usarse como nombres de variables, ya que tienen un significado especial dentro de la sintaxis del programa.</p>
      <p> Ejemplos: </p>
        <p style="margin-top: 25px;">
    <img src="assets/img/c3.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
      <p> ‚Ä¢ Usar nombres descriptivos y coherentes.</p>
      <p> Es recomendable emplear nombres que representen con claridad el prop√≥sito de la variable. Esto mejora la comprensi√≥n del c√≥digo, especialmente cuando se trabaja en equipo o se revisa un programa con el tiempo.</p>
      <p> Ejemplos: </p>
        <p style="margin-top: 25px;">
    <img src="assets/img/c4.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
     <p><strong> 3. Tipos de datos: </strong></p> 
      <p>Los tipos de datos primitivos constituyen la base de la programaci√≥n, ya que permiten definir el tipo de informaci√≥n que una variable puede almacenar. Cada tipo de dato tiene caracter√≠sticas propias y se utiliza seg√∫n la naturaleza de la informaci√≥n que se necesite manipular en un algoritmo. Comprender estos tipos es fundamental para escribir programas correctos y eficientes, pues determina c√≥mo se procesan, comparan y almacenan los valores en memoria. </p>
      <p>Seg√∫n Savitch (2021), ‚Äúlos tipos de datos primitivos son los bloques de construcci√≥n fundamentales de los lenguajes de programaci√≥n, ya que proporcionan las formas m√°s simples de almacenamiento y manipulaci√≥n de datos‚Äù (p. 52). Esto significa que los tipos de datos primitivos son los elementos esenciales sobre los cuales se construyen estructuras m√°s complejas, como los arreglos, las listas o los objetos. </p>
      <p>A continuaci√≥n, se describen los principales tipos de datos primitivos y su funci√≥n dentro de los algoritmos: </p>
      
      <p>‚Ä¢ <strong>Enteros (int):</strong></p>
      <p>Tama√±o aproximado: 4 bytes (32 bits)  </p>
     <p>Representan n√∫meros sin parte decimal, tanto positivos como negativos. Se utilizan para contar, iterar o realizar operaciones que no requieren precisi√≥n decimal.</p>
     <p><strong>Ejemplos:</strong></p>
        <p style="margin-top: 25px;">
    <img src="assets/img/int.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">

     <hr style="margin: 15px 0;">

     <p>‚Ä¢ <strong>Reales o decimales (float):</strong></p>
     <p>Se emplean para representar n√∫meros con punto decimal o fracciones. Son √∫tiles en c√°lculos cient√≠ficos, financieros o de medici√≥n donde la precisi√≥n es importante.</p>
     <p>Tama√±o aproximado: 4 a 8 bytes  </p>
     <p><strong>Ejemplos:</strong></p>
   <p style="margin-top: 25px;">
  <img src="assets/img/float.png" alt="Pensamiento computacional" style="width: 180px; display: block; margin: 10px auto; border-radius: 8px;">
  <hr style="margin: 10px auto; width: 50%; height: 1px; background-color: #ccc; border: none;">
</p>

     <p>‚Ä¢ <strong>Car√°cter (char):</strong></p>
      <p>Representa un solo s√≠mbolo o letra, ya sea una letra, n√∫mero o signo.</p>
      <p>Tama√±o aproximado: 1 byte  </p>
     <p><strong>Ejemplo:</strong></p>
 <p style="margin-top: 25px;">
  <img src="assets/img/caracter.png" alt="Pensamiento computacional" style="width: 180px; display: block; margin: 10px auto; border-radius: 8px;">
  <hr style="margin: 10px auto; width: 50%; height: 1px; background-color: #ccc; border: none;">
</p>


     <p>‚Ä¢ <strong>Cadena (string):</strong></p>
     <p>Una cadena es una secuencia de caracteres (letras, n√∫meros o s√≠mbolos) encerrada entre comillas. Se utiliza para almacenar y procesar texto.</p>
     <p>Tama√±o aproximado: 1 byte por car√°cter </p>
     <p><strong>Ejemplos:</strong></p>
     <p style="margin-top: 25px;">
    <img src="assets/img/cadena1.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">


     <hr style="margin: 15px 0;">

     <p>‚Ä¢ <strong>Booleanos (bool):</strong></p>
    <p>Este tipo de dato representa valores verdadero o falso (True o False). Se usa principalmente en expresiones l√≥gicas y estructuras de decisi√≥n.</p>
     <p>Tama√±o aproximado: 1 byte </p>
    <p><strong>Ejemplo:</strong></p>
    <p style="margin-top: 25px;">
    <img src="assets/img/bool.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
      <hr style="margin: 15px 0;">
    <p>4. Declaraci√≥n y asignaci√≥n de variables:  </strong></p>


<p>
  La declaraci√≥n de una variable consiste en indicar su nombre y el tipo de dato que almacenar√°, 
  mientras que la asignaci√≥n implica darle un valor espec√≠fico. En t√©rminos generales, declarar una 
  variable significa reservar un espacio en la memoria del computador para guardar informaci√≥n que podr√° 
  cambiar durante la ejecuci√≥n del programa. Seg√∫n Gaddis (2022), 
  ‚Äúdeclaring and initializing variables properly is essential for writing clear and error-free programs, 
  as it defines how data will be stored and manipulated throughout execution‚Äù (p. 47). 
  Esto resalta la importancia de comprender que toda variable debe tener un prop√≥sito claro y un valor 
  que pueda modificarse conforme avanza el algoritmo.
</p>

<p>
  En pseudoc√≥digo, la declaraci√≥n y asignaci√≥n suelen escribirse de manera expl√≠cita, 
  definiendo el tipo y el valor inicial. Por ejemplo:
</p>

<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  Definir edad Como Entero <br>
  edad ‚Üê 20
</div>
<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  Definir nombre Como Cadena <br>
  nombre ‚Üê "Ana"
</div>
<p>
 En este caso, se declara la variable edad como un n√∫mero entero y la variable nombre como una cadena de texto, asign√°ndoles valores iniciales.
</p>

<p>
En cambio, en Python, la sintaxis es m√°s simple, ya que no es necesario especificar el tipo de dato al declarar una variable. El tipo se infiere autom√°ticamente seg√∫n el valor asignado:</p>
</p>
<div style="background-color: #007bff; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  
  edad = 20<br>
nombre = "Ana"
</div>
<p style="margin-top: 30px;">
<p>
Esta caracter√≠stica convierte a Python en un lenguaje de tipado din√°mico, lo que facilita el aprendizaje inicial de la programaci√≥n. Sin embargo, tambi√©n requiere que el programador sea cuidadoso al manipular los valores, ya que el tipo de dato puede cambiar durante la ejecuci√≥n si no se controla adecuadamente.
</p>

<p><strong> 5. Operaciones con variable</strong></p>
<p>
Las operaciones con variables permiten realizar c√°lculos y comparaciones dentro de un algoritmo, siendo fundamentales para el procesamiento de datos y la toma de decisiones. Estas operaciones se dividen principalmente en <strong>aritm√©ticas</strong> y <strong>l√≥gicas</strong>. 
Seg√∫n Lambert (2023), <em>‚Äúoperators act as symbols that instruct the computer to perform specific computations or evaluations on data values stored in variables‚Äù</em> (p. 65). 
Esto significa que los operadores son mecanismos mediante los cuales un programa puede transformar, combinar o analizar informaci√≥n durante su ejecuci√≥n.
</p>

<p> üîπ Operadores aritm√©ticos</p>
<p>  Se utilizan para realizar c√°lculos matem√°ticos b√°sicos:</p>

<ul style="list-style-type: none; padding-left: 0; text-align: left; margin-left: 20px;">
 <li>‚ûï <strong>Suma (+)</strong> ‚Üí combina dos valores: <em>a + b</em>.</li>
  <li>‚ûñ <strong>Resta (-)</strong> ‚Üí calcula la diferencia: <em>a - b</em>.</li>
  <li>‚úñÔ∏è <strong>Multiplicaci√≥n (*)</strong> ‚Üí obtiene el producto: <em>a * b</em>.</li>
  <li>‚ûó <strong>Divisi√≥n (/)</strong> ‚Üí devuelve el cociente: <em>a / b</em>.</li>
  <li>üî¢ <strong>M√≥dulo (%)</strong> ‚Üí obtiene el residuo de una divisi√≥n: <em>a % b</em>.</li>
<p> Antes de analizar los ejemplos pr√°cticos, es importante visualizar de manera gr√°fica los principales operadores que intervienen en el manejo de variables</p>
    <p style="margin-top: 25px;">
    <img src="assets/img/opera.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">


     <hr style="margin: 15px 0;">


</ul>

<p><strong>Por ejemplo, en pseudoc√≥digo:</strong></p>

<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  Definir a, b, suma Como Entero <br>
  a ‚Üê 10 <br>
  b ‚Üê 3 <br>
  suma ‚Üê a + b
</div>

<p><strong>Y en Python:</strong></p>

<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  a = 10 <br>
  b = 3 <br>
  suma = a + b
</div>

<p> üîπ Operadores l√≥gicos o relacionales</p>
<p>Permiten comparar valores o expresar condiciones. Los m√°s comunes son:</p>

<ul style="list-style-type: none; padding-left: 0; text-align: left; margin-left: 20px;">
  <li>‚Ä¢ <strong>&gt;</strong> (mayor que)</li>
  <li>‚Ä¢ <strong>&lt;</strong> (menor que)</li>
  <li>‚Ä¢ <strong>==</strong> (igual a)</li>
  <li>‚Ä¢ <strong>!=</strong> (distinto de)</li>
  <li>‚Ä¢ <strong>and</strong>, <strong>or</strong>, <strong>not</strong> ‚Üí combinan o niegan expresiones l√≥gicas.</li>
</ul>

<p><strong>Por ejemplo, en Python:</strong></p>

<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  x = 5 <br>
  y = 8 <br>
  resultado = (x &lt; y) and (y != 10)
  <p style="margin-top: 30px;">
</div>

<p>
En este caso, <strong>resultado</strong> ser√° <em>True</em> porque ambas condiciones se cumplen. Estas operaciones son esenciales en estructuras de control como los condicionales (<em>if</em>) y los bucles (<em>while</em> o <em>for</em>), ya que permiten determinar el flujo l√≥gico de ejecuci√≥n del algoritmo.
</p>

<!-- === 3.6. Entrada y salida de datos === -->

<p><strong>6. Entrada y salida de datos :  </strong></p>
<p>
  En todo algoritmo o programa inform√°tico, los procesos de entrada y salida de datos son esenciales para permitir la comunicaci√≥n entre el usuario y el sistema. 
  La <strong>entrada</strong> se refiere a la informaci√≥n que el programa recibe para ejecutar sus operaciones, mientras que la <strong>salida</strong> corresponde 
  a los resultados que el programa muestra. Seg√∫n <em>Dale y Weems (2023)</em>, 
  ‚Äú<em>input and output operations enable communication between the program and the user, forming the basis of interactive computing</em>‚Äù (p. 33). 
  Esto significa que sin estos mecanismos, el algoritmo no podr√≠a interactuar con su entorno.
</p>

<p>
  En pseudoc√≥digo, la instrucci√≥n <strong>Leer</strong> permite capturar datos, mientras que <strong>Mostrar</strong> presenta los resultados:
</p>

<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #007bff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  Leer nombre <br>
  Mostrar "Bienvenido, ", nombre
</div>

<p>
  En <strong>Python</strong>, se utilizan las funciones <strong>input()</strong> y <strong>print()</strong>:
</p>

<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #28a745; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  nombre = input("Ingresa tu nombre: ") <br>
  print("Bienvenido,", nombre)
</div>

<hr style="margin: 30px 0; border: 0; border-top: 1px solid #ccc;">


<!-- === 3.7. Conversi√≥n de tipos (Casting) === -->

<p><strong>7. Conversi√≥n de tipos :  </strong></p>
<p>
  En programaci√≥n, la conversi√≥n de tipos o <em>casting</em> permite transformar datos de un tipo a otro, como texto a n√∫mero o n√∫mero a cadena. 
  Seg√∫n <em>Liang (2022)</em>, ‚Äú<em>type casting allows programmers to control how data is interpreted and manipulated, ensuring valid results</em>‚Äù (p. 59).
</p>

<p>Ejemplo en pseudoc√≥digo:</p>
<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #ffc107; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  Definir edad Como Cadena <br>
  edad ‚Üê ConvertirAEntero("25")
</div>

<p>Y en Python:</p>
<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #ffc107; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  edad = "25" <br>
  edad = int(edad) <br>
  print(edad + 5)
</div>

<p>
  La correcta aplicaci√≥n del casting garantiza que los programas sean m√°s estables y eviten errores por incompatibilidad de tipos.
</p>

<hr style="margin: 30px 0; border: 0; border-top: 1px solid #ccc;">


<!-- === 3.8. Constantes === -->

<p><strong>8. Constantes :  </strong></p>
<p>
  Las <strong>constantes</strong> representan valores fijos que no cambian durante la ejecuci√≥n del programa. 
  Seg√∫n <em>Gaddis (2022)</em>, ‚Äú<em>constants improve program readability and reliability by preventing accidental modification</em>‚Äù (p. 72). 
  Esto mejora la claridad y estabilidad del c√≥digo.
</p>

<p>Ejemplo en pseudoc√≥digo:</p>
<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #17a2b8; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  Constante PI ‚Üê 3.1416
</div>

<p>Ejemplo en Python:</p>
<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #17a2b8; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  PI = 3.1416 <br>
  radio = 5 <br>
  area = PI * radio ** 2 <br>
  print(area)
</div>

<p>
  El uso adecuado de constantes permite mantener los programas organizados, claros y menos propensos a errores.
</p>
<!-- 3.10 Errores comunes al usar variables -->
<p><strong>9. Errores comunes al usar variables: </strong></p>
<p>
En la programaci√≥n, los errores relacionados con las variables son una de las causas m√°s frecuentes de fallos en la ejecuci√≥n de un algoritmo. Comprender su origen y saber c√≥mo prevenirlos es esencial para desarrollar programas correctos, legibles y eficientes. Estos errores suelen deberse a una mala gesti√≥n de los valores, a la confusi√≥n entre tipos de datos o al uso incorrecto de la sintaxis del lenguaje.
</p>
<p style="margin-top: 30px;">
<table style="width: 100%; border-collapse: collapse; margin-top: 20px; font-family: Arial, sans-serif; color: #f1f1f1;">
  <thead style="background-color: #00bfff;">
    <tr>
      <th style="padding: 10px; text-align: left;">Tipo de error</th>
      <th style="padding: 10px; text-align: left;">Descripci√≥n</th>
      <th style="padding: 10px; text-align: left;">Ejemplo</th>
      <th style="padding: 10px; text-align: left;">Consecuencia o efecto</th>
    </tr>
  </thead>
  <tbody style="background-color: #1e1e1e;">
    <tr>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Variable no inicializada</td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Ocurre cuando se utiliza una variable antes de asignarle un valor inicial.</td>
      <td style="padding: 10px; border-bottom: 1px solid #333; font-family: 'Courier New', monospace; background-color: #2a2a2a; color: #9cdcfe;">
        print(total)
      </td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">El programa genera un error en tiempo de ejecuci√≥n, ya que la variable no existe en memoria.</td>
    </tr>
    <tr>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Incompatibilidad de tipos</td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Se intenta operar con datos de distintos tipos sin conversi√≥n previa.</td>
      <td style="padding: 10px; border-bottom: 1px solid #333; font-family: 'Courier New', monospace; background-color: #2a2a2a; color: #9cdcfe;">
        suma = "10" + 5
      </td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Error de tipo (<em>TypeError</em>); el programa no puede sumar una cadena y un n√∫mero.</td>
    </tr>
    <tr>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Sobrescritura de valores</td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Una variable cambia de valor de forma no intencionada durante la ejecuci√≥n del programa.</td>
      <td style="padding: 10px; border-bottom: 1px solid #333; font-family: 'Courier New', monospace; background-color: #2a2a2a; color: #9cdcfe;">
        precio = 50<br>precio = 0  # Se pierde el valor anterior
      </td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Los resultados finales del algoritmo se alteran al perderse informaci√≥n previa.</td>
    </tr>
    <tr>
      <td style="padding: 10px;">Errores de sintaxis</td>
      <td style="padding: 10px;">Se emplean nombres inv√°lidos, signos incorrectos o se omiten elementos del lenguaje.</td>
      <td style="padding: 10px; font-family: 'Courier New', monospace; background-color: #2a2a2a; color: #9cdcfe;">
        1dato = 10<br>precio total = 20
      </td>
      <td style="padding: 10px;">El programa no se ejecuta; el int√©rprete muestra errores de sintaxis.</td>
    </tr>
  </tbody>
</table>
<p style="margin-top: 30px;">
<p style="margin-top: 18px; text-align: justify;">
  Identificar y prevenir estos errores permite mejorar la calidad del c√≥digo y fortalecer el pensamiento l√≥gico del programador. 
  Seg√∫n <strong>Lambert (2022)</strong>, 
  <em>‚Äútype and initialization errors are among the most frequent sources of bugs in introductory programming, as they reflect misunderstandings about how variables store and manage data‚Äù</em> 
  (p. 61). 
  Por ello, la pr√°ctica constante y la revisi√≥n sistem√°tica del c√≥digo son estrategias clave para lograr algoritmos funcionales y eficientes.
</p>

  
    `,
    ejemplos: `<p><strong>Ejemplos:</strong> </p>
    
    <p>Despu√©s de comprender los conceptos te√≥ricos sobre variables, tipos de datos, operadores, constantes y manejo de errores, es fundamental observar su aplicaci√≥n pr√°ctica dentro de algoritmos y programas. Los siguientes ejemplos ilustran c√≥mo se declaran, asignan y manipulan variables, c√≥mo se realizan operaciones aritm√©ticas y l√≥gicas, y de qu√© manera se ejecutan procesos de entrada, salida y conversi√≥n de datos. </p>
    
    <p>A trav√©s de estos ejercicios, se busca consolidar el aprendizaje te√≥rico mediante la pr√°ctica, fortaleciendo las habilidades de pensamiento l√≥gico y computacional necesarias para el dise√±o y desarrollo de programas.     </p>

<p style="text-align: justify;">
A continuaci√≥n, se presentan ejemplos que integran los conceptos vistos sobre variables, tipos de datos, operaciones, conversi√≥n, constantes y manejo de errores.
</p>

<!-- Ejemplo 1 -->

<p><strong>üîπ Ejemplo 1: Declaraci√≥n y asignaci√≥n de variables</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Definir nombre Como Cadena<br>
    Definir edad Como Entero<br><br>
    nombre ‚Üê "Luc√≠a"<br>
    edad ‚Üê 22<br><br>
    Mostrar "Nombre:", nombre<br>
    Mostrar "Edad:", edad
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    nombre = "Luc√≠a"<br>
    edad = 22<br><br>
    print("Nombre:", nombre)<br>
    print("Edad:", edad)
  </div>
</div>

<p><strong>Resultado:</strong><br>Nombre: Luc√≠a<br>Edad: 22</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 2 -->
<p><strong>üîπ Ejemplo 2: Operaciones aritm√©ticas</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Definir a, b, suma, promedio Como Real<br>
    a ‚Üê 10<br>
    b ‚Üê 8<br>
    suma ‚Üê a + b<br>
    promedio ‚Üê suma / 2<br><br>
    Mostrar "Suma:", suma<br>
    Mostrar "Promedio:", promedio
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    a = 10<br>
    b = 8<br>
    suma = a + b<br>
    promedio = suma / 2<br><br>
    print("Suma:", suma)<br>
    print("Promedio:", promedio)
  </div>
</div>

<p><strong>Resultado:</strong><br>Suma: 18<br>Promedio: 9.0</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 3 -->

<p><strong>üîπ Ejemplo 3: Operadores l√≥gicos</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Definir edad Como Entero<br>
    edad ‚Üê 17<br><br>
    Si edad >= 18 Entonces<br>
    &nbsp;&nbsp;Mostrar "Eres mayor de edad"<br>
    Sino<br>
    &nbsp;&nbsp;Mostrar "Eres menor de edad"<br>
    FinSi
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    edad = 17<br><br>
    if edad >= 18:<br>
    &nbsp;&nbsp;print("Eres mayor de edad")<br>
    else:<br>
    &nbsp;&nbsp;print("Eres menor de edad")
  </div>
</div>

<p><strong>Resultado:</strong><br>Eres menor de edad</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 4 -->

<p><strong>üîπ Ejemplo 4: Entrada y salida de datos</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Leer nombre<br>
    Leer edad<br>
    Mostrar "Hola ", nombre, ", tienes ", edad, " a√±os."
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    nombre = input("Ingresa tu nombre: ")<br>
    edad = input("Ingresa tu edad: ")<br><br>
    print("Hola", nombre + ", tienes " + edad + " a√±os.")
  </div>
</div>

<p><strong>Resultado:</strong><br>Hola Sof√≠a, tienes 21 a√±os.</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 5 -->
<p><strong>üîπ Ejemplo 5: Conversi√≥n de tipos (Casting)</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Definir texto Como Cadena<br>
    texto ‚Üê "100"<br>
    numero ‚Üê ConvertirAEntero(texto)<br>
    resultado ‚Üê numero + 20<br>
    Mostrar "Resultado:", resultado
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    texto = "100"<br>
    numero = int(texto)<br>
    resultado = numero + 20<br><br>
    print("Resultado:", resultado)
  </div>
</div>

<p><strong>Resultado:</strong><br>Resultado: 120</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 6 -->

<p><strong>üîπ Ejemplo 6: Uso de constantes</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Constante PI ‚Üê 3.1416<br>
    Definir radio, area Como Real<br>
    radio ‚Üê 5<br>
    area ‚Üê PI * radio * radio<br>
    Mostrar "El √°rea del c√≠rculo es:", area
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    PI = 3.1416<br>
    radio = 5<br>
    area = PI * radio ** 2<br><br>
    print("El √°rea del c√≠rculo es:", area)
  </div>
</div>

<p><strong>Resultado:</strong><br>El √°rea del c√≠rculo es: 78.54</p>


    `,
    quiz_intermedio: `<p><strong>Quiz:</strong></p>
<section id="quiz_intermedio" class="quiz-section" style="font-family: 'Segoe UI', Tahoma, sans-serif; color: #222; line-height: 1.6; margin-top: 30px;">

  <p><strong>üß© Planteamiento:</strong> Este cuestionario tiene como finalidad reforzar tu comprensi√≥n sobre el uso de variables, tipos de datos y errores comunes al programar. A trav√©s de preguntas pr√°cticas, podr√°s identificar conceptos clave y evaluar tu progreso en el manejo de la l√≥gica computacional.</p>

  <p><strong></strong> <br>
  <strong> Condici√≥n de aprobaci√≥n:</strong> Nota m√≠nima 11.<br>
  <strong> Peso en la evaluaci√≥n:</strong> 25% de la nota final.</p>

   <p><strong> Indicaciones:</strong></p>
 <ul style="margin: 12px 0 18px 20px; line-height: 1.7; text-align: left; color: #f3f4f6; font-family: 'Segoe UI', Tahoma, sans-serif;">
  <li>Lee atentamente cada pregunta antes de responder. Aseg√∫rate de comprender bien el enunciado antes de elegir una opci√≥n.</li>
  <li>Selecciona la opci√≥n que consideres correcta seg√∫n los conceptos aprendidos. Piensa en la respuesta m√°s l√≥gica basada en lo visto en clase.</li>
  <li>Verifica tus respuestas antes de enviar el formulario. Revisa consistencia y que no hayas marcado opciones por error.</li>
  <li>Recuerda que la pr√°ctica constante mejora tu razonamiento l√≥gico; intenta razonar cada ejercicio y aprende de los errores.</li>
</ul>


  <p><strong>üìä BONUS:</strong> Se incluye un peque√±o caso  opcional para aplicar los conceptos vistos. Su desarrollo no es obligatorio, pero puede otorgar puntos adicionales y fortalecer tus habilidades pr√°cticas.</p>
<p style="margin-top: 30px;">
  <div style="text-align:center; margin-top:25px;">
    <a href="https://docs.google.com/forms/d/e/1FAIpQLSeivVtuBxYdjlADkDpjTQRWxMoLGeBKrpp-YkqA1tVbIpz_tg/viewform?usp=dialog" 
       target="_blank" 
       style="background-color:#007BFF; color:white; padding:12px 26px; border-radius:8px; text-decoration:none; font-weight:bold; box-shadow: 0 3px 6px rgba(0,0,0,0.15); transition: background-color 0.3s;">
       üìã Iniciar Quiz
    </a>
  </div>

</section>

    `
  },
  dia4: {
    objetivo: `<p><strong>Objetivo:</strong> Aplicar estructuras secuenciales y condicionales para resolver problemas.</p>
    <p>
    ‚úîÔ∏è Comprender el funcionamiento de las estructuras secuenciales y condicionales en la programaci√≥n.<br>
    ‚úîÔ∏è Aplicar correctamente estructuras de control.<br>
    ‚úîÔ∏è Aplicar estas ideas tanto en el aula como en la vida diaria.
     </p>
    
    
    
    `,
    teoria: `
<section style="color: white; font-family: 'Poppins', sans-serif; line-height: 1.6; text-align: left; padding: 20px;">

  <h2 style="color: #e0edf2ff; font-size: 1.0em; margin-bottom: 8px;">1. Concepto de estructura secuencial</h2>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;"> Definici√≥n y funcionamiento</h3>
  <p>
    La estructura secuencial constituye la base de toda l√≥gica algor√≠tmica. Se refiere a la ejecuci√≥n ordenada y lineal de las instrucciones de un programa, donde cada paso se cumple exactamente en el orden en que se escribe, sin saltos, bifurcaciones ni repeticiones.
    <br><br>
    Joyanes Aguilar (2022) explica que ‚Äúuna estructura secuencial es aquella en la que las acciones se ejecutan en el mismo orden en que se definen, sin alteraciones en el flujo de control‚Äù (p. 238). 
    Esto significa que el flujo sigue un camino √∫nico desde el inicio hasta el final, garantizando un resultado predecible siempre que las entradas sean las mismas.
    <br><br>
    En otras palabras, los programas secuenciales act√∫an como una receta: se deben seguir los pasos en orden para obtener el resultado correcto. 
    Si el orden cambia, el proceso pierde sentido. Por ejemplo, no se puede mostrar un resultado antes de realizar la operaci√≥n correspondiente; esto romper√≠a la secuencia l√≥gica.
  </p>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;"> Importancia dentro del flujo de un algoritmo</h3>
  <p>
    Dominar la estructura secuencial es esencial para comprender c√≥mo piensa un programa. 
    Antes de introducir condiciones o ciclos, el estudiante debe internalizar que todo algoritmo tiene un flujo principal que avanza paso a paso.
    <br><br>
    Dale y Weems (2023) sostienen que ‚Äúlas estructuras secuenciales establecen la base l√≥gica sobre la cual se construyen las dem√°s estructuras de control‚Äù (p. 110). 
    En otras palabras, son el fundamento sobre el cual se edifica el resto de la l√≥gica algor√≠tmica.
    <br><br>
    La secuencia no solo organiza el c√≥digo, sino que tambi√©n desarrolla el pensamiento computacional, ayudando a los estudiantes a razonar de forma ordenada. 
    Cuando el flujo de un algoritmo se ejecuta secuencialmente, el programador puede predecir con facilidad el comportamiento del programa y detectar errores m√°s r√°pido.
    <br><br>
    Adem√°s, en t√©rminos de dise√±o, las secuencias aseguran que los datos fluyan correctamente entre las etapas del proceso: <strong>entrada ‚Üí procesamiento ‚Üí salida</strong>. 
    Esta cadena es el modelo b√°sico sobre el que se sustentan todos los programas inform√°ticos, desde los m√°s simples hasta los sistemas complejos.
  </p>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;"> Ejemplo pr√°ctico de estructura secuencial</h3>
  <p>
    Un ejemplo cl√°sico es el c√°lculo del √°rea de un rect√°ngulo. El algoritmo puede representarse de la siguiente manera:
  </p>

  <h4 style="color: #87cefa; font-size: 1.05em;">üß† En pseudoc√≥digo:</h4>
  <pre style="background-color: #f5f5f5; color: black; padding: 12px; border-radius: 8px; border-left: 4px solid #007bff;">
Inicio
    Definir base, altura, area Como Real
    Leer base
    Leer altura
    area ‚Üê base * altura
    Mostrar "El √°rea del rect√°ngulo es: ", area
Fin
  </pre>

  <h4 style="color: #87cefa; font-size: 1.05em;">üêç En Python:</h4>
  <pre style="background-color: #f5f5f5; color: black; padding: 12px; border-radius: 8px; border-left: 4px solid #28a745;">
base = float(input("Ingrese la base: "))
altura = float(input("Ingrese la altura: "))
area = base * altura
print("El √°rea del rect√°ngulo es:", area)
  </pre>

  <p>
    En ambos casos, las instrucciones se ejecutan de manera secuencial: primero se leen los datos, luego se calcula el resultado y finalmente se muestra en pantalla.
    <br><br>
    Si se cambiara el orden, por ejemplo, intentando imprimir el resultado antes de calcularlo, el programa generar√≠a un error o mostrar√≠a un valor incorrecto.
  </p>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;"> Relaci√≥n con los diagramas de flujo</h3>
  <p>
    En los diagramas de flujo, la estructura secuencial se representa mediante una l√≠nea continua de s√≠mbolos rectangulares (procesos) conectados por flechas que indican la direcci√≥n del flujo.
    <br><br>
    Deitel & Associates (2004) se√±alan que ‚Äúla ejecuci√≥n secuencial significa que las instrucciones se ejecutan una tras otra en el orden en que est√°n escritas, formando la estructura de control m√°s simple en la programaci√≥n‚Äù (p. 6).
    <br><br>
    Esto facilita visualizar c√≥mo los datos se transforman paso a paso, reforzando el pensamiento l√≥gico del estudiante.
  </p>

  <p>
    Por ejemplo, un diagrama de flujo para el c√°lculo del √°rea de una circunferencia incluir√≠a:
  </p>

  <p style="margin-top: 25px;">
  <img src="assets/img/arci.png" 
       alt="Pensamiento computacional" 
       style="width: 230px; display: block; margin: 15px auto; border-radius: 10px;">
</p>


  <p>Todo conectado linealmente, sin condiciones ni repeticiones.</p>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;">Ventajas de la estructura secuencial</h3>
  <ul>
    <li><strong>Simplicidad:</strong> su flujo lineal facilita la comprensi√≥n y el aprendizaje inicial.</li>
    <li><strong>Previsibilidad:</strong> el resultado depende directamente de las entradas.</li>
    <li><strong>Depuraci√≥n sencilla:</strong> al no tener bifurcaciones, los errores se localizan f√°cilmente.</li>
    <li><strong>Base l√≥gica:</strong> sirve de punto de partida para estructuras m√°s avanzadas como condicionales o bucles.</li>
  </ul>

  <p>
        Sin embargo, su principal limitaci√≥n es que no permite tomar decisiones ni repetir acciones, por lo que solo resulta √∫til para algoritmos simples o con un flujo fijo.
  </p>
<section id="tema-4-2" style="color: #ffffff; background: none; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">

  <h3 style="font-size: 1.2em; font-weight: bold; margin-top: 20px; text-align: left;">
  2. Concepto de estructura condicional
  </h3>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;"> Qu√© son las decisiones en programaci√≥n</h4>
  <p>
  En programaci√≥n, las estructuras condicionales permiten que un algoritmo tome decisiones seg√∫n se cumpla o no una condici√≥n l√≥gica. 
  A diferencia de la estructura secuencial donde todas las instrucciones se ejecutan en orden, las condicionales dirigen el flujo del programa 
  por distintos caminos, dependiendo de si una expresi√≥n es verdadera (<em>True</em>) o falsa (<em>False</em>).
  </p>
  <p>
  Seg√∫n <strong>Joyanes Aguilar (2022)</strong>, ‚Äúlas estructuras de decisi√≥n introducen la posibilidad de seleccionar entre varias acciones, 
  en funci√≥n del resultado de una condici√≥n‚Äù (p. 245). Es decir, el programa analiza una situaci√≥n y, con base en ello, decide qu√© instrucci√≥n ejecutar.
  </p>
  <p>
    Por ejemplo, en la vida real: ‚Äúsi est√° lloviendo, llevo paraguas; si no, salgo sin √©l‚Äù. En programaci√≥n ocurre lo mismo: 
    se eval√∫a una condici√≥n y se elige qu√© bloque de c√≥digo ejecutar.
  </p>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;">‚öôÔ∏è Estructura if ‚Äì else: condicional simple y doble</h4>
  <p>
    En los algoritmos, la instrucci√≥n condicional se expresa con la palabra clave <strong>if</strong> (si), que eval√∫a una condici√≥n l√≥gica.
    En la condicional simple, se ejecuta un bloque de c√≥digo solo si la condici√≥n es verdadera.
    En la condicional doble (<strong>if ‚Äì else</strong>), se ejecuta un bloque si la condici√≥n es verdadera y otro si es falsa.
  </p>
  <p>
    Seg√∫n <strong>Dale y Weems (2023)</strong>, ‚Äúel control condicional es el mecanismo que otorga flexibilidad al programa, 
    al permitir adaptar su comportamiento a distintos escenarios‚Äù (p. 118).
  </p>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;">Ejemplo de condicional simple en pseudoc√≥digo</h4>
  <pre style="background-color: #1e1e1e; color: #e0edf2ff; padding: 10px; border-radius: 6px; font-size: 0.9em;">
Inicio
    Definir edad Como Entero
    Leer edad
    Si edad >= 18 Entonces
        Mostrar "Eres mayor de edad."
    FinSi
Fin
  </pre>
  <p>
    Aqu√≠, la instrucci√≥n <strong>Mostrar</strong> se ejecuta solo si la condici√≥n <code>edad >= 18</code> se cumple. 
    Si no, el programa contin√∫a sin mostrar nada.
  </p>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;"> Ejemplo de condicional doble (if ‚Äì else)</h4>
  <pre style="background-color: #1e1e1e; color: #ffffff; padding: 10px; border-radius: 6px; font-size: 0.9em;">
Inicio
    Definir nota Como Real
    Leer nota
    Si nota >= 11 Entonces
        Mostrar "Aprobado"
    Sino
        Mostrar "Desaprobado"
    FinSi
Fin
  </pre>
  <p>
    Si la nota es mayor o igual a 11, se muestra ‚ÄúAprobado‚Äù; de lo contrario, ‚ÄúDesaprobado‚Äù. 
    Esta estructura controla decisiones y valida datos.
  </p>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;">Representaci√≥n en diagrama de flujo</h4>
  <p>
    En los diagramas de flujo, las estructuras condicionales se representan con un <strong>rombo de decisi√≥n</strong>, 
    donde se formula una pregunta o condici√≥n, como ‚Äú¬ønota ‚â• 11?‚Äù. 
    Seg√∫n <strong>Deitel & Associates (2004)</strong>, ‚Äúel s√≠mbolo de decisi√≥n (rombo) indica el punto donde el programa debe elegir entre alternativas basadas en una condici√≥n‚Äù (p. 8).
  </p>
  <ul style="text-align: left; margin-left: 25px;">
    <li>Una flecha con la etiqueta ‚ÄúS√≠‚Äù o ‚ÄúVerdadero‚Äù.</li>
    <li>Otra con la etiqueta ‚ÄúNo‚Äù o ‚ÄúFalso‚Äù.</li>
  </ul>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;"> Ejemplo en diagrama de flujo</h4>
  <ul style="text-align: left; margin-left: 25px;">
    <li>Inicio.</li>
    <li>Leer n√∫mero.</li>
    <li>Condici√≥n: ¬øn√∫mero ‚â• 0?</li>
    <li>S√≠: Mostrar ‚ÄúPositivo‚Äù.</li>
    <li>No: Mostrar ‚ÄúNegativo‚Äù.</li>
    <li>Fin.</li>
  </ul>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;"> Importancia de las estructuras condicionales</h4>
  <p>
    Las estructuras condicionales permiten que los programas reaccionen ante distintas entradas o situaciones. 
    Seg√∫n <strong>Malvino (2021)</strong>, ‚Äúsin estructuras condicionales, los programas se limitar√≠an a ejecutar instrucciones fijas, 
    sin adaptarse a los cambios de contexto o datos‚Äù (p. 214).
  </p>
  <p>
    Toda aplicaci√≥n ‚Äîdesde una calculadora hasta una red social‚Äî utiliza condiciones para tomar decisiones: validar contrase√±as, mostrar mensajes, filtrar informaci√≥n o manejar errores. 
    Dominar su uso es esencial para desarrollar la l√≥gica necesaria en la programaci√≥n.
  </p>

<section id="tema-4-5-4-6" style="color: #ffffff; background: none; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">

  <h3 style="font-size: 1.2em; font-weight: bold; margin-top: 20px; text-align: left;">
  3. Anidaci√≥n de estructuras condicionales
  </h3>

  <p>
    La <strong>anidaci√≥n de estructuras condicionales</strong> ocurre cuando una condici√≥n se encuentra dentro de otra, es decir, 
    cuando el resultado de una primera decisi√≥n determina si se evaluar√° o no una segunda. 
    Este tipo de estructuras permite representar procesos jer√°rquicos o dependientes, en los que cada paso requiere cumplir una condici√≥n anterior para continuar.
  </p>

  <p>
    Por ejemplo, al determinar si una persona puede conducir, primero se verifica si es mayor de edad; 
    si lo es, se revisa si posee una licencia vigente. Solo si ambas condiciones se cumplen, se permite la acci√≥n. 
    Esto refleja un razonamiento l√≥gico secuencial, donde una decisi√≥n conduce a otra.
  </p>

  <p>
    La anidaci√≥n es muy √∫til en algoritmos que requieren verificaciones sucesivas o m√∫ltiples niveles de decisi√≥n. 
    Sin embargo, debe utilizarse con prudencia, ya que un exceso de condicionales dentro de otras puede dificultar la lectura y el mantenimiento del c√≥digo.
  </p>

  <p>
    Seg√∫n <strong>Gaddis (2022)</strong>, ‚Äúlas estructuras de decisi√≥n anidadas permiten representar una l√≥gica compleja de manera jer√°rquica, 
    pero su uso excesivo puede reducir la claridad del programa y aumentar las probabilidades de errores l√≥gicos‚Äù (p. 113). 
    Por ello, se recomienda mantener las anidaciones simples y organizadas, o reemplazarlas por estructuras m√∫ltiples si es posible.
  </p>

  <h3 style="font-size: 1.2em; font-weight: bold; margin-top: 25px; text-align: left;">
     4. Errores comunes en estructuras condicionales
  </h3>

  <p>
    Durante la construcci√≥n de estructuras condicionales, los programadores principiantes suelen cometer errores de l√≥gica o sintaxis 
    que impiden el correcto funcionamiento del algoritmo. Reconocerlos y prevenirlos es esencial para asegurar un c√≥digo funcional y claro.
  </p>

  <p>Entre los errores m√°s frecuentes se encuentran:</p>

  <ul style="text-align: left; margin-left: 25px;">
    <li><strong>Mal uso de operadores:</strong> </li>
   <p style="margin-top: 25px;">
  <img src="assets/img/41.jpg" alt="Pensamiento computacional" style="width: 500px; display: block; margin: 15px auto; border-radius: 10px;">
</p>

    <li><strong>Falta de sangr√≠a o indentaci√≥n (en Python):</strong> </li>
   <p style="margin-top: 25px;">
  <img src="assets/img/4222.jpg" alt="Pensamiento computacional" style="width: 500px; display: block; margin: 15px auto; border-radius: 10px;">
</p>

    <li><strong>Condiciones mal planteadas o confusas:</strong> </li>
<p style="margin-top: 25px;">
  <img src="assets/img/433.jpg" alt="Pensamiento computacional" style="width: 500px; display: block; margin: 15px auto; border-radius: 10px;">
</p>

  </ul>

  <p>
    De acuerdo con <strong>Lambert (2022)</strong>, ‚Äúlos errores de sintaxis y de l√≥gica en las estructuras de decisi√≥n son una de las causas m√°s comunes de fallos en los programas, 
    especialmente cuando las condiciones no est√°n bien organizadas o los operadores se utilizan incorrectamente‚Äù (p. 129).
  </p>

  <p>
    Una buena pr√°ctica es verificar las condiciones de forma individual antes de combinarlas y comentar el c√≥digo 
    para mantener su comprensi√≥n a largo plazo.
  </p>

<section id="recursos_aprendizaje" style="color: #ffffff; font-family: 'Arial', sans-serif; line-height: 1.6; margin-top: 30px;">

  <h3 style="font-size: 1.0em; margin-bottom: 10px;">üé• Videos a consultar</h3>

  <ul style="list-style-type: none; padding-left: 0;">
    <li style="margin-bottom: 18px;">
      <strong>Casta√±o Giraldo, S. A.</strong> (2021, marzo 17). <em>Condicionales en Python desde cero [IF, ELIF, ELSE] #009</em> [Video]. YouTube. <br>
      üëâ <a href="https://www.youtube.com/watch?v=iFBcCDDDsms" target="_blank" style="color: #00bfff; text-decoration: none;">https://www.youtube.com/watch?v=iFBcCDDDsms</a><br>
      <span>Este video introduce las estructuras condicionales en Python de forma sencilla, mostrando el uso de <code>if</code>, <code>elif</code> y <code>else</code> con ejemplos claros y pr√°cticos.</span>
    </li>

    <li style="margin-bottom: 18px;">
      <strong>Code JavaVu.</strong> (2020). <em>Estructura secuencial: ejemplos de algoritmos</em> [Video]. YouTube. <br>
      üëâ <a href="https://www.youtube.com/watch?v=cY78qXjyyXU" target="_blank" style="color: #00bfff; text-decoration: none;">https://www.youtube.com/watch?v=cY78qXjyyXU</a><br>
      <span>Un recurso ideal para comprender c√≥mo funcionan las estructuras secuenciales en los algoritmos, con ejemplos pr√°cticos y explicaciones paso a paso.</span>
    </li>

    <li style="margin-bottom: 18px;">
      <strong>SnekCato.</strong> (2021, abril 25). <em>IF, ELIF, ELSE | Condicionales en Python</em> [Video]. YouTube. <br>
      üëâ <a href="https://www.youtube.com/watch?v=S2gkQHGFiRE" target="_blank" style="color: #00bfff; text-decoration: none;">https://www.youtube.com/watch?v=S2gkQHGFiRE</a><br>
      <span>Explica de manera din√°mica c√≥mo aplicar correctamente las estructuras condicionales en Python, con ejemplos de c√≥digo y ejercicios de pr√°ctica.</span>
    </li>
  </ul>

  <h3 style="font-size: 1.0em; margin-top: 25px;">üíª Programas que te pueden servir para practicar</h3>

  <ul style="list-style-type: none; padding-left: 0;">
    <li style="margin-bottom: 15px;">
      <strong>RAPTOR:</strong><br>
      Herramienta educativa para crear y ejecutar algoritmos mediante diagramas de flujo. Permite visualizar de forma clara c√≥mo se ejecutan las estructuras secuenciales y condicionales paso a paso.
    </li>

    <li style="margin-bottom: 15px;">
      <strong>Flowgorithm:</strong><br>
      Programa gratuito dise√±ado para aprender programaci√≥n a trav√©s de diagramas de flujo interactivos. Es ideal para practicar la l√≥gica de decisiones (<code>if‚Äìelse</code>, <code>if‚Äìelif‚Äìelse</code>) antes de escribir c√≥digo en Python.
    </li>

    <li style="margin-bottom: 15px;">
      <strong>Miro:</strong><br>
      Pizarra digital colaborativa que facilita la creaci√≥n de diagramas de flujo, esquemas y mapas conceptuales. Muy √∫til para representar gr√°ficamente el flujo de un algoritmo antes de implementarlo.
    </li>
  </ul>
  </section>
   <p style="margin-top: 25px;">
  <img src="assets/img/A1.png" alt="Pensamiento computacional" style="width: 500px; display: block; margin: 15px auto; border-radius: 10px;">
</p>

    `,
    ejemplos: `
    
<section id="ejemplos_estructuras" style="color: #ffffff; font-family: 'Arial', sans-serif; line-height: 1.5; margin-top: 10px; text-align: left;">

  <h3 style="font-size: 1.3em; margin-bottom: 8px;">Ejemplo 1: </h3>
  <p style="margin: 5px 0;">Un ejemplo cl√°sico de estructura secuencial es el c√°lculo del promedio de tres notas. En este tipo de estructura, las instrucciones se ejecutan una tras otra, en el mismo orden en que fueron escritas.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir n1, n2, n3, promedio Como Real
  Leer n1, n2, n3
  promedio ‚Üê (n1 + n2 + n3) / 3
  Mostrar "El promedio es: ", promedio
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è En este caso, el flujo es lineal y sin bifurcaciones: primero se leen los datos, luego se realiza el c√°lculo y finalmente se muestra el resultado.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 2:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: calcular el √°rea y el per√≠metro de un rect√°ngulo.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir base, altura, area, perimetro Como Real
  Leer base
  Leer altura
  area ‚Üê base * altura
  perimetro ‚Üê 2 * (base + altura)
  Mostrar "El √°rea es: ", area
  Mostrar "El per√≠metro es: ", perimetro
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Este ejemplo sigue un flujo lineal de lectura, c√°lculo y salida, sin condiciones ni repeticiones.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 3:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: determinar si una persona puede votar.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir edad Como Entero
  Leer edad
  Si edad >= 18 Entonces
      Mostrar "Puede votar"
  Sino
      Mostrar "No puede votar"
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Aqu√≠ se utiliza la estructura if ‚Äì else, que permite tomar una decisi√≥n seg√∫n se cumpla o no la condici√≥n (edad ‚â• 18).</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 4:</h4>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir numero Como Entero
  Leer numero
  Si numero MOD 2 = 0 Entonces
      Mostrar "El n√∫mero es par"
  Sino
      Mostrar "El n√∫mero es impar"
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è El operador MOD calcula el residuo. Si es cero, el n√∫mero es par; de lo contrario, es impar.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 5:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: verificar si una persona puede conducir.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir edad Como Entero
  Definir tiene_licencia Como Caracter
  Leer edad
  Si edad >= 18 Entonces
      Leer tiene_licencia
      Si tiene_licencia = "S" Entonces
          Mostrar "Puede conducir"
      Sino
          Mostrar "No tiene licencia"
      FinSi
  Sino
      Mostrar "No tiene la edad m√≠nima"
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Este ejemplo muestra una anidaci√≥n condicional, donde una decisi√≥n depende del resultado de otra.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 5:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: clasificar una nota seg√∫n el valor num√©rico.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir nota Como Real
  Leer nota
  Si nota >= 17 Entonces
      Mostrar "Calificaci√≥n: A"
  Sino
      Si nota >= 14 Entonces
          Mostrar "Calificaci√≥n: B"
      Sino
          Si nota >= 11 Entonces
              Mostrar "Calificaci√≥n: C"
          Sino
              Mostrar "Calificaci√≥n: D"
          FinSi
      FinSi
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Este tipo de condicional m√∫ltiple permite evaluar varias condiciones de forma ordenada, ejecutando solo la primera que sea verdadera.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 6:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: determinar la etapa de vida seg√∫n la edad.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir edad Como Entero
  Leer edad
  Si edad < 12 Entonces
      Mostrar "Ni√±o"
  Sino
      Si edad < 18 Entonces
          Mostrar "Adolescente"
      Sino
          Si edad < 60 Entonces
              Mostrar "Adulto"
          Sino
              Mostrar "Adulto mayor"
          FinSi
      FinSi
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Este ejemplo permite clasificar rangos de edad usando condiciones jer√°rquicas.</p>

</section>

    
    `
  },
  dia5: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    
     <p>
    ‚úîÔ∏è Comprender la funci√≥n del pseudoc√≥digo como herramienta intermedia entre el razonamiento l√≥gico y la programaci√≥n estructurada.<br>
    ‚úîÔ∏è Aplicar las reglas y estructuras b√°sicas del pseudoc√≥digo para representar soluciones algor√≠tmicas de forma clara y ordenada.<br>
    ‚úîÔ∏è Desarrollar habilidades de an√°lisis y planificaci√≥n mediante la escritura de algoritmos en pseudoc√≥digo.
     </p>
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>

    <section id="pseudocodigo" style="color: #ffffff; font-family: 'Arial', sans-serif; line-height: 1.5; margin-top: 30px; text-align: left;">

  <h3 style="font-size: 1.0em; margin-bottom: 8px;">1. Definici√≥n y funci√≥n del pseudoc√≥digo</h3>
  <p>El pseudoc√≥digo es una herramienta utilizada para describir el funcionamiento de un algoritmo mediante una notaci√≥n estructurada, que combina el lenguaje natural con ciertos elementos de la programaci√≥n formal. Su objetivo principal es expresar la l√≥gica de un proceso sin preocuparse por la sintaxis r√≠gida de un lenguaje de programaci√≥n. Esto permite que el analista o el estudiante se concentre en el razonamiento l√≥gico antes de escribir c√≥digo ejecutable.</p>

  <p>El pseudoc√≥digo no es interpretado por una computadora, sino que act√∫a como gu√≠a previa para el desarrollo del software. Gracias a su car√°cter universal, puede ser comprendido por programadores de distintos lenguajes y niveles de experiencia. Adem√°s, se considera una fase intermedia esencial en el dise√±o de programas, ya que evita errores conceptuales en etapas posteriores.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer n√∫mero1, n√∫mero2
   Sumar ‚Üê n√∫mero1 + n√∫mero2
   Mostrar Sumar
Fin
  </pre>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">2. Importancia en la programaci√≥n</h3>
  <p>El uso del pseudoc√≥digo es fundamental para el desarrollo del pensamiento l√≥gico y computacional. Permite que los estudiantes y programadores organicen sus ideas antes de pasar al c√≥digo fuente, reduciendo la posibilidad de errores y mejorando la eficiencia del proceso de programaci√≥n. En la ense√±anza de la inform√°tica, el pseudoc√≥digo se utiliza como una herramienta pedag√≥gica para introducir los conceptos de algoritmia sin necesidad de aprender un lenguaje espec√≠fico.</p>

  <p>Asimismo, fomenta la comprensi√≥n estructurada del flujo de informaci√≥n, lo que facilita la detecci√≥n de errores l√≥gicos, la optimizaci√≥n de procesos y la comunicaci√≥n entre miembros de un equipo de desarrollo. Gracias a su lenguaje neutro, el pseudoc√≥digo puede emplearse en diferentes contextos t√©cnicos y educativos, siendo un recurso ideal para documentar procedimientos o dise√±ar prototipos de programas.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer temperatura
   Si temperatura > 37 Entonces
        Mostrar "Tiene fiebre"
   Sino
        Mostrar "Temperatura normal"
Fin
  </pre>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">3. Reglas de escritura del pseudoc√≥digo</h3>
  <p>La correcta redacci√≥n del pseudoc√≥digo garantiza la claridad y la comprensi√≥n del algoritmo. Generalmente, todo pseudoc√≥digo inicia con la palabra ‚ÄúInicio‚Äù y finaliza con ‚ÄúFin‚Äù, lo que delimita el cuerpo del algoritmo. Cada instrucci√≥n debe escribirse en l√≠neas separadas y con una sangr√≠a o indentaci√≥n que refleje la jerarqu√≠a de las estructuras utilizadas.</p>

  <p>Es recomendable emplear verbos de acci√≥n como Leer, Escribir, Calcular o Mostrar, los cuales indican las operaciones que realiza el algoritmo. Los nombres de las variables deben ser claros y representativos del contenido que almacenan. Adem√°s, deben evitarse ambig√ºedades, repeticiones innecesarias y estructuras poco legibles.</p>

  <p><strong>Ejemplo correcto:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer nota
   Si nota >= 11 Entonces
        Mostrar "Aprobado"
   Sino
        Mostrar "Desaprobado"
Fin
  </pre>

  <p><strong>Ejemplo incorrecto:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ff8080; font-family: 'Courier New', monospace;">
Leer nota
Si nota>=11
Mostrar Aprobado
Sino
Mostrar Desaprobado
  </pre>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">4. Estructuras b√°sicas del pseudoc√≥digo</h3>
  <p>Los algoritmos representados mediante pseudoc√≥digo se organizan en tres estructuras fundamentales: secuencial, condicional y repetitiva.</p>

  <p><strong>Estructura secuencial:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer A, B
   C ‚Üê A + B
   Mostrar C
Fin
  </pre>

  <p><strong>Estructura condicional:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer edad
   Si edad >= 18 Entonces
        Mostrar "Mayor de edad"
   Sino
        Mostrar "Menor de edad"
Fin
  </pre>

  <p><strong>Estructura repetitiva:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Contador ‚Üê 1
   Mientras Contador <= 5 Hacer
         Mostrar Contador
         Contador ‚Üê Contador + 1
   FinMientras
Fin
  </pre>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">5. Ventajas del pseudoc√≥digo</h3>
  <p>El pseudoc√≥digo presenta m√∫ltiples ventajas en el proceso de dise√±o de algoritmos. En primer lugar, facilita la comprensi√≥n de los procedimientos l√≥gicos gracias a su lenguaje simple y estructurado. En segundo lugar, permite planificar y documentar soluciones antes de implementarlas, lo que disminuye la probabilidad de cometer errores durante la codificaci√≥n. Finalmente, favorece el aprendizaje de la programaci√≥n al centrarse en la l√≥gica m√°s que en la sintaxis.</p>

  <p>Estas caracter√≠sticas convierten al pseudoc√≥digo en una herramienta indispensable para quienes se inician en la programaci√≥n y para los equipos que buscan estandarizar la comunicaci√≥n t√©cnica entre analistas, dise√±adores y desarrolladores.</p>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">6. Ejemplos aplicados</h3>


  <p><strong>Ejemplo 1: Calcular el promedio de tres n√∫meros</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer n1, n2, n3
   promedio ‚Üê (n1 + n2 + n3) / 3
   Mostrar promedio
Fin
  </pre>

  <p><strong>Ejemplo 2: Determinar si una persona es mayor de edad</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer edad
   Si edad >= 18 Entonces
        Mostrar "Mayor de edad"
   Sino
        Mostrar "Menor de edad"
Fin
  </pre>

  <p><strong>Ejemplo 3: Clasificar una nota seg√∫n su valor num√©rico</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer nota
   Si nota >= 17 Entonces
        Mostrar "Excelente"
   Sino Si nota >= 14 Entonces
        Mostrar "Bueno"
   Sino Si nota >= 11 Entonces
        Mostrar "Regular"
   Sino
        Mostrar "Desaprobado"
Fin
  </pre>

</section>


    `,
    ejemplos: `<p><strong>Ejemplos:</strong>
    
  <section style="color: white; font-family: 'Poppins', sans-serif; line-height: 1.5; padding: 20px; text-align: left;">

  <p style="margin-bottom: 10px;">
    A continuaci√≥n se presentan ejercicios pr√°cticos para aplicar las estructuras fundamentales del pseudoc√≥digo:
    secuencial, condicional y repetitiva. Cada ejercicio incluye la descripci√≥n del problema, las entradas, los procesos y las salidas esperadas.
  </p>

  <!-- Ejercicio 1 -->
  <h3 style="color: #ffcc00; margin-top: 20px; font-size: 18px;"> Ejercicio 1: C√°lculo del promedio final de un estudiante</h3>
  <p><strong>Descripci√≥n:</strong> Desarrollar un algoritmo que calcule el promedio final de un estudiante a partir de tres notas. Si el promedio es mayor o igual a 11, se mostrar√° ‚ÄúAprobado‚Äù; de lo contrario, ‚ÄúDesaprobado‚Äù.</p>
  <p><strong>Entradas:</strong> n1, n2, n3 (notas del estudiante)</p>
  <p><strong>Proceso:</strong> Leer las tres notas. Calcular el promedio = (n1 + n2 + n3) / 3. Evaluar si el promedio ‚â• 11.</p>
  <p><strong>Salidas:</strong> Promedio del estudiante y mensaje correspondiente.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir n1, n2, n3, promedio Como Real
    Leer n1, n2, n3
    promedio ‚Üê (n1 + n2 + n3) / 3
    Si promedio >= 11 Entonces
        Mostrar "Aprobado con promedio de: ", promedio
    Sino
        Mostrar "Desaprobado con promedio de: ", promedio
    FinSi
Fin
  </pre>

  <!-- Ejercicio 2 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 2: Descuento seg√∫n monto de compra</h3>
  <p><strong>Descripci√≥n:</strong> Calcular el total a pagar considerando un descuento del 10% si el monto es mayor o igual a 500 soles.</p>
  <p><strong>Entradas:</strong> monto (importe total de la compra)</p>
  <p><strong>Proceso:</strong> Leer monto. Si monto ‚â• 500, aplicar descuento = monto * 0.10. Calcular total = monto - descuento.</p>
  <p><strong>Salidas:</strong> Descuento aplicado y total a pagar.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir monto, descuento, total Como Real
    Leer monto
    Si monto >= 500 Entonces
        descuento ‚Üê monto * 0.10
    Sino
        descuento ‚Üê 0
    FinSi
    total ‚Üê monto - descuento
    Mostrar "Descuento aplicado: ", descuento
    Mostrar "Total a pagar: ", total
Fin
  </pre>

  <!-- Ejercicio 3 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 3: Clasificaci√≥n de edades</h3>
  <p><strong>Descripci√≥n:</strong> Determinar la etapa de vida de una persona seg√∫n su edad.</p>
  <p><strong>Entradas:</strong> edad (a√±os)</p>
  <p><strong>Proceso:</strong> Leer edad y evaluar rangos: &lt;12 ‚ÄúNi√±o(a)‚Äù, 12‚Äì17 ‚ÄúAdolescente‚Äù, 18‚Äì59 ‚ÄúAdulto(a)‚Äù, ‚â•60 ‚ÄúAdulto mayor‚Äù.</p>
  <p><strong>Salidas:</strong> Mensaje con la etapa de vida.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir edad Como Entero
    Leer edad
    Si edad < 12 Entonces
        Mostrar "Ni√±o(a)"
    Sino
        Si edad < 18 Entonces
            Mostrar "Adolescente"
        Sino
            Si edad < 60 Entonces
                Mostrar "Adulto(a)"
            Sino
                Mostrar "Adulto mayor"
            FinSi
        FinSi
    FinSi
Fin
  </pre>

  <!-- Ejercicio 4 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 4: C√°lculo del salario semanal</h3>
  <p><strong>Descripci√≥n:</strong> Calcular el salario semanal de un trabajador. Si trabaja m√°s de 40 horas, las horas extra se pagan al 150% del valor normal.</p>
  <p><strong>Entradas:</strong> horas trabajadas, tarifa por hora.</p>
  <p><strong>Proceso:</strong> Leer horas y tarifa. Si horas ‚â§ 40, salario = horas * tarifa; si &gt;40, salario = (40 * tarifa) + ((horas - 40) * tarifa * 1.5).</p>
  <p><strong>Salidas:</strong> Salario semanal total.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir horas, tarifa, salario Como Real
    Leer horas, tarifa
    Si horas <= 40 Entonces
        salario ‚Üê horas * tarifa
    Sino
        salario ‚Üê (40 * tarifa) + ((horas - 40) * tarifa * 1.5)
    FinSi
    Mostrar "El salario semanal es: ", salario
Fin
  </pre>

  <!-- Ejercicio 5 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 5: Suma de n√∫meros positivos</h3>
  <p><strong>Descripci√≥n:</strong> Leer 10 n√∫meros e indicar la suma total solo de los valores positivos.</p>
  <p><strong>Entradas:</strong> 10 n√∫meros enteros (num).</p>
  <p><strong>Proceso:</strong> Inicializar suma ‚Üê 0. Repetir 10 veces: leer num. Si num > 0, sumar a suma.</p>
  <p><strong>Salidas:</strong> Suma total de los n√∫meros positivos.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir num, suma, contador Como Entero
    suma ‚Üê 0
    contador ‚Üê 1
    Mientras contador <= 10 Hacer
        Leer num
        Si num > 0 Entonces
            suma ‚Üê suma + num
        FinSi
        contador ‚Üê contador + 1
    FinMientras
    Mostrar "La suma de los n√∫meros positivos es: ", suma
Fin
  </pre>

  <!-- Ejercicio 6 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 6: Determinar el mayor de tres n√∫meros</h3>
  <p><strong>Descripci√≥n:</strong> Leer tres n√∫meros y determinar cu√°l es el mayor o si todos son iguales.</p>
  <p><strong>Entradas:</strong> a, b, c (n√∫meros reales).</p>
  <p><strong>Proceso:</strong> Leer los tres n√∫meros, compararlos y mostrar el mayor o mensaje de igualdad.</p>
  <p><strong>Salidas:</strong> El n√∫mero mayor o mensaje de igualdad.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir a, b, c Como Real
    Leer a, b, c
    Si a > b Y a > c Entonces
        Mostrar "El mayor es: ", a
    Sino
        Si b > c Entonces
            Mostrar "El mayor es: ", b
        Sino
            Si c > a Y c > b Entonces
                Mostrar "El mayor es: ", c
            Sino
                Mostrar "Todos los n√∫meros son iguales"
            FinSi
        FinSi
    FinSi
Fin
  </pre>

  <!-- Ejercicio 7 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 7: Validaci√≥n de fecha</h3>
  <p><strong>Descripci√≥n:</strong> Leer una fecha (d√≠a, mes, a√±o) y validar si es correcta (sin considerar a√±os bisiestos).</p>
  <p><strong>Entradas:</strong> d√≠a, mes, a√±o (valores enteros).</p>
  <p><strong>Proceso:</strong> Verificar rangos de mes y d√≠a seg√∫n el mes correspondiente.</p>
  <p><strong>Salidas:</strong> Mensaje indicando si la fecha es v√°lida o no.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir dia, mes, a√±o Como Entero
    Leer dia, mes, a√±o
    Si mes < 1 O mes > 12 Entonces
        Mostrar "Mes inv√°lido"
    Sino
        Si dia < 1 O dia > 31 Entonces
            Mostrar "D√≠a inv√°lido"
        Sino
            Si (mes = 4 O mes = 6 O mes = 9 O mes = 11) Y dia > 30 Entonces
                Mostrar "D√≠a inv√°lido para este mes"
            Sino
                Si mes = 2 Y dia > 28 Entonces
                    Mostrar "D√≠a inv√°lido para febrero"
                Sino
                    Mostrar "Fecha v√°lida"
                FinSi
            FinSi
        FinSi
    FinSi
Fin
  </pre>

  <!-- Ejercicio 8 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 8: Clasificaci√≥n de notas con promedio general</h3>
  <p><strong>Descripci√≥n:</strong> Leer las notas de cinco estudiantes, calcular el promedio general del grupo y mostrar cu√°ntos aprobaron y desaprobaron.</p>
  <p><strong>Entradas:</strong> nota (5 valores reales).</p>
  <p><strong>Proceso:</strong> Acumular notas, contar aprobados y desaprobados, calcular promedio.</p>
  <p><strong>Salidas:</strong> Promedio general, cantidad de aprobados y desaprobados.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir nota, suma, promedio Como Real
    Definir contador, aprobados, desaprobados Como Entero
    suma ‚Üê 0
    aprobados ‚Üê 0
    desaprobados ‚Üê 0
    Para contador ‚Üê 1 Hasta 5 Con Paso 1 Hacer
        Leer nota
        suma ‚Üê suma + nota
        Si nota >= 11 Entonces
            aprobados ‚Üê aprobados + 1
        Sino
            desaprobados ‚Üê desaprobados + 1
        FinSi
    FinPara
    promedio ‚Üê suma / 5
    Mostrar "Promedio general: ", promedio
    Mostrar "Aprobados: ", aprobados
    Mostrar "Desaprobados: ", desaprobados
Fin
  </pre>

  <p style="margin-top: 20px;">
    Estos ejercicios te permitir√°n aplicar de forma pr√°ctica las estructuras b√°sicas del pseudoc√≥digo, desarrollando el pensamiento l√≥gico, la secuencia de pasos y la capacidad de traducir problemas reales a soluciones algor√≠tmicas.
  </p>

</section>

    
    `,
    quiz_final: `
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 17px; line-height: 1.6;">

  <p><strong>üìö Indicaciones generales:</strong><br>
  Esta evaluaci√≥n corresponde al cierre del m√≥dulo y representa el <strong>50% de la nota total.</strong><br>
  <strong>Duraci√≥n:</strong> 1 hora y 30 minutos ‚è±Ô∏è<br>
  <strong>Preguntas:</strong> 30 en total (parte te√≥rica + caso pr√°ctico)<br>
  <strong>Nota m√°xima:</strong> 11 puntos<br>
  Solo se permite <strong>un env√≠o por estudiante.</strong></p>

  <p><strong>Instrucciones del caso pr√°ctico:</strong><br>
  Lee la situaci√≥n del problema y redacta el pseudoc√≥digo completo con entradas, procesos y salidas.<br>
  Considera condiciones de nota, asistencia y bonificaci√≥n.<br>
  Sube tu archivo en formato <strong>PDF o Word (.docx)</strong> con tu nombre y secci√≥n.<br>
  Se evaluar√° la claridad, estructura y l√≥gica del pseudoc√≥digo.</p>

  <p><strong>Formato de archivo:</strong><br>
  <code style="background-color: #222; padding: 5px 8px; border-radius: 5px; color: #aef;">Apellido_Nombre_CasosFinales</code><br>
  Ejemplo: <code style="background-color: #222; padding: 5px 8px; border-radius: 5px; color: #aef;">P√©rez_Luisa_CasosFinales.pdf</code></p>

  <p><strong>‚ö†Ô∏è Reglas:</strong><br>
  Cron√≥metro activo (1h 30min).<br>
  Solo se aceptar√° un intento.<br>
  Revisa antes de enviar; los duplicados ser√°n anulados.</p>

  <div style="margin-top: 25px;">
    <a href="https://docs.google.com/forms/d/e/1FAIpQLScZ2RE99mQocj0h4IOZMZiL5bc26YZyqGJdbj68P9PRUREG9w/viewform?usp=dialog" 
       target="_blank" 
       style="display: inline-block; background-color: #0078ff; color: white; text-decoration: none; font-weight: bold; padding: 10px 25px; border-radius: 10px; transition: 0.3s;">
       üßæ Ir al formulario
    </a>
  </div>
</section>

  
    
    `
  },

  
  // Curso 2 ‚Äì PSeInt
    pseint1: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
    <p>

    ‚úîÔ∏è Comprender qu√© es la programaci√≥n y su papel en la resoluci√≥n de problemas. <br>
    ‚úîÔ∏è Dise√±ar algoritmos b√°sicos usando pseudoc√≥digo en PSeInt.<br>
    ‚úîÔ∏è Ejecutar y depurar programas en PSeInt para analizar su funcionamiento.<br>
     </p>
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong>  </p>
    
    
 <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 17px; line-height: 1.6;">

  <style>
    strong {
      color: #00e6ff; /* üíé Celeste m√°s suave */
      text-shadow: 0 0 2px #00e6ff, 0 0 4px #00e6ff; /* Brillo bajo */
    }
  </style>

  </style>
  </style>
  <p><strong>1. Concepto de programaci√≥n y su importancia en la resoluci√≥n de problemas</strong></p>
  <p>
    La programaci√≥n, en su sentido m√°s amplio, implica el dise√±o y la ejecuci√≥n de una serie de instrucciones que una m√°quina o un sistema inform√°tico puede llevar a cabo para transformar informaci√≥n, producir resultados o automatizar procesos. En este sentido, la programaci√≥n se presenta como una herramienta fundamental para la resoluci√≥n de problemas, ya que permite modelar situaciones, descomponerlas en pasos l√≥gicos y generar soluciones sistem√°ticas. Por ejemplo, a trav√©s de algoritmos programados se puede optimizar la gesti√≥n de inventarios, automatizar c√°lculos o construir interfaces que interact√∫an con usuarios.
  </p>
  <p>
    La importancia de la programaci√≥n como habilidad cognitiva se ha incrementado en los √∫ltimos a√±os: seg√∫n Saa-Saltos (2024), la ense√±anza de fundamentos de programaci√≥n mostr√≥ una correlaci√≥n positiva con la mejora del pensamiento abstracto, la creatividad y la resoluci√≥n de problemas en estudiantes universitarios. 
  </p>
  <p>
    Esto evidencia que m√°s all√° de la mera escritura de c√≥digo, la programaci√≥n favorece competencias de orden superior. Adem√°s, Almaguer (2023) evidenci√≥ que muchas personas encuentran compleja la adquisici√≥n de conceptos b√°sicos de programaci√≥n, lo que resalta la necesidad de un enfoque pedag√≥gico adecuado que vincule la programaci√≥n con la resoluci√≥n de problemas reales y concretos. 
  </p>
  <p>
    En el contexto de PSeInt (y del curso de introducci√≥n al pseudoc√≥digo), este sub-tema invita al estudiante a reconocer la programaci√≥n como un mecanismo de transformaci√≥n de la l√≥gica humana en procesos autom√°ticos: se aprende a plantear preguntas, analizar datos de entrada, definir salidas esperadas y construir pasos intermedios. As√≠, la programaci√≥n se convierte en un puente entre la l√≥gica del problema y la ejecuci√≥n computacional. Por ejemplo, si se plantea el problema ‚Äú¬øc√≥mo calcular el promedio de calificaciones?‚Äù, se deber√° identificar datos (las calificaciones), pasos (sumar, dividir por cantidad) y resultado (promedio). La programaci√≥n formaliza ese flujo.
  </p>

  <p><strong>2. Algoritmos: definici√≥n, caracter√≠sticas y representaci√≥n</strong></p>
  <p>
    Un algoritmo puede definirse como un conjunto de instrucciones finitas, bien definidas, ordenadas y acotadas, cuyo prop√≥sito es resolver un problema o realizar una tarea espec√≠fica. En palabras de un recurso especializado: ¬´un algoritmo inform√°tico es un conjunto de instrucciones definidas, ordenadas y acotadas para resolver un problema, realizar un c√°lculo o desarrollar una tarea¬ª. 
  </p>
  <p>
    Las caracter√≠sticas esenciales de un algoritmo incluyen: inicio expl√≠cito, fin expl√≠cito, pasos claros y no ambiguos, finitud y correcci√≥n (es decir, que al final produzca el resultado esperado). Por ejemplo, Newman (2022) describe que el algoritmo debe contar con entrada, proceso y salida (input ‚Äì process ‚Äì output). 
  </p>
  <p>
    En cuanto a la representaci√≥n, los algoritmos pueden mostrarse mediante diagramas de flujo, pseudoc√≥digo o estructuraci√≥n textual; estos medios facilitan la comprensi√≥n de la l√≥gica antes de implementarla en un lenguaje de programaci√≥n. 
  </p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
INICIO  
  LEER n√∫mero1  
  LEER n√∫mero2  
  SI n√∫mero1 > n√∫mero2 ENTONCES  
     IMPRIMIR "El mayor es n√∫mero1"  
  SINO  
     IMPRIMIR "El mayor es n√∫mero2"  
  FIN_SI  
FIN
  </pre>
  <p>
    Este ejemplo muestra un algoritmo simple que define datos de entrada, una decisi√≥n y una salida. La correcta comprensi√≥n y dise√±o de algoritmos es clave para que la programaci√≥n no sea un ejercicio mec√°nico de codificaci√≥n, sino una actividad estructurada de resoluci√≥n de problemas, c√≥moda de trasponer al entorno del pseudoc√≥digo (como el de PSeInt) y al posterior desarrollo en lenguajes de programaci√≥n.
  </p>

  <p><strong>3. L√≥gica computacional y pensamiento algor√≠tmico</strong></p>
  <p>
    La l√≥gica computacional se refiere al conjunto de principios de razonamiento l√≥gico que permiten a una persona formular operaciones, decisiones y procedimientos de modo estructurado, para luego codificarlos o automatizarlos en un sistema inform√°tico. Aunque el t√©rmino ‚Äúl√≥gica computacional‚Äù tiene usos t√©cnicos en ciencias de la computaci√≥n (v√©ase la l√≥gica booleana y formal), en el contexto educativo de programaci√≥n se relaciona estrechamente con el desarrollo del pensamiento algor√≠tmico. 
  </p>
  <p>
    El pensamiento algor√≠tmico consiste, en palabras de Osorio (2023), en la capacidad de construir modelos mentales de resoluci√≥n de problemas mediante estructuras algor√≠tmicas: ¬´El presente art√≠culo analiza la asociaci√≥n entre la tipolog√≠a de estructuras algor√≠tmicas de programaci√≥n y los modelos mentales construidos para su resoluci√≥n¬ª. 
  </p>
  <p>
    Asimismo, el desarrollo del pensamiento computacional al que el pensamiento algor√≠tmico contribuye significativamente es indispensable en la ense√±anza de programaci√≥n. Cervera-Manjarrez (2023) se√±ala que mediante estrategias de pensamiento computacional las personas adquieren habilidades como la abstracci√≥n, la automatizaci√≥n y la identificaci√≥n de patrones para resolver problemas complejos. 
  </p>
  <p>
    Por ejemplo, al plantear un problema como ‚Äúdeterminar cu√°ntos n√∫meros pares hay en una lista de diez‚Äù, el estudiante debe abstraer el conjunto de datos (lista), reconocer el patr√≥n (paridad), dise√±ar un algoritmo (recorrer lista, contar pares) y aplicarlo. Esa secuencia de pensamiento algor√≠tmico es lo que subyace a la programaci√≥n. De este modo, en el uso de PSeInt, la l√≥gica computacional se traduce en operaciones de flujo: lectura, decisi√≥n, repetici√≥n, acumulador, etc.
  </p>

  <p><strong>4. Introducci√≥n al pseudoc√≥digo y su utilidad</strong></p>
  <p>
    El pseudoc√≥digo es una herramienta de representaci√≥n de algoritmos escrita en un lenguaje cercano al humano, que imita la l√≥gica de programaci√≥n pero sin adoptar la sintaxis estricta de un lenguaje de c√≥digo. Su funci√≥n primordial es servir como puente entre la idea algor√≠tmica y el desarrollo en un lenguaje real. Por ejemplo, un recurso en espa√±ol define: ‚Äúun pseudoc√≥digo es una forma de representar la soluci√≥n a un algoritmo de la forma m√°s detallada posible, y a su vez lo m√°s parecida posible al lenguaje que posteriormente se utilizar√° para la codificaci√≥n del mismo‚Äù. 
  </p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo CalcularPromedio  
   LEER valor1, valor2, valor3  
   suma ‚Üê valor1 + valor2 + valor3  
   promedio ‚Üê suma / 3  
   IMPRIMIR "El promedio es:", promedio  
FinAlgoritmo
  </pre>
  <p>
    Este pseudoc√≥digo refleja las instrucciones esenciales. Por tal motivo, para los estudiantes que se introducen en programaci√≥n con PSeInt, el pseudoc√≥digo ser√° un aliado que mejora la comprensi√≥n, agiliza el aprendizaje y reduce la barrera que representa conocer la sintaxis de un lenguaje formal y finalmente la traducen al entorno de programaci√≥n.
  </p>

</section>

  <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h4 style="color: #00ffff; font-size: 18px;">5. ¬øQu√© es PSeInt y para qu√© se utiliza?</h4>
  <p>
    El programa <strong>PSeInt</strong> (acr√≥nimo de <i>Pseudocode Interpreter</i>) es un entorno educativo dise√±ado para ense√±ar los fundamentos de la programaci√≥n mediante el uso de pseudoc√≥digo estructurado en idioma espa√±ol. Su prop√≥sito principal es que los estudiantes desarrollen el pensamiento algor√≠tmico sin enfrentarse todav√≠a a la complejidad sint√°ctica de los lenguajes de programaci√≥n formales.
  </p>
  <p>
    En palabras de Mor√°n (2023), PSeInt constituye una herramienta id√≥nea para los cursos de introducci√≥n a la programaci√≥n, ya que ‚Äúpermite centrarse en la l√≥gica algor√≠tmica antes que en los aspectos t√©cnicos del lenguaje‚Äù.
  </p>
  <p>
    Desde un punto de vista pedag√≥gico, el uso de PSeInt se fundamenta en tres principios esenciales:
  </p>
  <ul>
    <li><strong>Aprendizaje progresivo:</strong> los estudiantes comienzan creando algoritmos simples y comprenden el flujo l√≥gico antes de enfrentarse a un compilador real.</li>
    <li><strong>Ambiente accesible:</strong> la interfaz en espa√±ol reduce la carga cognitiva y permite enfocarse en comprender estructuras de control y manejo de variables.</li>
    <li><strong>Retroalimentaci√≥n inmediata:</strong> el entorno ofrece ejecuci√≥n paso a paso, ayudando a identificar errores y analizar el comportamiento del algoritmo.</li>
  </ul>
  <p>Por ejemplo, un estudiante puede escribir el siguiente pseudoc√≥digo:</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo Saludo
    Escribir "Hola, mundo!"
FinAlgoritmo
  </pre>

  <p>
    Al ejecutarlo, el programa imprimir√° el mensaje <i>Hola, mundo!</i>, ejemplificando la relaci√≥n entre las instrucciones escritas y la salida del sistema. De este modo, el aprendizaje de la programaci√≥n se vuelve tangible desde el primer contacto con la herramienta.
  </p>

  <h4 style="color: #00ffff; font-size: 18px;">6. Instalaci√≥n y configuraci√≥n del entorno</h4>
  <p>
    La instalaci√≥n de PSeInt es un proceso sencillo que busca familiarizar al estudiante con su entorno de trabajo. De acuerdo con el Manual de PSeInt (s. f.), los pasos principales son los siguientes:
  </p>
  <ul>
    <li>Descargar el instalador correspondiente al sistema operativo desde el sitio oficial del proyecto.</li>
    <li>Ejecutar el asistente de instalaci√≥n y aceptar las opciones predeterminadas.</li>
    <li>Configurar el idioma, el tema visual y el directorio de trabajo.</li>
    <li>Verificar la correcta instalaci√≥n mediante la ejecuci√≥n de un algoritmo de prueba.</li>
  </ul>
  <p>Por ejemplo, se puede probar el siguiente c√≥digo:</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo HolaMundo
    Escribir "¬°Bienvenido a PSeInt!"
FinAlgoritmo
  </pre>

  <p>
    Si el mensaje se muestra correctamente en pantalla, el entorno est√° listo para ser utilizado.
  </p>
  <p>
    Asimismo, se proporciona un manual en formato PDF con las instrucciones detalladas de instalaci√≥n paso a paso que incluye capturas de pantalla y recomendaciones de configuraci√≥n inicial, adem√°s del siguiente recurso audiovisual de apoyo:
  </p>
  <p>
    <i>Instalaci√≥n y uso de PSeInt ‚Äì gu√≠a paso a paso.</i> (2025, octubre). [Video]. YouTube. 
    <a href="https://www.youtube.com/watch?v=GqkTm0_K6Kc" target="_blank" style="color: #00ffff;">https://www.youtube.com/watch?v=GqkTm0_K6Kc</a>
  </p>
  <p>
    Este video complementa el aprendizaje visual de los estudiantes y facilita la verificaci√≥n pr√°ctica del proceso.
  </p>

  <div style="margin-top: 15px;">
    <a href="https://docs.google.com/document/d/1z3NcIsgtF0tZzhx-0xDjMqVzjkMSXux902INN05Sx54/export?format=pdf"
       download="Manual_de_Instalacion_PSeInt.pdf"
       style="display: inline-block; background-color: #007bff; color: white; text-decoration: none; 
              font-weight: bold; padding: 10px 25px; border-radius: 8px; transition: 0.3s;">
       üì• Descargar Manual PDF
    </a>
  </div>

  <h4 style="color: #00ffff; font-size: 18px;">7. Interfaz de usuario y componentes principales</h4>
  <p>
    La interfaz de PSeInt est√° dise√±ada para ser intuitiva, clara y funcional, con el objetivo de que los principiantes comprendan f√°cilmente cada uno de sus componentes. Entre los elementos m√°s importantes destacan:
  </p>
  <ul>
    <li><strong>Barra de men√∫s y herramientas:</strong> contiene funciones como Archivo, Editar, Ejecutar, Diagrama y Ayuda, desde donde se crean y gestionan los algoritmos.</li>
    <li><strong>√Årea de edici√≥n:</strong> es el espacio donde el usuario escribe las instrucciones en pseudoc√≥digo. Incluye resaltado de sintaxis y sangr√≠as autom√°ticas.</li>
    <li><strong>Consola de salida:</strong> muestra los resultados de la ejecuci√≥n del algoritmo y posibles mensajes de error.</li>
    <li><strong>Panel de variables:</strong> permite observar los valores almacenados en cada variable durante la ejecuci√≥n, ayudando al estudiante a comprender el flujo de datos.</li>
    <li><strong>Generador de diagramas de flujo:</strong> traduce autom√°ticamente el pseudoc√≥digo a un diagrama visual, reforzando el aprendizaje de las estructuras l√≥gicas.</li>
  </ul>

  <p>Por ejemplo:</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo ErrorEjemplo
    Escribir x
FinAlgoritmo
  </pre>

  <p>
    El programa devolver√° un error indicando que la variable <i>x</i> no est√° definida, evidenciando c√≥mo PSeInt ayuda a identificar y corregir errores de manera inmediata.
    Como indica Mench√≥n et al. (2025), el uso de entornos visuales y de retroalimentaci√≥n directa como PSeInt incrementa la comprensi√≥n de la relaci√≥n entre la estructura del algoritmo y su comportamiento l√≥gico durante la ejecuci√≥n.
  </p>

  <h4 style="color: #00ffff; font-size: 18px;">8. Ejecuci√≥n, depuraci√≥n y an√°lisis de errores</h4>
  <p>
    El dominio de la ejecuci√≥n y depuraci√≥n de programas en PSeInt constituye una competencia esencial en el aprendizaje de la programaci√≥n. Seg√∫n Marcelo (2023), la depuraci√≥n paso a paso fomenta la reflexi√≥n metacognitiva, pues el estudiante analiza la secuencia de operaciones y anticipa resultados l√≥gicos.
  </p>
  <p>
    En PSeInt, la ejecuci√≥n directa (tecla F9) interpreta el algoritmo y muestra los resultados en consola. Por ejemplo:
  </p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo SumaDosNumeros
    Leer a
    Leer b
    suma ‚Üê a + b
    Escribir "La suma es: ", suma
FinAlgoritmo
  </pre>

  <p>
    Si el usuario ingresa <strong>a = 3</strong> y <strong>b = 5</strong>, el programa imprimir√° <i>La suma es: 8</i>.
    La depuraci√≥n paso a paso (tecla F8) permite seguir la ejecuci√≥n l√≠nea por l√≠nea, observando c√≥mo cambian los valores de las variables.
  </p>
  <p>
    Los errores m√°s comunes se clasifican en tres tipos:
  </p>
  <ul>
    <li><strong>Errores de sintaxis:</strong> por ejemplo, omitir la palabra <i>FinAlgoritmo</i>.</li>
    <li><strong>Errores de l√≥gica:</strong> como calcular incorrectamente un promedio.</li>
    <li><strong>Errores de ejecuci√≥n:</strong> dividir entre cero o usar variables sin inicializar.</li>
  </ul>
  <p>
    El proceso de correcci√≥n es fundamental para consolidar el aprendizaje. De acuerdo con Tinedo-Rodr√≠guez (2023), el uso de PSeInt fomenta la autorregulaci√≥n y el aprendizaje aut√≥nomo, al permitir que los estudiantes localicen y reparen sus propios errores mediante retroalimentaci√≥n inmediata.
  </p>

</section>





    
    `,
    ejemplos: `
    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h2 style="color: #00ffff; font-size: 22px;">üíª Ejemplos pr√°cticos</h2>

  <p>El aprendizaje de la programaci√≥n requiere no solo comprender la teor√≠a de las estructuras y comandos, sino tambi√©n practicar la ejecuci√≥n, depuraci√≥n y an√°lisis de errores en situaciones reales. A trav√©s de ejemplos sencillos, el estudiante puede observar c√≥mo se comportan los algoritmos, identificar los tipos de errores m√°s comunes (de sintaxis, l√≥gica o ejecuci√≥n) y aplicar estrategias para resolverlos.</p>

  <p>A continuaci√≥n, se presentan cinco ejemplos pr√°cticos que integran el planteamiento del problema, el pseudoc√≥digo correspondiente y la identificaci√≥n de posibles errores con sus soluciones, utilizando el entorno educativo <strong>PSeInt</strong>.</p>

  <h3 style="color: #00ffff;">Ejemplo 1: Suma de dos n√∫meros</h3>
  <p><strong>Objetivo:</strong> practicar lectura de datos y operaciones b√°sicas.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 12px; border-radius: 10px; font-family: monospace;">
Algoritmo SumaDosNumeros
    Definir a, b, suma Como Entero
    Escribir "Ingrese el primer n√∫mero:"
    Leer a
    Escribir "Ingrese el segundo n√∫mero:"
    Leer b
    suma ‚Üê a + b
    Escribir "La suma es: ", suma
FinAlgoritmo
  </pre>

  <p><strong>Error com√∫n:</strong> olvidar declarar las variables o escribir <code>=</code> en lugar de <code>‚Üê</code>.</p>

  <h3 style="color: #00ffff;">Ejemplo 2: C√°lculo de promedio</h3>
  <p><strong>Objetivo:</strong> practicar el uso de variables y operaciones aritm√©ticas.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 12px; border-radius: 10px; font-family: monospace;">
Algoritmo CalcularPromedio
    Definir n1, n2, n3, promedio Como Real
    Escribir "Ingrese tres notas:"
    Leer n1, n2, n3
    promedio ‚Üê (n1 + n2 + n3) / 3
    Escribir "El promedio es: ", promedio
FinAlgoritmo
  </pre>

  <p><strong>Error com√∫n:</strong> dividir entre un n√∫mero incorrecto o no usar par√©ntesis al calcular el promedio.</p>

  <h3 style="color: #00ffff;">Ejemplo 3: Determinar si un n√∫mero es par o impar</h3>
  <p><strong>Objetivo:</strong> practicar condicionales.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 12px; border-radius: 10px; font-family: monospace;">
Algoritmo ParOImpar
    Definir numero Como Entero
    Escribir "Ingrese un n√∫mero:"
    Leer numero
    Si numero MOD 2 = 0 Entonces
        Escribir "El n√∫mero es par"
    Sino
        Escribir "El n√∫mero es impar"
    FinSi
FinAlgoritmo
  </pre>

  <p><strong>Error com√∫n:</strong> usar <code>=</code> en lugar de <code>MOD</code> o confundir operadores l√≥gicos.</p>

  <h3 style="color: #00ffff;">Ejemplo 4: Contador con bucle Mientras</h3>
  <p><strong>Objetivo:</strong> aplicar estructuras repetitivas.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 12px; border-radius: 10px; font-family: monospace;">
Algoritmo ContadorHastaCinco
    Definir i Como Entero
    i ‚Üê 1
    Mientras i <= 5 Hacer
        Escribir "Contador: ", i
        i ‚Üê i + 1
    FinMientras
FinAlgoritmo
  </pre>

  <p><strong>Error com√∫n:</strong> olvidar incrementar <code>i</code>, lo que produce un bucle infinito.</p>

  <h3 style="color: #00ffff;">Ejemplo 5: Validar divisi√≥n entre cero</h3>
  <p><strong>Objetivo:</strong> prevenir errores de ejecuci√≥n.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 12px; border-radius: 10px; font-family: monospace;">
Algoritmo DivisionSegura
    Definir a, b, resultado Como Real
    Escribir "Ingrese el dividendo:"
    Leer a
    Escribir "Ingrese el divisor:"
    Leer b
    Si b <> 0 Entonces
        resultado ‚Üê a / b
        Escribir "El resultado es: ", resultado
    Sino
        Escribir "Error: no se puede dividir entre cero."
    FinSi
FinAlgoritmo
  </pre>

  <p><strong>Error com√∫n:</strong> no comprobar el divisor antes de realizar la operaci√≥n.</p>

</section>

    
    
    
    
    
    `,
    quiz: `<p><strong>Quiz:</strong></p>
    
    
    
    
    
    
    
    
    
    `
  },
  pseint2: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
     <p>

    ‚úîÔ∏è Identificar las variables y tipos de datos utilizados en PSeInt. <br>
    ‚úîÔ∏è Aplicar operadores aritm√©ticos, relacionales y l√≥gicos en algoritmos. <br>
    ‚úîÔ∏è Utilizar instrucciones de entrada y salida para interactuar con el usuario. <br>
     </p>
    
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>
    
    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h4 style="color: #00ffff; font-size: 18px;">1. Variables: definici√≥n, declaraci√≥n y √°mbito en PSeInt</h4>
  <p>
    En programaci√≥n, las variables son espacios de memoria donde se almacenan datos que pueden cambiar durante la ejecuci√≥n de un programa. Seg√∫n P√©rez y Cede√±o (2022), una variable ‚Äúact√∫a como un contenedor identificado por un nombre, en el que se guarda un valor o referencia que puede modificarse en tiempo de ejecuci√≥n‚Äù.
  </p>
  <p>
    En PSeInt, la declaraci√≥n de una variable consiste en indicar su nombre y tipo de dato. Esto se hace generalmente al inicio del algoritmo, antes de ejecutar cualquier instrucci√≥n. Por ejemplo:
  </p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo EjemploVariables
    Definir edad, a√±o_actual Como Entero
    Definir nombre Como Cadena

    Escribir "Ingrese su nombre:"
    Leer nombre
    Escribir "Ingrese su edad:"
    Leer edad

    a√±o_actual <- 2025
    Escribir nombre, " tiene ", edad, " a√±os en el a√±o ", a√±o_actual
FinAlgoritmo
  </pre>

  <p>
    En este ejemplo, las variables <i>edad</i>, <i>a√±o_actual</i> y <i>nombre</i> se declaran al inicio y se utilizan dentro del cuerpo del algoritmo.
  </p>
  <p>
    El √°mbito de una variable define el conjunto de instrucciones donde esta puede ser utilizada. En PSeInt, las variables declaradas dentro de un algoritmo solo existen mientras se ejecuta dicho algoritmo, y no pueden ser usadas fuera de √©l. Como indican Ram√≠rez y Ortega (2023), la correcta gesti√≥n del √°mbito es fundamental para evitar errores de sobreescritura o uso indebido de datos.
  </p>
  <p>Un ejemplo de error com√∫n por mal uso del √°mbito ser√≠a:</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo ErrorAmbito
    Definir a Como Entero
    Si Verdadero Entonces
        Definir b Como Entero
        b <- 10
    FinSi
    Escribir b  // Error: b no existe fuera del bloque Si
FinAlgoritmo
  </pre>

  <p>
    PSeInt mostrar√° un mensaje de error, indicando que la variable <i>b</i> no est√° definida en ese contexto. Esto permite reforzar el aprendizaje sobre visibilidad y duraci√≥n de las variables.
  </p>

  <h4 style="color: #00ffff; font-size: 18px;">2. Tipos de datos en PSeInt</h4>
  <p>
    Los tipos de datos definen la naturaleza de la informaci√≥n que una variable puede almacenar. En PSeInt, los tipos m√°s comunes son: <strong>Entero</strong>, <strong>Real</strong>, <strong>Cadena</strong>, <strong>L√≥gico</strong> y <strong>Car√°cter</strong>.
  </p>
  <p>
    De acuerdo con G√≥mez y Herrera (2021), comprender los tipos de datos es esencial para evitar errores de tipo, optimizar la memoria y garantizar la coherencia l√≥gica del programa.
  </p>
  <p>A continuaci√≥n, se muestra un ejemplo de uso de distintos tipos de datos:</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo TiposDeDatos
    Definir nombre Como Cadena
    Definir edad Como Entero
    Definir altura Como Real
    Definir estudiante Como Logico
    Definir inicial Como Caracter

    nombre <- "Laura"
    edad <- 20
    altura <- 1.65
    estudiante <- Verdadero
    inicial <- 'L'

    Escribir "Nombre: ", nombre
    Escribir "Edad: ", edad
    Escribir "Altura: ", altura
    Escribir "¬øEs estudiante?: ", estudiante
    Escribir "Inicial del nombre: ", inicial
FinAlgoritmo
  </pre>

  <p>
    Al ejecutar el c√≥digo, se observar√° c√≥mo cada variable almacena un tipo diferente de informaci√≥n.
  </p>
  <p>
    <strong>Nota:</strong> PSeInt convierte autom√°ticamente los datos introducidos por el usuario seg√∫n el tipo de variable declarado. Sin embargo, si se ingresa un valor incompatible (por ejemplo, texto en una variable entera), el sistema mostrar√° un error.
  </p>
  <p>
    Un ejemplo de error ser√≠a intentar asignar "Hola" a una variable Entera, lo cual produce un mensaje de incompatibilidad de tipo.
  </p>

  <h4 style="color: #00ffff; font-size: 18px;">3. Operadores aritm√©ticos, relacionales y l√≥gicos</h4>
  <p>
    Los operadores son s√≠mbolos que permiten realizar operaciones matem√°ticas, comparaciones o evaluaciones l√≥gicas. En PSeInt se agrupan en tres categor√≠as:
  </p>

  <p><strong>a) Operadores aritm√©ticos</strong></p>
  <p>Sirven para realizar c√°lculos num√©ricos: suma (+), resta (-), multiplicaci√≥n (*), divisi√≥n (/) y m√≥dulo (%).</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo OperadoresAritmeticos
    Definir a, b, suma, resto Como Entero
    a <- 15
    b <- 4
    suma <- a + b
    resto <- a % b
    Escribir "La suma es: ", suma
    Escribir "El resto de la divisi√≥n es: ", resto
FinAlgoritmo
  </pre>

  <p><strong>b) Operadores relacionales</strong></p>
  <p>Comparan valores y devuelven un resultado l√≥gico (<i>Verdadero</i> o <i>Falso</i>): igual (=), distinto (<>), mayor (>), menor (<), mayor o igual (>=), menor o igual (<=).</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo OperadoresRelacionales
    Definir x, y Como Entero
    x <- 10
    y <- 20
    Escribir "¬øx es menor que y?: ", x < y
    Escribir "¬øx es igual que y?: ", x = y
FinAlgoritmo
  </pre>

  <p><strong>c) Operadores l√≥gicos</strong></p>
  <p>Permiten combinar expresiones relacionales mediante los operadores <strong>Y</strong>, <strong>O</strong> y <strong>NO</strong>.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo OperadoresLogicos
    Definir edad Como Entero
    Leer edad
    Si edad >= 18 Y edad <= 65 Entonces
        Escribir "Edad v√°lida para trabajar"
    SiNo
        Escribir "Edad fuera del rango laboral"
    FinSi
FinAlgoritmo
  </pre>

  <p>
    Seg√∫n Villanueva y Contreras (2024), el uso correcto de operadores l√≥gicos en ejercicios de decisi√≥n incrementa la capacidad del estudiante para modelar situaciones reales mediante condiciones computacionales.
  </p>

  <h4 style="color: #00ffff; font-size: 18px;">4. Entrada y salida de datos</h4>
  <p>
    La entrada de datos permite recibir informaci√≥n del usuario, mientras que la salida muestra resultados en pantalla. En PSeInt, se emplean las instrucciones <strong>Leer</strong> y <strong>Escribir</strong> para estos fines.
  </p>
  <p>
    Castro (2022) explica que la interacci√≥n con el usuario mediante estas operaciones es fundamental, ya que consolida el ciclo cl√°sico de programaci√≥n: entrada ‚Äì proceso ‚Äì salida (<i>input ‚Äì process ‚Äì output</i>).
  </p>

  <p>Ejemplo simple:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo EntradaSalida
    Definir nombre Como Cadena
    Definir edad Como Entero

    Escribir "Ingrese su nombre:"
    Leer nombre
    Escribir "Ingrese su edad:"
    Leer edad

    Escribir "Hola ", nombre, ", tienes ", edad, " a√±os."
FinAlgoritmo
  </pre>

  <p>Ejemplo con procesamiento intermedio:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo CalculoSalario
    Definir horas, pagoHora, total Como Real
    Escribir "Ingrese horas trabajadas:"
    Leer horas
    Escribir "Ingrese pago por hora:"
    Leer pagoHora
    total <- horas * pagoHora
    Escribir "El salario total es: ", total
FinAlgoritmo
  </pre>

  <p>Tambi√©n pueden usarse lecturas m√∫ltiples para capturar varios datos en una sola l√≠nea:</p>
  <pre style="background-color: #1a1a1a; padding: 10px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">Leer nombre, edad, ciudad</pre>

  <p>
    En cuanto a la salida de datos, PSeInt permite concatenar texto y variables en una misma l√≠nea, lo que facilita la presentaci√≥n de resultados claros y personalizados.
  </p>
  <pre style="background-color: #1a1a1a; padding: 10px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">Escribir "El resultado final es: ", resultado, " unidades."</pre>

  <p>
    Como afirman Hern√°ndez y Paredes (2023), la correcta estructuraci√≥n de la entrada y salida ‚Äúfortalece la comprensi√≥n del flujo de datos y mejora la interpretaci√≥n del comportamiento l√≥gico del algoritmo‚Äù.
  </p>

</section>

    
    
    
    `,
    ejemplos: `
  <section style="background-color:#0a0a0a; color:#e6e6e6; font-family: Arial, sans-serif; line-height:1.7; padding:25px; border-radius:12px; text-align:left;">

  <h2 style="color:#00bfff; font-size:26px; margin-bottom:25px;">üí° Ejemplos pr√°cticos en Python (niveles progresivos)</h2>

  <!-- Ejemplo 1 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 1</h3>
  <p><strong>Enunciado:</strong> Pedir al usuario su nombre y saludarlo.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
nombre = input("Ingrese su nombre: ")
print("Hola,", nombre, "- bienvenido al curso de Python.")
  </div>
  <p><em>Nota:</em> Uso de variable tipo cadena, funci√≥n <code>input()</code> y <code>print()</code>. No incluye condicionales ni bucles. Ideal para principiantes.</p>

  <!-- Ejemplo 2 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 2</h3>
  <p><strong>Enunciado:</strong> Leer un n√∫mero entero y determinar si es mayor, igual o menor que 10.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
n = int(input("Ingrese un n√∫mero entero: "))
if n > 10:
    print("El n√∫mero es mayor que 10.")
elif n == 10:
    print("El n√∫mero es igual a 10.")
else:
    print("El n√∫mero es menor que 10.")
  </div>
  <p><em>Nota:</em> Introduce condicionales <code>if-elif-else</code> y operadores relacionales.</p>

  <!-- Ejemplo 3 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 3</h3>
  <p><strong>Enunciado:</strong> Calcular la suma de los primeros n n√∫meros positivos (donde n lo define el usuario).</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
n = int(input("¬øCu√°ntos n√∫meros sumaremos? "))
suma = 0
for i in range(1, n+1):
    suma += i
print("La suma de los primeros", n, "n√∫meros es:", suma)
  </div>
  <p><em>Nota:</em> Introduce bucle <code>for</code>, acumulador (<code>suma</code>) y uso de <code>range()</code>.</p>

  <!-- Ejemplo 4 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 4</h3>
  <p><strong>Enunciado:</strong> Leer 5 calificaciones (0‚Äì20) y mostrar el promedio, el mayor y el menor valor ingresado.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
suma = 0.0
mayor = -1
menor = 100
for i in range(5):
    nota = float(input(f"Ingrese la nota {i+1} (0-20): "))
    suma += nota
    if nota > mayor:
        mayor = nota
    if nota < menor:
        menor = nota
promedio = suma / 5
print("Promedio:", promedio)
print("Mayor nota:", mayor)
print("Menor nota:", menor)
  </div>
  <p><em>Nota:</em> Combina bucle y condicionales dentro del bucle.</p>

  <!-- Ejemplo 5 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 5</h3>
  <p><strong>Enunciado:</strong> Leer n√∫meros hasta que el usuario ingrese 0; contar cu√°ntos positivos hay, su suma y promedio.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
contador = 0
suma = 0.0
while True:
    n = float(input("Ingrese un n√∫mero (0 para terminar): "))
    if n == 0:
        break
    if n > 0:
        contador += 1
        suma += n
if contador > 0:
    promedio = suma / contador
    print("Cantidad de positivos:", contador)
    print("Suma de positivos:", suma)
    print("Promedio de positivos:", promedio)
else:
    print("No se ingresaron n√∫meros positivos.")
  </div>
  <p><em>Nota:</em> Usa bucle <code>while</code> infinito con <code>break</code> y condicional dentro del bucle.</p>

  <!-- Ejemplo 6 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 6 ‚Äì Nivel avanzado</h3>
  <p><strong>Enunciado:</strong> Leer edades hasta que se introduzca una negativa; contar cu√°ntas personas est√°n entre 18 y 65 a√±os.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
contador_activa = 0
while True:
    edad = int(input("Ingrese edad (negativo para terminar): "))
    if edad < 0:
        break
    if edad >= 18 and edad <= 65:
        contador_activa += 1
print("Cantidad de personas en edad laboral activa:", contador_activa)
  </div>
  <p><em>Nota:</em> Incluye operadores l√≥gicos <code>and</code>, bucle con condici√≥n de paro y conteo selectivo.</p>

  <!-- Ejemplo 7 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 7 ‚Äì Nivel dif√≠cil</h3>
  <p><strong>Enunciado:</strong> Calcular el total a pagar considerando descuentos del 10% si el precio supera 1000.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
n = int(input("¬øCu√°ntos precios ingresar√°? "))
total = 0.0
contador_desc = 0
for i in range(n):
    precio = float(input(f"Ingrese precio del producto {i+1}: "))
    if precio > 1000:
        precio = precio * 0.9
        contador_desc += 1
    total += precio
print("Total a pagar:", total)
print("Cantidad de productos con descuento:", contador_desc)
  </div>
  <p><em>Nota:</em> Requiere bucle, condicional, acumuladores y conteo.</p>

  <!-- Ejemplo 8 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 8 ‚Äì Nivel muy dif√≠cil (Integrador)</h3>
  <p><strong>Enunciado:</strong> Juego donde el usuario intenta adivinar un n√∫mero entre 1 y 50 (m√°ximo 7 intentos).</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
import random
secreto = random.randint(1, 50)
intentos = 0
max_intentos = 7
while intentos < max_intentos:
    intentos += 1
    n = int(input(f"Intento {intentos} de {max_intentos}. Ingrese n√∫mero (1-50): "))
    if n == secreto:
        print("¬°Ganaste! N√∫mero correcto:", secreto)
        break
    elif n < secreto:
        print("El n√∫mero secreto es mayor.")
    else:
        print("El n√∫mero secreto es menor.")
else:
    print("Lo siento, agotaste los intentos. El n√∫mero era:", secreto)
print("Usaste", intentos, "intentos.")
  </div>
  <p><em>Nota:</em> Incluye m√≥dulo <code>random</code>, bucle condicionado y condicionales anidados.</p>

</section>

    
    
    
    `,
    quiz: `<p><strong>Quiz:</strong> </p>`
  },
  pseint3: {
    objetivo: `<p><strong>Objetivo:</strong></p>
 <p>   
‚úîÔ∏è Comprender el uso de las estructuras condicionales simples y compuestas en PSeInt.<br>
‚úîÔ∏è Aplicar condicionales anidadas para resolver problemas con m√∫ltiples decisiones.<br>
‚úîÔ∏è Emplear operadores l√≥gicos (Y, O, NO) para combinar condiciones en algoritmos.<br>
    
   </p> 
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>
    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h4 style="color: #00ffff; font-size: 18px;">1. Sentencias condicionales simples y compuestas (Si‚Ä¶Entonces‚Ä¶Sino)</h4>

  <p>
    En la programaci√≥n estructurada, las estructuras condicionales constituyen el mecanismo que permite a un algoritmo tomar decisiones seg√∫n el cumplimiento o no de una determinada condici√≥n l√≥gica.
    De acuerdo con L√≥pez y Torres (2023), la capacidad de decisi√≥n dentro de un algoritmo convierte la secuencia de instrucciones en un proceso flexible, capaz de adaptarse a distintas circunstancias del entorno de ejecuci√≥n.
  </p>

  <p>
    En PSeInt, el control condicional se implementa mediante la palabra reservada <strong>Si</strong>, que eval√∫a una expresi√≥n booleana (verdadera o falsa). Si el resultado es verdadero, el algoritmo ejecuta el bloque de instrucciones dentro del condicional.
  </p>

  <p>Sintaxis de una estructura condicional simple:</p>
  <pre style="background-color: #1a1a1a; padding: 10px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Si &lt;condici√≥n&gt; Entonces
    &lt;instrucciones&gt;
FinSi
  </pre>

  <p>Ejemplo:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Algoritmo VerificarEdad
    Escribir "Ingrese su edad: "
    Leer edad
    Si edad >= 18 Entonces
        Escribir "Eres mayor de edad."
    FinSi
FinAlgoritmo
  </pre>

  <p>
    En este algoritmo, la condici√≥n <code>edad >= 18</code> determina si se ejecuta el mensaje. Si no se cumple, el programa simplemente contin√∫a sin ejecutar el bloque.
  </p>

  <p>
    Cuando se necesita realizar una acci√≥n alternativa, se usa la estructura compuesta:
  </p>

  <pre style="background-color: #1a1a1a; padding: 10px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Si &lt;condici√≥n&gt; Entonces
    &lt;instrucciones si verdadero&gt;
Sino
    &lt;instrucciones si falso&gt;
FinSi
  </pre>

  <p>Ejemplo:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Algoritmo ParOImpar
    Escribir "Ingrese un n√∫mero: "
    Leer n
    Si n MOD 2 = 0 Entonces
        Escribir "El n√∫mero es par."
    Sino
        Escribir "El n√∫mero es impar."
    FinSi
FinAlgoritmo
  </pre>

  <p>
    Si el n√∫mero ingresado es divisible por 2, se muestra que es par; de lo contrario, impar. Este tipo de estructura ilustra la bifurcaci√≥n l√≥gica, una base del pensamiento computacional.
  </p>

  <p>
    En el √°mbito educativo, PSeInt facilita visualizar este flujo condicional de manera estructurada, permitiendo a los estudiantes comprender c√≥mo la evaluaci√≥n de condiciones afecta la ejecuci√≥n del programa.
  </p>

  <h4 style="color: #00ffff; font-size: 18px;">2. Condicionales anidadas</h4>

  <p>
    Las condicionales anidadas son estructuras que contienen una o m√°s decisiones dentro de otra. Esto permite evaluar m√∫ltiples condiciones jer√°rquicas en un mismo algoritmo.
  </p>

  <p>Sintaxis general:</p>
  <pre style="background-color: #1a1a1a; padding: 10px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Si &lt;condici√≥n 1&gt; Entonces
    &lt;instrucciones 1&gt;
Sino
    Si &lt;condici√≥n 2&gt; Entonces
        &lt;instrucciones 2&gt;
    Sino
        &lt;instrucciones 3&gt;
    FinSi
FinSi
  </pre>

  <p>Ejemplo b√°sico:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Algoritmo ClasificarNota
    Escribir "Ingrese la nota (0-20): "
    Leer nota
    Si nota >= 18 Entonces
        Escribir "Excelente"
    Sino
        Si nota >= 14 Entonces
            Escribir "Aprobado"
        Sino
            Escribir "Desaprobado"
        FinSi
    FinSi
FinAlgoritmo
  </pre>

  <p>
    Aqu√≠ se clasifican las notas en tres categor√≠as: excelente, aprobado y desaprobado. Cada decisi√≥n conduce a otra seg√∫n el resultado previo.
  </p>

  <p>Ejemplo con jerarqu√≠a m√°s profunda:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Algoritmo CategoriaEdad
    Escribir "Ingrese su edad: "
    Leer edad
    Si edad < 12 Entonces
        Escribir "Ni√±o"
    Sino
        Si edad < 18 Entonces
            Escribir "Adolescente"
        Sino
            Si edad < 60 Entonces
                Escribir "Adulto"
            Sino
                Escribir "Adulto mayor"
            FinSi
        FinSi
    FinSi
FinAlgoritmo
  </pre>

  <p>
    Este tipo de estructura ayuda a representar decisiones secuenciales y jer√°rquicas. Mench√≥n et al. (2025) recomiendan ense√±ar primero las condicionales simples antes de abordar las anidadas, para mejorar la comprensi√≥n del flujo l√≥gico.
  </p>

  <h4 style="color: #00ffff; font-size: 18px;">3. Uso de operadores l√≥gicos en decisiones</h4>

  <p>
    Las expresiones condicionales pueden combinarse mediante operadores l√≥gicos para crear reglas m√°s complejas. En PSeInt, los operadores m√°s comunes son:
  </p>

  <table style="width: 100%; border-collapse: collapse; margin-top: 15px; font-size: 16px; color: white;">
  <thead>
    <tr style="background-color: #0a0a0a; color: #00ffff; text-align: left;">
      <th style="border: 1px solid #00ffff; padding: 8px;">Operador</th>
      <th style="border: 1px solid #00ffff; padding: 8px;">Significado</th>
      <th style="border: 1px solid #00ffff; padding: 8px;">Ejemplo</th>
      <th style="border: 1px solid #00ffff; padding: 8px;">Resultado</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="border: 1px solid #00ffff; padding: 8px;">Y (AND)</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">Ambas condiciones deben ser verdaderas</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">(edad >= 18 Y edad <= 65)</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">Verdadero solo si se cumplen ambas</td>
    </tr>
    <tr>
      <td style="border: 1px solid #00ffff; padding: 8px;">O (OR)</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">Al menos una condici√≥n es verdadera</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">(nota &lt; 10 O nota &gt; 20)</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">Verdadero si cualquiera se cumple</td>
    </tr>
    <tr>
      <td style="border: 1px solid #00ffff; padding: 8px;">NO (NOT)</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">Niega o invierte el valor de una condici√≥n</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">NO (activo = Verdadero)</td>
      <td style="border: 1px solid #00ffff; padding: 8px;">Verdadero si la condici√≥n es falsa</td>
    </tr>
  </tbody>
</table>


  <p>Ejemplo con el operador Y:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Algoritmo AccesoSistema
    Escribir "Ingrese usuario: "
    Leer usuario
    Escribir "Ingrese contrase√±a: "
    Leer clave
    Si usuario = "admin" Y clave = "1234" Entonces
        Escribir "Acceso concedido."
    Sino
        Escribir "Acceso denegado."
    FinSi
FinAlgoritmo
  </pre>

  <p>Ejemplo con el operador O:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Algoritmo DescuentoCliente
    Escribir "Ingrese tipo de cliente (VIP o Regular): "
    Leer tipo
    Si tipo = "VIP" O tipo = "Preferente" Entonces
        Escribir "Aplica descuento especial."
    Sino
        Escribir "Sin descuento adicional."
    FinSi
FinAlgoritmo
  </pre>

  <p>Ejemplo con el operador NO:</p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace;">
Algoritmo VerificarEdad
    Leer edad
    Si NO (edad >= 18) Entonces
        Escribir "Acceso restringido a menores de edad."
    Sino
        Escribir "Acceso permitido."
    FinSi
FinAlgoritmo
  </pre>

  <p>
    Estos operadores son esenciales para el pensamiento l√≥gico y el razonamiento computacional. Permiten combinar condiciones y construir sistemas m√°s realistas y vers√°tiles.
  </p>


  <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 18px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 18px;">üé• Videos educativos</h3>

  <p>
    <strong>Charly Cimino.</strong> (2023, abril 13). 
    <i>SI-SINO (IF-ELSE) en PSeInt ‚å®Ô∏è</i> [Video]. YouTube. 
    <a href="https://www.youtube.com/watch?v=Kctup1Ynv3Y" target="_blank" style="color: #00ffff; text-decoration: none;">
      https://www.youtube.com/watch?v=Kctup1Ynv3Y
    </a>
  </p>

  <p>
    <strong>Charly Cimino.</strong> (2023, mayo 11). 
    <i>SEG√öN (SWITCH) en PSeInt ‚å®Ô∏è Condicional m√∫ltiple</i> [Video]. YouTube. 
    <a href="https://www.youtube.com/watch?v=tluevpciHfo" target="_blank" style="color: #00ffff; text-decoration: none;">
      https://www.youtube.com/watch?v=tluevpciHfo
    </a>
  </p>

  <p>
    <strong>Coders Free.</strong> (2023, septiembre 8). 
    <i>Condicionales en PSeInt (Si Entonces | Sino) ‚Äì Curso PSeInt desde cero</i> [Video]. YouTube. 
    <a href="https://www.youtube.com/watch?v=l6YY_F3FpJY" target="_blank" style="color: #00ffff; text-decoration: none;">
      https://www.youtube.com/watch?v=l6YY_F3FpJY
    </a>
  </p>

  <h3 style="color: #00ffff; font-size: 18px; margin-top: 20px;">üìö Gu√≠as interactivas y materiales en l√≠nea</h3>

  <p>
    <strong>STEAM Academy.</strong> (2024). 
    <i>PSeInt: Condicionales.</i> 
    <a href="https://www.steamacademy.com.co/post/pseint-condicionales" target="_blank" style="color: #00ffff; text-decoration: none;">
      https://www.steamacademy.com.co/post/pseint-condicionales
    </a>
  </p>

  <p>
    <strong>Coders Free.</strong> (2023). 
    <i>Dominando las estructuras condicionales en PSeInt: Si Entonces, Sino y Sino Si.</i> 
    <a href="https://codersfree.com/posts/condicionales-en-pseint" target="_blank" style="color: #00ffff; text-decoration: none;">
      https://codersfree.com/posts/condicionales-en-pseint
    </a>
  </p>

</section>
  
    
    
    
    `,
    ejemplos: `<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.6;">

  <h2 style="color: #00ffff; font-size: 18px;">üß© Ejercicios pr√°cticos</h2>

  <p>Las estructuras condicionales permiten que un algoritmo tome decisiones en funci√≥n del cumplimiento de una condici√≥n l√≥gica. A trav√©s de las sentencias <strong>Si...Entonces...Sino</strong>, los programas pueden responder de forma diferente seg√∫n los datos ingresados o los resultados obtenidos. Los siguientes ejercicios desarrollan progresivamente el uso de condicionales simples, compuestas y anidadas, as√≠ como el empleo de operadores l√≥gicos en la toma de decisiones.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 1: Verificar mayor√≠a de edad (Nivel b√°sico)</h3>
  <p><strong>Planteamiento del problema:</strong> Crear un programa que solicite la edad del usuario y determine si es mayor o menor de edad.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo VerificarEdad
    Definir edad Como Entero
    Escribir "Ingrese su edad:"
    Leer edad
    Si edad >= 18 Entonces
        Escribir "Eres mayor de edad."
    Sino
        Escribir "Eres menor de edad."
    FinSi
FinAlgoritmo
  </pre>
  <p><strong>Conceptos aplicados:</strong> condicional simple, operador relacional.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 2: Determinar si un n√∫mero es par o impar (Nivel b√°sico-intermedio)</h3>
  <p><strong>Planteamiento del problema:</strong> Dise√±ar un algoritmo que lea un n√∫mero entero y determine si es par o impar.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ParOImpar
    Definir n Como Entero
    Escribir "Ingrese un n√∫mero:"
    Leer n
    Si n MOD 2 = 0 Entonces
        Escribir "El n√∫mero es par."
    Sino
        Escribir "El n√∫mero es impar."
    FinSi
FinAlgoritmo
  </pre>
  <p><strong>Conceptos aplicados:</strong> operador aritm√©tico (MOD), condicional compuesta.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 3: Clasificaci√≥n de notas (Nivel intermedio)</h3>
  <p><strong>Planteamiento del problema:</strong> Realizar un programa que lea una nota (0‚Äì20) y muestre si el estudiante est√° Desaprobado, Aprobado o Excelente.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ClasificarNota
    Definir nota Como Real
    Escribir "Ingrese la nota (0-20):"
    Leer nota
    Si nota >= 18 Entonces
        Escribir "Excelente"
    Sino
        Si nota >= 11 Entonces
            Escribir "Aprobado"
        Sino
            Escribir "Desaprobado"
        FinSi
    FinSi
FinAlgoritmo
  </pre>
  <p><strong>Conceptos aplicados:</strong> condicionales anidadas, operadores relacionales.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 4: Descuento por tipo de cliente (Nivel intermedio)</h3>
  <p><strong>Planteamiento del problema:</strong> Elaborar un algoritmo que solicite el tipo de cliente (VIP, Preferente o Regular) y muestre si tiene o no descuento especial.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo DescuentoCliente
    Definir tipo Como Cadena
    Escribir "Ingrese tipo de cliente (VIP, Preferente o Regular):"
    Leer tipo
    Si tipo = "VIP" O tipo = "Preferente" Entonces
        Escribir "Aplica descuento especial."
    Sino
        Escribir "Sin descuento adicional."
    FinSi
FinAlgoritmo
  </pre>
  <p><strong>Conceptos aplicados:</strong> operador l√≥gico O, condicional compuesta.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 5: Validar acceso al sistema (Nivel intermedio-avanzado)</h3>
  <p><strong>Planteamiento del problema:</strong> Crear un algoritmo que solicite un nombre de usuario y contrase√±a. Si el usuario es ‚Äúadmin‚Äù y la clave ‚Äú1234‚Äù, debe mostrar ‚ÄúAcceso concedido‚Äù; de lo contrario, ‚ÄúAcceso denegado‚Äù.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo AccesoSistema
    Definir usuario, clave Como Cadena
    Escribir "Ingrese usuario:"
    Leer usuario
    Escribir "Ingrese contrase√±a:"
    Leer clave
    Si usuario = "admin" Y clave = "1234" Entonces
        Escribir "Acceso concedido."
    Sino
        Escribir "Acceso denegado."
    FinSi
FinAlgoritmo
  </pre>
  <p><strong>Conceptos aplicados:</strong> operadores l√≥gicos Y, condicional compuesta.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 6: Clasificaci√≥n por edad (Nivel avanzado)</h3>
  <p><strong>Planteamiento del problema:</strong> Dise√±ar un programa que clasifique a una persona seg√∫n su edad en: Ni√±o (0‚Äì11), Adolescente (12‚Äì17), Adulto (18‚Äì59) o Adulto mayor (60 o m√°s).</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo CategoriaEdad
    Definir edad Como Entero
    Escribir "Ingrese su edad:"
    Leer edad
    Si edad < 12 Entonces
        Escribir "Ni√±o"
    Sino
        Si edad < 18 Entonces
            Escribir "Adolescente"
        Sino
            Si edad < 60 Entonces
                Escribir "Adulto"
            Sino
                Escribir "Adulto mayor"
            FinSi
        FinSi
    FinSi
FinAlgoritmo
  </pre>
  <p><strong>Conceptos aplicados:</strong> condicionales anidadas, jerarqu√≠a de decisiones, operadores relacionales.</p>

</section>
`,
    quiz: `<p><strong>Quiz:</strong> Evaluaci√≥n de ejercicios pr√°cticos.</p>`
  },
  pseint4: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    
     <p>   
‚úîÔ∏è Comprender el uso de bucles en PSeInt.<br>
‚úîÔ∏è Aplicar estructuras repetitivas en algoritmos.<br>
‚úîÔ∏è Identificar y corregir errores en iteraciones.<br>
    
   </p> 
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>
    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 18px;">1. ¬øQu√© son las Estructuras Repetitivas?</h3>

  <p>
    Las estructuras repetitivas, tambi√©n denominadas <strong>bucles</strong> o <strong>iteraciones</strong>, constituyen uno de los componentes fundamentales de la programaci√≥n estructurada, junto con las estructuras secuenciales y las estructuras condicionales. Su prop√≥sito es permitir que un conjunto de instrucciones se ejecute varias veces de manera controlada, lo que resulta indispensable para resolver problemas que implican procesos c√≠clicos o tareas reiterativas.
  </p>

  <p>
    En esencia, un bucle le indica al computador que repita una acci√≥n o secuencia de acciones mientras se cumpla una condici√≥n (controlada por una expresi√≥n l√≥gica) o hasta alcanzar un n√∫mero predefinido de repeticiones (controlado por un contador). Gracias a estas estructuras, los algoritmos pueden procesar grandes vol√∫menes de datos o realizar c√°lculos complejos sin necesidad de escribir el mismo bloque de c√≥digo varias veces.
  </p>

  <p>
    Desde el punto de vista l√≥gico, un bucle est√° compuesto por cuatro elementos esenciales:
  </p>
  <ul>
    <li><strong>Inicializaci√≥n:</strong> punto de partida donde se establecen las variables necesarias para controlar el ciclo.</li>
    <li><strong>Condici√≥n de continuidad:</strong> expresi√≥n booleana que determina si el ciclo debe continuar o detenerse.</li>
    <li><strong>Cuerpo del bucle:</strong> conjunto de instrucciones que se repite en cada iteraci√≥n.</li>
    <li><strong>Actualizaci√≥n:</strong> modificaci√≥n de las variables de control para avanzar hacia el final del bucle y evitar repeticiones infinitas.</li>
  </ul>

  <p>
    Por ejemplo, en un proceso cotidiano como contar los pasos al subir una escalera, el cerebro ejecuta una estructura repetitiva: 
    <i>‚ÄúMientras no llegues al √∫ltimo escal√≥n, da un paso m√°s‚Äù</i>. En programaci√≥n, esta misma l√≥gica se traduce en un bucle que repite una acci√≥n hasta cumplir una condici√≥n final.
  </p>

  <h3 style="color: #00ffff; font-size: 18px;">2. Importancia en la programaci√≥n estructurada</h3>

  <p>
    Las estructuras repetitivas son indispensables para la creaci√≥n de algoritmos eficientes, modulares y escalables. Gracias a ellas, se puede:
  </p>

  <ul>
    <li>Automatizar tareas repetitivas, como imprimir una lista de datos o realizar c√°lculos sobre conjuntos extensos.</li>
    <li>Ahorrar c√≥digo, ya que una sola estructura repetitiva puede reemplazar decenas o incluso cientos de l√≠neas redundantes.</li>
    <li>Simplificar el mantenimiento y la comprensi√≥n del programa, al encapsular tareas repetitivas bajo una l√≥gica clara y controlada.</li>
    <li>Aumentar la eficiencia algor√≠tmica, permitiendo ejecutar operaciones de b√∫squeda, conteo o filtrado de manera sistem√°tica.</li>
  </ul>

  <p>
    Adem√°s, el uso correcto de los bucles prepara al estudiante para comprender conceptos m√°s avanzados, como la recursividad, los algoritmos iterativos, las estructuras de datos din√°micas (listas, colas, pilas) y la complejidad computacional.
  </p>

  <h3 style="color: #00ffff; font-size: 18px;">3. Estructuras repetitivas desde una perspectiva pedag√≥gica y cognitiva</h3>

  <p>
    Desde la ense√±anza del pensamiento computacional, las estructuras repetitivas representan un punto cr√≠tico en el aprendizaje, ya que su comprensi√≥n requiere un razonamiento abstracto m√°s avanzado que el de las estructuras secuenciales o condicionales. No se trata solo de repetir instrucciones, sino de anticipar el comportamiento del algoritmo en el tiempo, comprendiendo c√≥mo cambian las variables en cada iteraci√≥n.
  </p>

  <p>Por ello, ense√±ar bucles implica desarrollar en el estudiante tres competencias intelectuales interrelacionadas:</p>

  <ul>
    <li><strong>Formulaci√≥n de la condici√≥n de parada:</strong> el estudiante debe comprender cu√°ndo y por qu√© el bucle debe detenerse, evitando errores como los bucles infinitos o las terminaciones prematuras.</li>
    <li><strong>Mantenimiento de invariantes y acumuladores:</strong> comprender la importancia de propiedades que permanecen constantes en cada iteraci√≥n, y c√≥mo variables como sumas o contadores acumulan resultados parciales.</li>
    <li><strong>Prevenci√≥n de errores de control (‚Äúoff‚Äìby‚Äìone‚Äù):</strong> errores que ocurren cuando la condici√≥n del bucle se formula incorrectamente y el ciclo se ejecuta una vez m√°s o una vez menos de lo esperado.</li>
  </ul>

  <h3 style="color: #00ffff; font-size: 18px;">4. Dimensi√≥n conceptual del aprendizaje de bucles</h3>

  <p>
    A nivel cognitivo, el aprendizaje de las estructuras repetitivas supone internalizar la idea de iteraci√≥n controlada. Esto significa que el estudiante debe imaginar c√≥mo el algoritmo ‚Äúviaja en el tiempo‚Äù, ejecutando los mismos pasos una y otra vez hasta que algo cambie.
  </p>

  <p>Por ello, se recomienda que los docentes:</p>

  <ul>
    <li>Representen gr√°ficamente el flujo del bucle mediante diagramas de flujo o esquemas de iteraci√≥n.</li>
    <li>Fomenten la simulaci√≥n manual, pidiendo a los alumnos que ejecuten en papel las primeras iteraciones.</li>
    <li>Utilicen ejemplos cotidianos, como ‚Äúmientras no suene el despertador, sigue durmiendo‚Äù.</li>
    <li>Ense√±en el uso de herramientas visuales como la ejecuci√≥n paso a paso en PSeInt.</li>
  </ul>

  <p>
    Este enfoque promueve un aprendizaje activo, en el cual el estudiante no solo memoriza la sintaxis, sino que comprende el funcionamiento interno del flujo repetitivo, fortaleciendo su pensamiento l√≥gico y anal√≠tico.
  </p>

  <h3 style="color: #00ffff; font-size: 18px;">5. Aplicaciones pr√°cticas</h3>

  <p>
    El dominio de las estructuras repetitivas permite modelar procesos reales, tales como:
  </p>

  <ul>
    <li>Calcular el promedio de calificaciones de un grupo grande de estudiantes.</li>
    <li>Recorrer una lista de productos en un inventario.</li>
    <li>Realizar b√∫squedas y conteos en arreglos o bases de datos.</li>
    <li>Simular fen√≥menos f√≠sicos o financieros con m√∫ltiples iteraciones.</li>
    <li>Automatizar tareas repetitivas en sistemas administrativos o cient√≠ficos.</li>
  </ul>

  <p>
    En la pr√°ctica, casi cualquier programa inform√°tico contiene bucles, desde la actualizaci√≥n constante de una interfaz hasta la iteraci√≥n de un algoritmo de aprendizaje autom√°tico.
  </p>

  <p>
    As√≠, los bucles no solo son una herramienta t√©cnica, sino una manifestaci√≥n del pensamiento repetitivo y sistem√°tico, base de toda l√≥gica computacional. Comprenderlos a fondo implica dominar el arte de controlar la repetici√≥n sin perder la coherencia del proceso, una habilidad esencial para cualquier programador o cient√≠fico de datos.
  </p>

</section>
<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 18px;">6. Concepto de bucle y su funci√≥n en los algoritmos</h3>

  <h4 style="color: #00ffff; font-size: 17px;">Definici√≥n formal y prop√≥sito</h4>

  <p>
    Una <strong>estructura repetitiva</strong> o <strong>bucle</strong> es un bloque de instrucciones dise√±ado para ejecutarse repetidamente mientras se cumpla una determinada condici√≥n l√≥gica o hasta que un contador alcance un valor prefijado. Formalmente, un bucle puede definirse como un mecanismo compuesto por cuatro elementos esenciales:
  </p>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Elemento</th>
        <th style="padding: 8px; border: 1px solid #333;">Descripci√≥n</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Inicializaci√≥n</td>
        <td style="padding: 8px; border: 1px solid #333;">Establecimiento del estado inicial del bucle (variables de control, contadores, banderas).</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Condici√≥n de continuidad</td>
        <td style="padding: 8px; border: 1px solid #333;">Expresi√≥n booleana que determina si debe ejecutarse una nueva iteraci√≥n del cuerpo del bucle.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Cuerpo del bucle</td>
        <td style="padding: 8px; border: 1px solid #333;">Conjunto de instrucciones que se repiten en cada iteraci√≥n.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Actualizaci√≥n</td>
        <td style="padding: 8px; border: 1px solid #333;">Modificaci√≥n de las variables de control (como incrementar un contador o cambiar una bandera) que conduce finalmente al cumplimiento de la condici√≥n de paro.</td>
      </tr>
    </tbody>
  </table>

  <p>
    Los bucles permiten:
  </p>
  <ul>
    <li>Repetir operaciones sobre colecciones (listas, vectores, arreglos).</li>
    <li>Realizar c√°lculos de acumulaci√≥n, como sumas, m√°ximos, m√≠nimos o conteos.</li>
    <li>Implementar algoritmos de b√∫squeda, ordenamiento, simulaci√≥n o procesamiento de flujos de datos.</li>
  </ul>

  <p>
    En la ense√±anza y dise√±o de algoritmos, el bucle se entiende como un patr√≥n central para procesos iterativos y c√≠clicos, que reemplazan lo que de otro modo ser√≠an m√∫ltiples repeticiones manuales del c√≥digo. As√≠, se promueve la eficiencia, claridad y escalabilidad en la resoluci√≥n de problemas.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;">Clasificaci√≥n did√°ctica de bucles</h4>

  <p>
    Para efectos pedag√≥gicos, es conveniente distinguir las siguientes categor√≠as de bucles, cada una con su perfil y aplicaci√≥n:
  </p>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Tipo de bucle</th>
        <th style="padding: 8px; border: 1px solid #333;">Control principal</th>
        <th style="padding: 8px; border: 1px solid #333;">Caracter√≠sticas principales</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Bucles controlados por condici√≥n (Mientras / While)</td>
        <td style="padding: 8px; border: 1px solid #333;">Evaluaci√≥n de condici√≥n booleana</td>
        <td style="padding: 8px; border: 1px solid #333;">N√∫mero de repeticiones no fijo de antemano.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Bucles controlados por contador (Para / For)</td>
        <td style="padding: 8px; border: 1px solid #333;">Contador desde inicio hasta fin</td>
        <td style="padding: 8px; border: 1px solid #333;">N√∫mero de repeticiones conocido al inicio.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Bucles de comprobaci√≥n posterior (Repetir‚Ä¶Hasta / Do‚Ä¶While)</td>
        <td style="padding: 8px; border: 1px solid #333;">Condici√≥n evaluada al final</td>
        <td style="padding: 8px; border: 1px solid #333;">Garantizan al menos una ejecuci√≥n del cuerpo.</td>
      </tr>
    </tbody>
  </table>

  <p>
    Cada tipo tiene ventajas pedag√≥gicas y aplicaciones pr√°cticas distintas: los bucles condicionales introducen la dependencia l√≥gica del entorno; los de contador refuerzan la noci√≥n de iteraci√≥n cuantificada; y los de comprobaci√≥n posterior son √∫tiles para validaciones o procesos que deben ejecutarse al menos una vez.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;">Invariante de bucle y razonamiento formal</h4>

  <p>
    Un concepto avanzado pero enriquecedor para entender bucles es el de <strong>invariante de bucle</strong>. Una invariante es una propiedad l√≥gica que se cumple al inicio de cada iteraci√≥n del bucle y que se mantiene antes y despu√©s de cada ejecuci√≥n del cuerpo. Aprender a identificar invariantes ayuda al estudiante a razonar de forma m√°s rigurosa sobre la correcci√≥n del bucle: que al entrar cumple cierta condici√≥n, que al salir tambi√©n lo hace, y que al terminar se ha alcanzado el estado deseado.
  </p>

  <p>
    Por ejemplo, en un bucle que suma elementos de una lista, una posible invariante es:
  </p>

  <p style="background-color: #1a1a1a; padding: 10px; border-left: 4px solid #00ffff; font-style: italic;">
    ‚ÄúLa variable <strong>suma</strong> contiene la suma de los elementos procesados hasta el √≠ndice <strong>i‚àí1</strong>‚Äù.
  </p>

  <p>
    Esta afirmaci√≥n se cumple antes de cada iteraci√≥n, se mantiene tras cada iteraci√≥n, y al final junto con la condici√≥n de paro permite concluir que la suma total es correcta.
  </p>

  <p>
    El uso de invariantes se vincula con m√©todos formales de verificaci√≥n de programas y, aunque no todos los cursos introductorios lo abordan, su introducci√≥n temprana fortalece la capacidad del estudiante de dise√±ar algoritmos correctos y evitar errores como ‚Äúoff-by-one‚Äù o bucles infinitos.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;">Implicaciones did√°cticas</h4>

  <p>
    Para la ense√±anza de programaci√≥n con bucles, es muy recomendable que el docente ayude a los estudiantes a:
  </p>

  <ul>
    <li>Formular expl√≠citamente la condici√≥n de paro (¬øcu√°ndo debe detenerse el bucle?).</li>
    <li>Identificar una invariante sencilla (¬øqu√© propiedad permanece verdadera cada vuelta?).</li>
    <li>Verificar que la actualizaci√≥n conduce a la condici√≥n de paro (¬øla variable de control avanza hacia el fin?).</li>
    <li>Experimentar con bucles donde la invariante o la condici√≥n de paro est√©n mal planteadas, para observar fallos reales.</li>
  </ul>

  <p>
    Este enfoque fomenta un pensamiento algor√≠tmico profundo, m√°s all√° de saber c√≥mo escribir un bucle, sino comprender <strong>por qu√© y cu√°ndo se detiene</strong>, <strong>qu√© se mantiene verdadero</strong> y <strong>c√≥mo evitar errores de iteraci√≥n</strong>.
  </p>

</section>
<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 18px;">7. Estructura Mientras (While)</h3>

  <h4 style="color: #00ffff; font-size: 17px;"> Definici√≥n y sem√°ntica</h4>

  <p>
    La estructura repetitiva <strong>‚ÄúMientras‚Äù</strong> (equivalente a <i>While</i> en otros lenguajes) constituye uno de los mecanismos m√°s esenciales de la programaci√≥n estructurada, ya que permite ejecutar un bloque de instrucciones de manera reiterada mientras una condici√≥n l√≥gica sea verdadera (Rojas, 2022).
  </p>

  <p>
    Su funci√≥n principal es controlar la repetici√≥n condicional de instrucciones, evaluando la condici√≥n antes de cada iteraci√≥n. Esto implica que si la condici√≥n inicial no se cumple, el cuerpo del bucle no se ejecutar√° en absoluto, caracter√≠stica que la diferencia de las estructuras ‚ÄúRepetir...Hasta‚Äù (Do...While).
  </p>

  <p>En PSeInt, la sintaxis b√°sica es:</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Mientras &lt;condici√≥n&gt; Hacer
    &lt;instrucciones&gt;
FinMientras
  </pre>

  <p>
    Esta estructura traduce el razonamiento humano de ‚Äúmientras algo siga siendo cierto, contin√∫a realizando la acci√≥n‚Äù (G√≥mez &amp; Paredes, 2023).
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Concepto l√≥gico </h4>

  <p>
    Desde la l√≥gica computacional, el bucle ‚ÄúMientras‚Äù representa una <strong>repetici√≥n dependiente del estado</strong> (Brackmann et al., 2021). Esto significa que la ejecuci√≥n se mantiene activa siempre que la condici√≥n booleana permanezca verdadera.
  </p>

  <p>
    A nivel cognitivo, comprender un bucle implica anticipar el comportamiento din√°mico del algoritmo, imaginando c√≥mo las variables cambian en cada ciclo.
  </p>

  <p>
    En la ense√±anza de la programaci√≥n, este tipo de estructuras ayuda a desarrollar el pensamiento iterativo y predictivo, promoviendo que los estudiantes comprendan la noci√≥n de ‚Äúestado del sistema‚Äù y practiquen la depuraci√≥n paso a paso (Universidad de C√≥rdoba, 2024).
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Ejemplo 1 ‚Äî Contador ascendente simple</h4>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo Contador
    Definir i Como Entero
    i &lt;- 1
    Mientras i &lt;= 5 Hacer
        Escribir "Iteraci√≥n: ", i
        i &lt;- i + 1
    FinMientras
FinAlgoritmo
  </pre>

  <p>
    Como se√±alan G√≥mez y Paredes (2023), este tipo de ejercicio es ideal para la ense√±anza inicial de bucles, ya que ilustra de manera visual el ciclo completo: inicializaci√≥n, evaluaci√≥n de condici√≥n, ejecuci√≥n del cuerpo y actualizaci√≥n de la variable de control.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Ejemplo 2 ‚Äî Lectura hasta valor centinela</h4>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo SumaHastaCero
    Definir n, suma Como Entero
    suma &lt;- 0
    Escribir "Ingrese n√∫meros (0 para terminar):"
    Leer n
    Mientras n &lt;&gt; 0 Hacer
        suma &lt;- suma + n
        Leer n
    FinMientras
    Escribir "La suma total es: ", suma
FinAlgoritmo
  </pre>

  <p>
    Seg√∫n Rojas (2022), este tipo de ejercicio introduce el concepto de <strong>valor centinela</strong>, una t√©cnica cl√°sica que permite controlar el final de un bucle a trav√©s de la entrada de un dato especial (en este caso, el n√∫mero 0).
  </p>

  <p>
    De este modo, el alumno comprende que la repetici√≥n puede depender no solo de contadores, sino tambi√©n de datos din√°micos introducidos por el usuario.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> An√°lisis de comportamiento</h4>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Aspecto</th>
        <th style="padding: 8px; border: 1px solid #333;">Descripci√≥n</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Tipo de control</td>
        <td style="padding: 8px; border: 1px solid #333;">Condicional (la evaluaci√≥n se realiza antes del cuerpo del bucle).</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">N√∫mero m√≠nimo de ejecuciones</td>
        <td style="padding: 8px; border: 1px solid #333;">0 veces, si la condici√≥n inicial es falsa.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Ventajas</td>
        <td style="padding: 8px; border: 1px solid #333;">Permite iteraciones indeterminadas seg√∫n una condici√≥n l√≥gica.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Desventajas</td>
        <td style="padding: 8px; border: 1px solid #333;">Riesgo de bucles infinitos si la variable de control no se actualiza.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Aplicaci√≥n t√≠pica</td>
        <td style="padding: 8px; border: 1px solid #333;">Procesos de lectura, validaci√≥n de datos y sumatorias din√°micas.</td>
      </tr>
    </tbody>
  </table>

  <p>
    Brackmann et al. (2021) destacan que el uso de bucles controlados por condici√≥n estimula el razonamiento l√≥gico y el control del flujo, competencias centrales del pensamiento computacional.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;">üö´ Errores comunes y estrategias de correcci√≥n</h4>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Error frecuente</th>
        <th style="padding: 8px; border: 1px solid #333;">Descripci√≥n</th>
        <th style="padding: 8px; border: 1px solid #333;">Consecuencia</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">No actualizar la variable de control</td>
        <td style="padding: 8px; border: 1px solid #333;">La condici√≥n nunca cambia.</td>
        <td style="padding: 8px; border: 1px solid #333;">Bucle infinito.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Condici√≥n incorrecta</td>
        <td style="padding: 8px; border: 1px solid #333;">Uso de &lt; en lugar de &lt;= o viceversa.</td>
        <td style="padding: 8px; border: 1px solid #333;">Error off-by-one.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Lectura mal colocada</td>
        <td style="padding: 8px; border: 1px solid #333;">No se inicializa fuera del bucle.</td>
        <td style="padding: 8px; border: 1px solid #333;">Comportamiento inesperado.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Falta de caso base</td>
        <td style="padding: 8px; border: 1px solid #333;">No se prev√© cu√°ndo detenerse.</td>
        <td style="padding: 8px; border: 1px solid #333;">Resultado err√≥neo o bucle infinito.</td>
      </tr>
    </tbody>
  </table>

  <p>
    Como indican G√≥mez y Paredes (2023), la depuraci√≥n de estos errores puede abordarse mediante la ejecuci√≥n paso a paso en PSeInt, observando la evoluci√≥n de las variables en cada iteraci√≥n.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Ejercicio guiado ‚Äî Suma de n√∫meros hasta N</h4>

  <p><strong>Enunciado:</strong><br>
  Calcular la suma de los enteros desde 1 hasta un n√∫mero N ingresado por el usuario.</p>

  <p><strong>Soluci√≥n en PSeInt:</strong></p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo SumaN
    Definir N, i, suma Como Entero
    Escribir "Ingrese N (N &gt; 0):"
    Leer N
    i &lt;- 1
    suma &lt;- 0
    Mientras i &lt;= N Hacer
        suma &lt;- suma + i
        i &lt;- i + 1
    FinMientras
    Escribir "La suma de 1 a ", N, " es: ", suma
FinAlgoritmo
  </pre>

  <p>
    De acuerdo con Rojas (2022), este tipo de ejercicios ayudan al estudiante a identificar patrones de acumulaci√≥n y actualizaci√≥n, dos principios fundamentales en la construcci√≥n de bucles.
  </p>

</section>

    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 18px;">8. Estructura Para (For)</h3>

  <h4 style="color: #00ffff; font-size: 17px;">Definici√≥n y sem√°ntica</h4>

  <p>
    La estructura repetitiva <strong>Para</strong> (equivalente a <i>For</i> en muchos lenguajes) permite ejecutar un bloque de instrucciones un n√∫mero determinado de veces, definido por un rango y, opcionalmente, por un paso o incremento. Es la forma m√°s estructurada de iteraci√≥n cuando se conoce con anticipaci√≥n la cantidad de repeticiones necesarias (Rojas, 2022).
  </p>

  <p>En PSeInt, su sintaxis es la siguiente:</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Para i &lt;- inicio Hasta fin Con Paso paso Hacer
    &lt;instrucciones&gt;
FinPara
  </pre>

  <p>
    En la mayor√≠a de los casos, el ‚ÄúPaso‚Äù es opcional y su valor por defecto es 1, aunque puede establecerse otro valor, positivo o negativo, seg√∫n la direcci√≥n del recorrido. Este tipo de estructura se asocia al <strong>control por contador</strong>, donde la variable de iteraci√≥n se incrementa o decrementa autom√°ticamente (G√≥mez &amp; Paredes, 2023).
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Ejemplo b√°sico ‚Äî Suma de n√∫meros del 1 al 5</h4>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo SumarFor
    Definir i, suma Como Entero
    suma &lt;- 0
    Para i &lt;- 1 Hasta 5 Hacer
        suma &lt;- suma + i
    FinPara
    Escribir "Suma: ", suma
FinAlgoritmo
  </pre>

  <p>
    En este caso, la variable <strong>i</strong> se inicializa en 1, aumenta autom√°ticamente hasta 5, y en cada paso se acumula su valor en <strong>suma</strong>.
  </p>

  <p>
    Seg√∫n Brackmann et al. (2021), este tipo de bucles son ideales para introducir el concepto de iteraci√≥n controlada, ayudando al estudiante a identificar la estructura c√≠clica fija del algoritmo.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Concepto l√≥gico</h4>

  <p>
    El bucle <strong>Para</strong> refleja un modelo de control determinista, donde el n√∫mero de iteraciones est√° definido antes de comenzar. Desde una perspectiva did√°ctica, esta estructura es m√°s accesible para principiantes, ya que reduce la posibilidad de errores l√≥gicos, especialmente los relacionados con las condiciones de parada (Rojas, 2022).
  </p>

  <p>
    En t√©rminos cognitivos, el uso de la estructura <strong>Para</strong> promueve la abstracci√≥n y planificaci√≥n del ciclo, facilitando el desarrollo de competencias de pensamiento computacional como la automatizaci√≥n y la generalizaci√≥n (Brackmann et al., 2021).
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Ejemplo 1 ‚Äî Suma de elementos de una lista</h4>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo SumaLista
    Definir n, i, suma, valor Como Entero
    suma &lt;- 0
    Escribir "¬øCu√°ntos n√∫meros ingresar√°?"
    Leer n
    Para i &lt;- 1 Hasta n Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer valor
        suma &lt;- suma + valor
    FinPara
    Escribir "La suma total es: ", suma
FinAlgoritmo
  </pre>

  <p>
    Este ejemplo permite reforzar la idea de repetici√≥n controlada por un valor dado (n√∫mero de elementos). Seg√∫n la Universidad de C√≥rdoba (2024), este tipo de ejercicios ayuda a relacionar los bucles con procesos de acumulaci√≥n y a fortalecer la comprensi√≥n de la secuencia de ejecuci√≥n en estructuras iterativas.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Ejemplo 2 ‚Äî C√°lculo del factorial</h4>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo Factorial
    Definir n, i, fact Como Entero
    Escribir "Ingrese n (&gt;=0):"
    Leer n
    fact &lt;- 1
    Para i &lt;- 1 Hasta n Hacer
        fact &lt;- fact * i
    FinPara
    Escribir "n! = ", fact
FinAlgoritmo
  </pre>

  <p>
    Aqu√≠, la estructura <strong>Para</strong> controla un proceso acumulativo, donde cada iteraci√≥n multiplica el valor actual del factorial por el √≠ndice <strong>i</strong>.
  </p>

  <p>
    Como puntualizan G√≥mez y Paredes (2023), este ejemplo favorece la comprensi√≥n de acumuladores dentro de bucles y permite abordar nociones de complejidad computacional lineal de forma intuitiva.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> An√°lisis comparativo: Mientras vs. Para</h4>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Aspecto</th>
        <th style="padding: 8px; border: 1px solid #333;">Mientras</th>
        <th style="padding: 8px; border: 1px solid #333;">Para</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Tipo de control</td>
        <td style="padding: 8px; border: 1px solid #333;">Condicional</td>
        <td style="padding: 8px; border: 1px solid #333;">Contador</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">N√∫mero de repeticiones</td>
        <td style="padding: 8px; border: 1px solid #333;">Indeterminado</td>
        <td style="padding: 8px; border: 1px solid #333;">Determinado</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Evaluaci√≥n de condici√≥n</td>
        <td style="padding: 8px; border: 1px solid #333;">Antes de cada iteraci√≥n</td>
        <td style="padding: 8px; border: 1px solid #333;">Autom√°tica por rango</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Uso t√≠pico</td>
        <td style="padding: 8px; border: 1px solid #333;">Entrada de datos o validaciones</td>
        <td style="padding: 8px; border: 1px solid #333;">Recorridos num√©ricos o secuenciales</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Complejidad conceptual</td>
        <td style="padding: 8px; border: 1px solid #333;">Media‚ÄìAlta</td>
        <td style="padding: 8px; border: 1px solid #333;">Baja‚ÄìMedia</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Error com√∫n</td>
        <td style="padding: 8px; border: 1px solid #333;">Olvidar actualizar variable de control</td>
        <td style="padding: 8px; border: 1px solid #333;">Confundir l√≠mites del rango</td>
      </tr>
    </tbody>
  </table>

  <p>
    Como se√±alan Rojas (2022) y Brackmann et al. (2021), comprender la diferencia entre estos dos tipos de bucles es fundamental para el desarrollo de la flexibilidad algor√≠tmica, ya que cada uno resuelve problemas distintos seg√∫n el tipo de control requerido.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;">‚ö†Ô∏è Errores comunes y buenas pr√°cticas</h4>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Error</th>
        <th style="padding: 8px; border: 1px solid #333;">Descripci√≥n</th>
        <th style="padding: 8px; border: 1px solid #333;">Consecuencia</th>
        <th style="padding: 8px; border: 1px solid #333;">Recomendaci√≥n</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Modificar la variable de control dentro del cuerpo</td>
        <td style="padding: 8px; border: 1px solid #333;">Alterar <strong>i</strong> manualmente dentro del bucle.</td>
        <td style="padding: 8px; border: 1px solid #333;">Resultados impredecibles.</td>
        <td style="padding: 8px; border: 1px solid #333;">No reasignar la variable de iteraci√≥n.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Confundir l√≠mites o pasos</td>
        <td style="padding: 8px; border: 1px solid #333;">Usar ‚ÄúHasta n-1‚Äù o ‚ÄúPaso incorrecto‚Äù.</td>
        <td style="padding: 8px; border: 1px solid #333;">Error off-by-one o salto de valores.</td>
        <td style="padding: 8px; border: 1px solid #333;">Revisar los valores de inicio y fin.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Usar ‚ÄúPara‚Äù en iteraciones indeterminadas</td>
        <td style="padding: 8px; border: 1px solid #333;">Aplicar ‚ÄúPara‚Äù sin conocer la cantidad de repeticiones.</td>
        <td style="padding: 8px; border: 1px solid #333;">Riesgo de resultados err√≥neos.</td>
        <td style="padding: 8px; border: 1px solid #333;">Preferir ‚ÄúMientras‚Äù o ‚ÄúRepetir‚Äù.</td>
      </tr>
    </tbody>
  </table>

  <p>
    Estos errores son frecuentes en las primeras etapas de aprendizaje. La depuraci√≥n en PSeInt puede realizarse visualizando el panel de variables paso a paso (<strong>F8</strong>) o mediante trazas con la instrucci√≥n <strong>Escribir</strong> para verificar el avance de la iteraci√≥n (Universidad de C√≥rdoba, 2024).
  </p>

  <h4 style="color: #00ffff; font-size: 17px;">Ejercicio guiado ‚Äî Tabla de multiplicar</h4>

  <p><strong>Enunciado:</strong><br>
  Generar la tabla de multiplicar de un n√∫mero entero <strong>m</strong> desde 1 hasta 12.</p>

  <p><strong>Soluci√≥n en PSeInt:</strong></p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo TablaMultiplicar
    Definir m, i, prod Como Entero
    Escribir "Ingrese el n√∫mero m:"
    Leer m
    Para i &lt;- 1 Hasta 12 Hacer
        prod &lt;- m * i
        Escribir m, " x ", i, " = ", prod
    FinPara
FinAlgoritmo
  </pre>

  <p>
    Este tipo de ejercicio es especialmente √∫til en el aula, ya que combina repetici√≥n, salida formateada y visualizaci√≥n de patrones. Seg√∫n G√≥mez y Paredes (2023), este enfoque refuerza la l√≥gica iterativa y promueve la transferencia del conocimiento a otros contextos, como el manejo de arreglos o estructuras de datos.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Perspectiva did√°ctica</h4>

  <p>
    Desde una perspectiva did√°ctica, la estructura <strong>Para</strong> es una de las m√°s efectivas para introducir los bucles, ya que ofrece un entorno predecible y controlado. Brackmann et al. (2021) sostienen que este tipo de estructuras fortalecen la comprensi√≥n del flujo algor√≠tmico, permitiendo al estudiante visualizar el avance del contador y la evoluci√≥n de las variables dependientes.
  </p>

  <p>
    Asimismo, Rojas (2022) destaca que el uso de ejemplos graduales, como sumatorias, tablas o factoriales, facilita la transici√≥n del pensamiento aritm√©tico al pensamiento computacional, fomentando la autonom√≠a en la formulaci√≥n de algoritmos.
  </p>

</section>
<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 18px;">9. Combinaci√≥n de bucles y condicionales</h3>

  <h4 style="color: #00ffff; font-size: 17px;"> Principio general</h4>

  <p>
    En la programaci√≥n estructurada, la interacci√≥n entre bucles y estructuras condicionales constituye la base del control de flujo din√°mico. En la pr√°ctica, la mayor√≠a de los algoritmos requieren repetir acciones mientras se toman decisiones dentro de esas repeticiones.
  </p>
  <p>
    De acuerdo con Ram√≠rez y Guti√©rrez (2023), esta combinaci√≥n permite crear algoritmos adaptativos, capaces de modificar su comportamiento durante la ejecuci√≥n, en funci√≥n de los datos procesados o las condiciones del entorno.
  </p>

  <p>En t√©rminos de dise√±o algor√≠tmico, el patr√≥n general puede representarse as√≠:</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Mientras &lt;condici√≥n del bucle&gt; Hacer
    Si &lt;condici√≥n interna&gt; Entonces
        &lt;acciones condicionadas&gt;
    FinSi
FinMientras
  </pre>

  <p>
    Este patr√≥n ilustra la anidaci√≥n de estructuras de control, en la cual las decisiones influyen directamente en la repetici√≥n. Seg√∫n Villalobos y Ponce (2022), este tipo de estructuras ayudan a los estudiantes a comprender la idea de flujo jer√°rquico de decisiones, donde las condiciones act√∫an como filtros dentro de iteraciones.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Importancia pedag√≥gica y cognitiva</h4>

  <p>
    Desde la perspectiva del aprendizaje del pensamiento computacional, la combinaci√≥n de bucles y condicionales desarrolla la flexibilidad cognitiva del estudiante. Mientras que un bucle implica la repetici√≥n sistem√°tica, una condici√≥n introduce la variabilidad y el control selectivo.
  </p>
  <p>
    Ramos y L√≥pez (2024) se√±alan que comprender esta interacci√≥n fortalece la capacidad de abstracci√≥n, pues el estudiante debe anticipar c√≥mo cambian las variables y las rutas del algoritmo en cada iteraci√≥n.
  </p>

  <p>Entre las principales competencias que se promueven est√°n:</p>
  <ul>
    <li><strong>Razonamiento l√≥gico condicional:</strong> aplicar decisiones dentro de procesos iterativos.</li>
    <li><strong>Gesti√≥n de estados y banderas:</strong> mantener informaci√≥n sobre el estado del proceso (por ejemplo, si se detect√≥ un error o condici√≥n especial).</li>
    <li><strong>Control de flujo avanzado:</strong> usar correctamente instrucciones como <i>SalirMientras</i> o condiciones de corte (<i>short-circuit</i>).</li>
  </ul>

  <h4 style="color: #00ffff; font-size: 17px;"> Patrones comunes de combinaci√≥n</h4>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Patr√≥n</th>
        <th style="padding: 8px; border: 1px solid #333;">Descripci√≥n</th>
        <th style="padding: 8px; border: 1px solid #333;">Ejemplo t√≠pico</th>
        <th style="padding: 8px; border: 1px solid #333;">Uso pedag√≥gico</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Filtro en bucle</td>
        <td style="padding: 8px; border: 1px solid #333;">Itera sobre una colecci√≥n y procesa solo los elementos que cumplen una condici√≥n.</td>
        <td style="padding: 8px; border: 1px solid #333;">Contar valores impares, filtrar mayores que cierto valor.</td>
        <td style="padding: 8px; border: 1px solid #333;">Comprender el uso de <i>Si...Entonces</i> dentro de ciclos.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Acumulaci√≥n condicional</td>
        <td style="padding: 8px; border: 1px solid #333;">Suma o cuenta elementos que cumplen un criterio.</td>
        <td style="padding: 8px; border: 1px solid #333;">Contar aprobados o acumular ventas mayores a un umbral.</td>
        <td style="padding: 8px; border: 1px solid #333;">Reforzar la idea de selectividad.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">B√∫squeda con corte</td>
        <td style="padding: 8px; border: 1px solid #333;">Detiene el bucle cuando se cumple una condici√≥n.</td>
        <td style="padding: 8px; border: 1px solid #333;">Buscar un n√∫mero en una lista.</td>
        <td style="padding: 8px; border: 1px solid #333;">Introducir el control de salida.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Validaci√≥n iterativa</td>
        <td style="padding: 8px; border: 1px solid #333;">Repite lecturas hasta recibir datos v√°lidos.</td>
        <td style="padding: 8px; border: 1px solid #333;">Ingreso de edades o contrase√±as.</td>
        <td style="padding: 8px; border: 1px solid #333;">Ense√±ar validaci√≥n de datos y control de errores.</td>
      </tr>
    </tbody>
  </table>

  <h4 style="color: #00ffff; font-size: 17px;">üíª Ejemplo A ‚Äî Contar impares en una lista</h4>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo ContarImpares
    Definir n, i, valor, contador Como Entero
    Escribir "¬øCu√°ntos valores ingresar√°?"
    Leer n
    contador &lt;- 0
    Para i &lt;- 1 Hasta n Hacer
        Escribir "Ingrese valor ", i, ":"
        Leer valor
        Si valor % 2 &lt;&gt; 0 Entonces
            contador &lt;- contador + 1
        FinSi
    FinPara
    Escribir "Cantidad de impares: ", contador
FinAlgoritmo
  </pre>

  <p>
    En este ejemplo se utiliza un bucle <strong>Para</strong> combinado con una condici√≥n interna para filtrar los n√∫meros impares.
    Como explican Castillo y Vargas (2021), este tipo de combinaciones ayuda a los estudiantes a comprender c√≥mo los criterios l√≥gicos determinan el comportamiento de los algoritmos dentro de repeticiones controladas.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Ejemplo B ‚Äî Validar entrada dentro de un bucle</h4>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo LeerEdadValida
    Definir edad Como Entero
    Mientras Verdadero Hacer
        Escribir "Ingrese edad (0‚Äì120):"
        Leer edad
        Si edad &gt;= 0 Y edad &lt;= 120 Entonces
            SalirMientras
        SiNo
            Escribir "Entrada inv√°lida. Intente de nuevo."
        FinSi
    FinMientras
    Escribir "Edad v√°lida: ", edad
FinAlgoritmo
  </pre>

  <p>
    Este algoritmo combina iteraci√≥n indefinida (<strong>Mientras Verdadero</strong>) con una condici√≥n de validaci√≥n interna.
    El uso de una instrucci√≥n de salida controlada (<strong>SalirMientras</strong>) o de una bandera l√≥gica previene los bucles infinitos.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> Ejercicio integrador ‚Äî An√°lisis de calificaciones</h4>

  <p><strong>Enunciado:</strong><br>
  Dado un conjunto de <strong>n</strong> calificaciones (0‚Äì100), calcular:
  </p>
  <ul>
    <li>Promedio general.</li>
    <li>N√∫mero de aprobados (‚â•60).</li>
    <li>N√∫mero de sobresalientes (‚â•90).</li>
    <li>Detectar si existe alguna nota inv√°lida (fuera de rango) y reportar el caso.</li>
  </ul>

  <p><strong>Estrategia:</strong><br>
  Usar un bucle <strong>Para</strong> para recorrer las calificaciones, emplear condicionales anidados para validar y contar, y una bandera l√≥gica para detectar valores inv√°lidos.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo EstadisticaNotas
    Definir n, i, nota Como Entero
    Definir suma, promedio Como Real
    Definir aprobados, sobresalientes Como Entero
    Definir hayInvalidas Como Logico

    Escribir "Ingrese n:"
    Leer n
    suma &lt;- 0
    aprobados &lt;- 0
    sobresalientes &lt;- 0
    hayInvalidas &lt;- Falso

    Para i &lt;- 1 Hasta n Hacer
        Escribir "Ingrese nota ", i, ":"
        Leer nota
        Si nota &lt; 0 O nota &gt; 100 Entonces
            hayInvalidas &lt;- Verdadero
        SiNo
            suma &lt;- suma + nota
            Si nota &gt;= 60 Entonces
                aprobados &lt;- aprobados + 1
            FinSi
            Si nota &gt;= 90 Entonces
                sobresalientes &lt;- sobresalientes + 1
            FinSi
        FinSi
    FinPara

    Si hayInvalidas Entonces
        Escribir "Existen notas inv√°lidas. Verifique con el docente."
    SiNo
        promedio &lt;- suma / n
        Escribir "Promedio: ", promedio
        Escribir "Aprobados: ", aprobados
        Escribir "Sobresalientes: ", sobresalientes
    FinSi
FinAlgoritmo
  </pre>

  <p>
    Este ejemplo ilustra la interacci√≥n de estructuras m√∫ltiples (bucle, condicionales y banderas), promoviendo la comprensi√≥n del flujo l√≥gico completo de un programa.
    Seg√∫n Ramos y L√≥pez (2024), los ejercicios que combinan estructuras son clave para el desarrollo del pensamiento algor√≠tmico avanzado, ya que exigen una planificaci√≥n mental m√°s profunda del proceso de ejecuci√≥n.
  </p>

  <h4 style="color: #00ffff; font-size: 17px;"> An√°lisis pedag√≥gico y buenas pr√°cticas</h4>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Pr√°ctica recomendada</th>
        <th style="padding: 8px; border: 1px solid #333;">Descripci√≥n</th>
        <th style="padding: 8px; border: 1px solid #333;">Beneficio</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Usar banderas l√≥gicas</td>
        <td style="padding: 8px; border: 1px solid #333;">Facilita controlar eventos excepcionales dentro del bucle.</td>
        <td style="padding: 8px; border: 1px solid #333;">Mejora la claridad y evita bucles infinitos.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Introducir trazas con ‚ÄúEscribir‚Äù</td>
        <td style="padding: 8px; border: 1px solid #333;">Permite seguir la ejecuci√≥n del ciclo.</td>
        <td style="padding: 8px; border: 1px solid #333;">Fomenta la depuraci√≥n y autoevaluaci√≥n.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Separar condiciones</td>
        <td style="padding: 8px; border: 1px solid #333;">Evaluar una condici√≥n por l√≠nea (evitar anidar en exceso).</td>
        <td style="padding: 8px; border: 1px solid #333;">Incrementa la legibilidad y comprensi√≥n.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Comentar los pasos del bucle</td>
        <td style="padding: 8px; border: 1px solid #333;">Documentar el prop√≥sito de cada condici√≥n.</td>
        <td style="padding: 8px; border: 1px solid #333;">Desarrolla buenas pr√°cticas de programaci√≥n.</td>
      </tr>
    </tbody>
  </table>

  <p>
    La combinaci√≥n de bucles y condicionales constituye la columna vertebral del control de flujo en la programaci√≥n estructurada. Ense√±ar su uso mediante ejemplos contextualizados y graduales permite a los estudiantes desarrollar un pensamiento l√≥gico robusto y adaptable.
  </p>

  <p>
    Como destacan Villalobos y Ponce (2022), la ense√±anza de estructuras anidadas fomenta la capacidad de ‚Äúrazonar dentro del tiempo del algoritmo‚Äù, es decir, prever el comportamiento del programa a lo largo de sus iteraciones y decisiones.
  </p>

</section>

    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 18px;">10. Errores comunes, consejos de depuraci√≥n y estrategias did√°cticas</h3>

  <h4 style="color: #00ffff; font-size: 17px;">1. Errores t√≠picos (descripci√≥n y efectos)</h4>

  <table style="width: 100%; border-collapse: collapse; background-color: #1f1f1f; margin-top: 10px; margin-bottom: 15px;">
    <thead>
      <tr style="background-color: #2a2a2a;">
        <th style="padding: 8px; border: 1px solid #333;">Error</th>
        <th style="padding: 8px; border: 1px solid #333;">Qu√© ocurre</th>
        <th style="padding: 8px; border: 1px solid #333;">Consecuencia pr√°ctica</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Bucle infinito por falta de actualizaci√≥n de la variable de control</td>
        <td style="padding: 8px; border: 1px solid #333;">La condici√≥n de paro nunca cambia porque la variable que la afecta no se modifica.</td>
        <td style="padding: 8px; border: 1px solid #333;">El programa no termina; consume CPU; el alumno no obtiene salida.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Off-by-one (errores de l√≠mite)</td>
        <td style="padding: 8px; border: 1px solid #333;">Confusi√≥n entre &lt;= y &lt;, o entre √≠ndices que inician en 0 vs 1.</td>
        <td style="padding: 8px; border: 1px solid #333;">Se procesan una iteraci√≥n de m√°s o de menos, resultados incorrectos.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Modificar la variable de iteraci√≥n dentro del cuerpo</td>
        <td style="padding: 8px; border: 1px solid #333;">Reasignar la variable de control manualmente dentro del bucle.</td>
        <td style="padding: 8px; border: 1px solid #333;">Comportamiento impredecible o salto de iteraciones; dif√≠cil de depurar.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">Lectura/escritura mal ubicadas (centinela)</td>
        <td style="padding: 8px; border: 1px solid #333;">Posicionar <i>Leer</i> s√≥lo dentro del bucle sin inicializaci√≥n previa (o viceversa).</td>
        <td style="padding: 8px; border: 1px solid #333;">Bucle infinito o p√©rdida de primer dato; flujo err√°tico.</td>
      </tr>
      <tr>
        <td style="padding: 8px; border: 1px solid #333;">No manejar caso vac√≠o (n = 0) o contador = 0 antes de divisi√≥n</td>
        <td style="padding: 8px; border: 1px solid #333;">No validar que haya datos antes de dividir por el contador.</td>
        <td style="padding: 8px; border: 1px solid #333;">Divisi√≥n por cero o resultados indefinidos.</td>
      </tr>
    </tbody>
  </table>

  <p>
    <strong>Comentario pedag√≥gico:</strong> estos errores son frecuentes en cursos introductorios; explicarlos con ejemplos intencionalmente defectuosos produce aprendizaje m√°s profundo (G√≥mez & Paredes, 2023).
  </p>

  <h4 style="color: #00ffff; font-size: 17px;">2. Demostraciones de errores en PSeInt (ejemplos y correcciones)</h4>

  <p><strong>A. Bucle infinito (error): olvido de la actualizaci√≥n</strong></p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Algoritmo InfinitoError
    Definir i Como Entero
    i &lt;- 1
    Mientras i &lt;= 3 Hacer
        Escribir "Iteracion: ", i
        // i &lt;- i + 1  &lt;- olvidado provoca bucle infinito
    FinMientras
FinAlgoritmo
  </pre>
  <p><strong>Correcci√≥n:</strong> a√±adir <code>i &lt;- i + 1</code> dentro del cuerpo.</p>

  <p><strong>B. Off-by-one (error con l√≠mites)</strong></p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
// Error: falta el '=' provoca que N no se incluya
Para i &lt;- 1 Hasta N-1 Hacer
    suma &lt;- suma + i
FinPara
  </pre>
  <p><strong>Correcci√≥n:</strong> usar <code>Para i &lt;- 1 Hasta N Hacer</code> o ajustar la condici√≥n en un <code>Mientras</code>.</p>

  <p><strong>C. Lectura mal ubicada (centinela)</strong></p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
// Error: no hay lectura previa; condici√≥n depende de un valor no inicializado
Escribir "Ingrese n√∫meros (0 termina):"
Mientras n &lt;&gt; 0 Hacer
    Leer n
    suma &lt;- suma + n
FinMientras
  </pre>
  <p><strong>Correcci√≥n (patr√≥n seguro):</strong></p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
Leer n
Mientras n &lt;&gt; 0 Hacer
    suma &lt;- suma + n
    Leer n
FinMientras
  </pre>

  <p><strong>D. Divisi√≥n por cero (no manejar caso vac√≠o)</strong></p>
  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; text-align: center; font-family: 'Courier New', monospace; overflow-x: auto;">
// Error: si n=0, contador=0 ‚Üí divisi√≥n por cero
promedio &lt;- suma / contador
  </pre>
  <p><strong>Correcci√≥n:</strong> verificar <code>Si contador = 0 Entonces</code> ‚Üí avisar ‚Äúno hay datos‚Äù.</p>

  <h4 style="color: #00ffff; font-size: 17px;">3. T√©cnicas de depuraci√≥n eficaces</h4>
  <ul>
    <li><strong>Ejecuci√≥n paso a paso (F8 en PSeInt):</strong> observar evaluaci√≥n de condiciones y cambios de variables antes y despu√©s de cada instrucci√≥n (Rojas, 2022).</li>
    <li><strong>Trazas intermedias:</strong> insertar <code>Escribir</code> para imprimir variables clave dentro del bucle, por ejemplo: <code>Escribir "i=", i, " suma=", suma</code>.</li>
    <li><strong>Pruebas m√≠nimas y escalonadas:</strong> probar con N = 1, N = 2, N = 3 antes de pruebas masivas; detectar off-by-one y condiciones l√≠mite.</li>
    <li><strong>Verificar invariantes:</strong> formular una invariante sencilla (p. ej., ‚Äúsuma = suma de elementos procesados hasta i‚àí1‚Äù).</li>
    <li><strong>Pruebas l√≠mite:</strong> asegurar entradas 0, 1, m√°ximos, negativos o vac√≠os.</li>
    <li><strong>Variables bandera (flags):</strong> usar banderas l√≥gicas para controlar salidas y condiciones especiales.</li>
    <li><strong>Simulaci√≥n manual:</strong> realizar 2‚Äì3 iteraciones en papel para predecir el resultado.</li>
    <li><strong>Comentarios y nombres claros:</strong> usar nombres descriptivos como <i>contador</i> o <i>suma</i> para facilitar el rastreo.</li>
  </ul>
  <p>
    Estas pr√°cticas fomentan la autorregulaci√≥n y la metacognici√≥n del estudiante (Brackmann et al., 2021).
  </p>

  <h4 style="color: #00ffff; font-size: 17px;">4. Estrategias did√°cticas (c√≥mo ense√±ar y practicar)</h4>
  <ul>
    <li><strong>A. Modelado guiado:</strong> el docente escribe un bucle en la pizarra y ejecuta manualmente las primeras iteraciones mostrando las variables. Tambi√©n muestra una versi√≥n err√≥nea para detectar la falla.</li>
    <li><strong>B. Par√©ntesis de comprensi√≥n:</strong> pedir a los estudiantes que describan en palabras qu√© hace el bucle y cu√°ndo termina antes de codificarlo.</li>
    <li><strong>C. Errores deliberados:</strong> entregar c√≥digos con errores intencionales y pedir a los alumnos corregirlos y justificar la correcci√≥n.</li>
    <li><strong>D. Refactorizaci√≥n guiada:</strong> transformar un <i>Mientras</i> en <i>Para</i> y viceversa; comparar legibilidad y robustez.</li>
    <li><strong>E. Evaluaci√≥n por pares:</strong> los estudiantes intercambian c√≥digos y los revisan con r√∫bricas (manejo de errores, documentaci√≥n, l√≥gica).</li>
    <li><strong>F. Actividades autoguiadas de trazado:</strong> completar tablas con valores de variables durante las primeras iteraciones.</li>
  </ul>

  <h4 style="color: #00ffff; font-size: 17px;">5. Plantilla de comprobaci√≥n r√°pida (checklist)</h4>

  <ul>
    <li>¬øInicialic√© todas las variables de control?</li>
    <li>¬øLa condici√≥n de paro est√° bien formulada (incluye casos l√≠mite)?</li>
    <li>¬øActualizo la variable de control dentro del bucle?</li>
    <li>¬øHe considerado el caso n = 0 o vac√≠o?</li>
    <li>¬øHay trazas suficientes para depuraci√≥n (temporales)?</li>
    <li>¬øPuedo simular manualmente 2‚Äì3 iteraciones con valores de ejemplo?</li>
  </ul>

  <p>
    Usar esta lista reduce la incidencia de errores comunes en pr√°cticas y proyectos (G√≥mez & Paredes, 2023).
  </p>

</section>

    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 18px;">üé• Videos educativos</h3>

  <p>
    <strong>Estructuras de Control: REPETITIVAS - Aprende a Usar ‚Ä¶</strong> (n.d.). 
    <i>Estructuras de Control: REPETITIVAS ‚Äì Aprende a Usar ‚Ä¶</i> [Video]. 
    YouTube. 
    <a href="https://www.youtube.com/watch?v=-IULnVYa9dw" target="_blank" style="color: #66ccff; text-decoration: underline;">
      https://www.youtube.com/watch?v=-IULnVYa9dw
    </a>
  </p>

  <h3 style="color: #00ffff; font-size: 18px;">üìò Gu√≠as interactivas y materiales en l√≠nea</h3>

  <p>
    <strong>Estructuras de control iterativas ‚Äî Gu√≠a de estudio (UNR)</strong>. (s. f.). 
    <i>Estructuras de control iterativas.</i> 
    Universidad Nacional de Rosario. 
    Recuperado de 
    <a href="https://mpru.github.io/introprog/estructuras-de-control.html" target="_blank" style="color: #66ccff; text-decoration: underline;">
      https://mpru.github.io/introprog/estructuras-de-control.html
    </a>
  </p>

  <p>
    <strong>Para: Estructura de control repetitiva (PSeIntLab)</strong>. (2024, noviembre 6). 
    <i>Para: Estructura de control repetitiva.</i> 
    Recuperado de 
    <a href="https://pseintlab.com/para-estructura-control-repetitiva/" target="_blank" style="color: #66ccff; text-decoration: underline;">
      https://pseintlab.com/para-estructura-control-repetitiva/
    </a>
  </p>

</section>

    
    
    `,
    ejemplos: `
    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.6;">

  <h2 style="color: #00ffff; font-size: 18px;">üîÅ Ejercicios</h2>

  <p>Las estructuras repetitivas permiten ejecutar un conjunto de instrucciones varias veces, ya sea hasta cumplir una condici√≥n o durante un n√∫mero determinado de iteraciones. En <strong>PSeInt</strong>, los bucles m√°s comunes son <strong>Mientras</strong>, <strong>Para</strong> y <strong>Repetir...Hasta Que</strong>, los cuales facilitan automatizar tareas y procesar grandes vol√∫menes de datos de manera sistem√°tica.</p>

  <p>Dominar estas estructuras es esencial para comprender la l√≥gica de control en programaci√≥n, desarrollar pensamiento algor√≠tmico y optimizar los procesos dentro de un programa.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 1: Contador simple (Nivel b√°sico)</h3>
  <p><strong>Planteamiento del problema:</strong> Dise√±ar un algoritmo que muestre los n√∫meros del 1 al 5 en pantalla, uno por l√≠nea.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ContarHastaCinco
    Definir i Como Entero
    i <- 1
    Mientras i <= 5 Hacer
        Escribir "N√∫mero: ", i
        i <- i + 1
    FinMientras
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Se aplica una estructura <strong>Mientras</strong> para ejecutar el bloque repetidamente mientras la condici√≥n sea verdadera.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 2: Suma de los primeros N n√∫meros (Nivel b√°sico-intermedio)</h3>
  <p><strong>Planteamiento del problema:</strong> Crear un algoritmo que lea un n√∫mero N y calcule la suma de todos los n√∫meros naturales desde 1 hasta N.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo SumaHastaN
    Definir N, i, suma Como Entero
    suma <- 0
    Escribir "Ingrese un n√∫mero N:"
    Leer N
    Para i <- 1 Hasta N Hacer
        suma <- suma + i
    FinPara
    Escribir "La suma total es: ", suma
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Se utiliza el bucle <strong>Para</strong>, ideal cuando se conoce el n√∫mero exacto de repeticiones.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 3: Tabla de multiplicar (Nivel intermedio)</h3>
  <p><strong>Planteamiento del problema:</strong> Dise√±ar un algoritmo que muestre la tabla de multiplicar de un n√∫mero ingresado por el usuario (del 1 al 12).</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo TablaMultiplicar
    Definir n, i Como Entero
    Escribir "Ingrese un n√∫mero:"
    Leer n
    Para i <- 1 Hasta 12 Hacer
        Escribir n, " x ", i, " = ", n * i
    FinPara
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> El uso de un ciclo <strong>Para</strong> permite automatizar c√°lculos repetitivos, evitando escribir m√∫ltiples l√≠neas similares.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 4: Promedio de notas (Nivel intermedio)</h3>
  <p><strong>Planteamiento del problema:</strong> Crear un algoritmo que permita ingresar una cantidad indefinida de notas y calcule el promedio. La lectura termina cuando el usuario ingresa un n√∫mero negativo.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo PromedioNotas
    Definir nota, suma, contador Como Real
    suma <- 0
    contador <- 0
    Escribir "Ingrese notas (negativa para terminar):"
    Leer nota
    Mientras nota >= 0 Hacer
        suma <- suma + nota
        contador <- contador + 1
        Leer nota
    FinMientras
    Escribir "Promedio: ", suma / contador
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Se usa el patr√≥n de <strong>bucle controlado por centinela</strong>, √∫til para procesar entradas indefinidas.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 5: C√°lculo de factorial (Nivel intermedio-avanzado)</h3>
  <p><strong>Planteamiento del problema:</strong> Dise√±ar un algoritmo que calcule el factorial de un n√∫mero entero ingresado por el usuario.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo Factorial
    Definir n, i, fact Como Entero
    Escribir "Ingrese un n√∫mero:"
    Leer n
    fact <- 1
    Para i <- 1 Hasta n Hacer
        fact <- fact * i
    FinPara
    Escribir "El factorial de ", n, " es ", fact
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> El factorial se obtiene multiplicando todos los n√∫meros enteros positivos hasta N. Este algoritmo combina <strong>acumuladores</strong> y bucles <strong>Para</strong>.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 6: Promedio y conteo de aprobados (Nivel avanzado)</h3>
  <p><strong>Planteamiento del problema:</strong> Crear un algoritmo que lea las calificaciones de varios estudiantes, calcule el promedio general y determine cu√°ntos aprobaron (nota ‚â• 11). Finaliza cuando el usuario ingrese 0 como n√∫mero de estudiantes.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo AnalisisNotas
    Definir n, i, nota, aprobados, suma Como Real
    suma <- 0
    aprobados <- 0
    Escribir "Ingrese la cantidad de estudiantes:"
    Leer n
    Si n > 0 Entonces
        Para i <- 1 Hasta n Hacer
            Escribir "Nota del estudiante ", i, ":"
            Leer nota
            suma <- suma + nota
            Si nota >= 11 Entonces
                aprobados <- aprobados + 1
            FinSi
        FinPara
        Escribir "Promedio general: ", suma / n
        Escribir "Cantidad de aprobados: ", aprobados
    Sino
        Escribir "Cantidad inv√°lida."
    FinSi
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Se combinan estructuras <strong>Para</strong> y <strong>Si...Entonces</strong>, demostrando el uso de <strong>control doble</strong> (repetici√≥n + decisi√≥n).</p>

</section>

    
    
    
    
    
    
    
    
    
    
    
    
    `,
    quiz: `<p><strong>Quiz:</strong> Preguntas sobre arreglos y vectores.</p>`
  },
  pseint5: {
    objetivo: `<p><strong>Objetivo:</strong> Implementar funciones y procedimientos en PSeInt.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> </p>
    
    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 20px;">1. ¬øQu√© es la programaci√≥n estructurada?</h3>

  <p>
    En el contexto de la programaci√≥n estructurada, uno de los pilares fundamentales es la <strong>modularidad</strong>, es decir, la capacidad de dividir un problema complejo en partes m√°s peque√±as, independientes y comprensibles llamadas <em>m√≥dulos</em> o <em>subprogramas</em>. Dentro de este enfoque, los <strong>procedimientos</strong> y las <strong>funciones</strong> son las herramientas principales que permiten aplicar dicho principio de manera efectiva.
  </p>

  <h4 style="color: #00ffff;">- Definici√≥n y prop√≥sito</h4>
  <p>
    Una funci√≥n o un procedimiento es un bloque de instrucciones que se define una sola vez y puede invocarse o llamarse m√∫ltiples veces desde diferentes puntos del programa. Su prop√≥sito principal es organizar el c√≥digo, reducir la repetici√≥n, mejorar la claridad y facilitar el mantenimiento del software.
  </p>

  <p>
    De esta manera, el programador puede concentrarse en resolver problemas espec√≠ficos dentro de subrutinas peque√±as, mientras que el programa principal se encarga de coordinar la ejecuci√≥n general. Esto se alinea con el concepto de <em>divide y vencer√°s</em>, ampliamente utilizado en el dise√±o algor√≠tmico.
  </p>

  <p>
    Seg√∫n Pressman y Maxim (2020), ‚Äúla modularidad permite gestionar la complejidad al dividir un sistema en componentes que pueden desarrollarse, probarse y entenderse de manera independiente‚Äù (p. 78).
  </p>

  <h4 style="color: #00ffff;">- Funciones y procedimientos en PSeInt</h4>
  <p>
    En el entorno educativo de <strong>PSeInt</strong>, las funciones y los procedimientos ayudan a los estudiantes a comprender de forma pr√°ctica c√≥mo dividir un algoritmo en partes m√°s manejables y con responsabilidades bien definidas.
  </p>

  <p>
    Un <strong>procedimiento</strong> (denominado en PSeInt como <code>SubProceso</code>) realiza una acci√≥n concreta, como mostrar un mensaje, leer un valor o ejecutar una serie de pasos, sin devolver un resultado directo.
  </p>

  <p>
    Una <strong>funci√≥n</strong> (definida con la palabra reservada <code>Funcion</code>) realiza un c√°lculo o procesamiento de datos y devuelve un valor a la parte del programa que la llam√≥, utilizando la palabra clave <code>Retornar</code> o una asignaci√≥n al nombre de la funci√≥n.
  </p>

  <h4 style="color: #00ffff;">- Importancia pedag√≥gica y conceptual</h4>
  <p>
    Desde el punto de vista did√°ctico, ense√±ar funciones y procedimientos en pseudoc√≥digo promueve una comprensi√≥n progresiva del pensamiento computacional.
  </p>

  <blockquote style="border-left: 3px solid #00ffff; padding-left: 12px; margin-left: 0;">
    ‚ÄúLa modularizaci√≥n del c√≥digo, mediante funciones y procedimientos, permite que los estudiantes desarrollen habilidades cognitivas superiores como la planificaci√≥n, la abstracci√≥n y la resoluci√≥n jer√°rquica de problemas.‚Äù
    ‚Äî (Rodr√≠guez & Torres, 2023, p. 52)
  </blockquote>

  <h4 style="color: #00ffff;">- Ejemplo conceptual</h4>

  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap; margin-top: 10px;">
Funcion area <- CalcularArea(base, altura)
    area <- base * altura
FinFuncion

SubProceso MostrarResultado(a)
    Escribir "El √°rea del rect√°ngulo es: ", a
FinSubProceso

Algoritmo Principal
    Definir b, h, resultado Como Real
    Escribir "Ingrese base:"
    Leer b
    Escribir "Ingrese altura:"
    Leer h
    resultado <- CalcularArea(b, h)
    Llamar MostrarResultado(resultado)
FinAlgoritmo
  </div>

  <p>
    Este ejemplo evidencia c√≥mo los subprogramas permiten organizar el algoritmo en partes independientes:
    <br>‚Ä¢ <strong>CalcularArea</strong> ‚Üí realiza un c√°lculo matem√°tico (funci√≥n).
    <br>‚Ä¢ <strong>MostrarResultado</strong> ‚Üí presenta la informaci√≥n al usuario (procedimiento).
    <br>‚Ä¢ <strong>Principal</strong> ‚Üí coordina el flujo de ejecuci√≥n.
  </p>

  <h4 style="color: #00ffff;">- Ventajas de usar funciones y procedimientos</h4>

  <table style="border-collapse: collapse; width: 100%; margin-top: 8px;">
    <tr style="background-color: #111;">
      <th style="border: 1px solid #333; padding: 6px;">Ventaja</th>
      <th style="border: 1px solid #333; padding: 6px;">Descripci√≥n</th>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Reutilizaci√≥n del c√≥digo</td>
      <td style="border: 1px solid #333; padding: 6px;">Un subprograma puede usarse varias veces sin volver a escribir el mismo bloque.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Mantenimiento m√°s simple</td>
      <td style="border: 1px solid #333; padding: 6px;">Si hay un error, solo se corrige en el subprograma, no en todo el programa.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Claridad y legibilidad</td>
      <td style="border: 1px solid #333; padding: 6px;">El programa principal se vuelve m√°s corto y f√°cil de entender.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Trabajo en equipo</td>
      <td style="border: 1px solid #333; padding: 6px;">Cada integrante puede desarrollar una funci√≥n o procedimiento distinto.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Pruebas unitarias</td>
      <td style="border: 1px solid #333; padding: 6px;">Se pueden probar funciones por separado antes de integrarlas.</td>
    </tr>
  </table>

  <h4 style="color: #00ffff;">- Analog√≠a pr√°ctica</h4>
  <p>
    Podemos imaginar un programa como una <strong>f√°brica</strong>:
    <br>‚Ä¢ Cada procedimiento ser√≠a una m√°quina que realiza una tarea espec√≠fica (por ejemplo, ensamblar una pieza).  
    <br>‚Ä¢ Cada funci√≥n ser√≠a una m√°quina que produce un resultado (por ejemplo, calcular el peso final del producto).  
    <br>‚Ä¢ El programa principal ser√≠a el supervisor que coordina el trabajo de todas las m√°quinas para obtener el producto final.
  </p>

  <p>
    Las funciones y procedimientos constituyen un paso clave entre la programaci√≥n lineal y la programaci√≥n estructurada modular. Permiten dise√±ar algoritmos escalables, comprensibles y reutilizables, lo que se traduce en mejores pr√°cticas de programaci√≥n y en una comprensi√≥n m√°s profunda de la l√≥gica computacional.
  </p>

  <p>
    Seg√∫n Sierra (2021), ‚Äúla ense√±anza de subprogramas en pseudoc√≥digo representa un punto de inflexi√≥n en la formaci√≥n de los programadores, pues introduce de forma temprana el pensamiento modular y el dise√±o estructurado de algoritmos‚Äù.
  </p>

</section>

<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 20px;">2. Sintaxis en PSeInt</h3>

  <p>
    En <strong>PSeInt</strong>, tanto las funciones como los procedimientos se definen mediante una sintaxis sencilla y comprensible para los principiantes. Esto facilita al estudiante centrarse en la l√≥gica algor√≠tmica m√°s que en la complejidad de la sintaxis propia de los lenguajes de programaci√≥n reales.
  </p>

  <h4 style="color: #00ffff;">- Procedimiento</h4>
  <p>
    El procedimiento (<code>SubProceso</code>) ejecuta un conjunto de acciones, pero no devuelve un valor.  
    Su estructura general es la siguiente:
  </p>

  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap;">
SubProceso &lt;nombre&gt; (&lt;par√°metros&gt;)
    &lt;instrucciones&gt;
FinSubProceso
  </div>

  <p><strong>Ejemplo:</strong></p>
  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap;">
SubProceso MostrarMensaje(nombre)
    Escribir "Bienvenido, ", nombre
FinSubProceso
  </div>

  <h4 style="color: #00ffff;">- Funci√≥n</h4>
  <p>
    Una funci√≥n realiza un c√°lculo y devuelve un valor.  
    En PSeInt, se declara indicando el tipo de valor que retornar√° y la palabra clave <code>Retornar</code> o asignando el valor a la variable con el mismo nombre que la funci√≥n.
  </p>

  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap;">
Funcion &lt;tipo&gt; &lt;- &lt;nombre&gt; (&lt;par√°metros&gt;)
    &lt;instrucciones&gt;
    &lt;tipo&gt; &lt;- &lt;valor_a_devolver&gt;
FinFuncion
  </div>

  <p><strong>Ejemplo:</strong></p>
  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap;">
Funcion area &lt;- CalcularArea(base, altura)
    area &lt;- base * altura
FinFuncion
  </div>

  <p> La variable <strong>area</strong> es el resultado que se devuelve al programa principal.</p>

  <h3 style="color: #00ffff; font-size: 20px;">3. Par√°metros: paso por valor y paso por referencia</h3>

  <p>Los par√°metros permiten enviar informaci√≥n a los subprogramas. En PSeInt, pueden transmitirse de dos maneras:</p>

  <h4 style="color: #00ffff;">- Paso por valor</h4>
  <p>
    Se env√≠a una copia del valor original.  
    Las modificaciones dentro del subprograma no afectan la variable original.  
    Se usa cuando el subprograma solo necesita leer el valor.
  </p>

  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap;">
SubProceso MostrarCuadrado(num)
    Escribir "El cuadrado es: ", num * num
FinSubProceso
  </div>

  <h4 style="color: #00ffff;">- Paso por referencia</h4>
  <p>
    Se env√≠a la direcci√≥n de memoria de la variable.  
    Las modificaciones dentro del subprograma afectan el valor original.  
    En PSeInt se declara con la palabra clave <code>Ref</code>.
  </p>

  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap;">
SubProceso Incrementar(Ref num)
    num &lt;- num + 1
FinSubProceso

Algoritmo EjemploRef
    Definir x Como Entero
    x &lt;- 10
    Llamar Incrementar(x)
    Escribir "El valor incrementado es: ", x
FinAlgoritmo
  </div>

  <p>
    <strong>Explicaci√≥n:</strong>  
    El par√°metro <code>Ref num</code> permite que el procedimiento modifique directamente la variable <strong>x</strong>.  
    Si no se usara <code>Ref</code>, el valor de <strong>x</strong> seguir√≠a siendo 10.
  </p>

  <h4 style="color: #00ffff;">Resumen comparativo</h4>
  <table style="border-collapse: collapse; width: 100%;">
    <tr style="background-color: #111;">
      <th style="border: 1px solid #333; padding: 6px;">Tipo de paso</th>
      <th style="border: 1px solid #333; padding: 6px;">Qu√© env√≠a</th>
      <th style="border: 1px solid #333; padding: 6px;">¬øModifica la variable original?</th>
      <th style="border: 1px solid #333; padding: 6px;">Uso t√≠pico</th>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Por valor</td>
      <td style="border: 1px solid #333; padding: 6px;">Copia del valor</td>
      <td style="border: 1px solid #333; padding: 6px;">‚ùå No</td>
      <td style="border: 1px solid #333; padding: 6px;">Lectura o c√°lculos temporales</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Por referencia</td>
      <td style="border: 1px solid #333; padding: 6px;">Direcci√≥n de memoria</td>
      <td style="border: 1px solid #333; padding: 6px;">‚úÖ S√≠</td>
      <td style="border: 1px solid #333; padding: 6px;">Actualizaci√≥n o intercambio de valores</td>
    </tr>
  </table>

  <h3 style="color: #00ffff; font-size: 20px;">4. Ventajas de modularizar</h3>

  <p>
    La modularizaci√≥n es una estrategia fundamental en la ense√±anza de la programaci√≥n, ya que permite descomponer un problema grande en partes m√°s simples y comprensibles.
  </p>

  <h4 style="color: #00ffff;">- Principales beneficios</h4>
  <table style="border-collapse: collapse; width: 100%;">
    <tr style="background-color: #111;">
      <th style="border: 1px solid #333; padding: 6px;">Ventaja</th>
      <th style="border: 1px solid #333; padding: 6px;">Descripci√≥n</th>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Claridad</td>
      <td style="border: 1px solid #333; padding: 6px;">Divide el programa en secciones comprensibles y manejables.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Reutilizaci√≥n</td>
      <td style="border: 1px solid #333; padding: 6px;">Un subprograma puede usarse en m√∫ltiples algoritmos.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Facilita la depuraci√≥n</td>
      <td style="border: 1px solid #333; padding: 6px;">Los errores se localizan m√°s f√°cilmente en un m√≥dulo aislado.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Pensamiento algor√≠tmico estructurado</td>
      <td style="border: 1px solid #333; padding: 6px;">Fomenta la planificaci√≥n jer√°rquica del c√≥digo.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Trabajo colaborativo</td>
      <td style="border: 1px solid #333; padding: 6px;">Permite dividir tareas entre diferentes miembros del equipo.</td>
    </tr>
  </table>

  <blockquote style="border-left: 3px solid #00ffff; padding-left: 12px; margin-top: 12px;">
    ‚ÄúLa modularizaci√≥n en pseudoc√≥digo facilita la comprensi√≥n del flujo l√≥gico y promueve el desarrollo del pensamiento computacional, al ense√±ar a los estudiantes a planificar antes de codificar.‚Äù  
    ‚Äî (Mart√≠nez & L√≥pez, 2022)
  </blockquote>

  <h3 style="color: #00ffff; font-size: 20px;">5. Ejercicio</h3>
  <p>
    <strong>Enunciado:</strong>  
    Dise√±ar un programa que calcule el promedio de N notas usando una funci√≥n, y determine si el estudiante aprueba o desaprueba usando un procedimiento.
  </p>

  <p><strong>Soluci√≥n en PSeInt:</strong></p>

  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap;">
Funcion prom &lt;- CalcularPromedio(n)
    Definir i, suma, nota Como Real
    suma &lt;- 0
    Para i &lt;- 1 Hasta n Hacer
        Escribir "Ingrese nota ", i, ":"
        Leer nota
        suma &lt;- suma + nota
    FinPara
    prom &lt;- suma / n
FinFuncion

SubProceso Evaluar(prom)
    Si prom &gt;= 60 Entonces
        Escribir "Aprobado con promedio: ", prom
    SiNo
        Escribir "Desaprobado con promedio: ", prom
    FinSi
FinSubProceso

Algoritmo Evaluacion
    Definir n Como Entero
    Definir promedio Como Real
    Escribir "¬øCu√°ntas notas ingresar√°?"
    Leer n
    promedio &lt;- CalcularPromedio(n)
    Llamar Evaluar(promedio)
FinAlgoritmo
  </div>

  <h4 style="color: #00ffff;">Explicaci√≥n paso a paso</h4>
  <ul>
    <li><strong>Funci√≥n CalcularPromedio:</strong> Lee las notas, las suma y calcula el promedio.</li>
    <li><strong>Procedimiento Evaluar:</strong> Recibe el promedio y determina si el estudiante aprueba (‚â• 60) o no.</li>
    <li><strong>Programa principal (Evaluacion):</strong> Pide el n√∫mero de notas, llama a la funci√≥n y luego al procedimiento.</li>
  </ul>

  <h4 style="color: #00ffff;">Salida esperada</h4>
  <div style="background-color: #111; border: 1px solid #333; border-radius: 8px; padding: 12px; font-family: monospace; white-space: pre-wrap;">
¬øCu√°ntas notas ingresar√°?
3
Ingrese nota 1:
80
Ingrese nota 2:
70
Ingrese nota 3:
50
Aprobado con promedio: 66.67
  </div>

  <h3 style="color: #00ffff; font-size: 20px;">6. Errores comunes y estrategias did√°cticas</h3>
  <table style="border-collapse: collapse; width: 100%;">
    <tr style="background-color: #111;">
      <th style="border: 1px solid #333; padding: 6px;">Error com√∫n</th>
      <th style="border: 1px solid #333; padding: 6px;">Consejo pedag√≥gico</th>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">No devolver valor en una funci√≥n</td>
      <td style="border: 1px solid #333; padding: 6px;">Reforzar el uso de <code>Retornar</code> o asignar el valor a la variable de salida.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Llamar una funci√≥n sin capturar su valor</td>
      <td style="border: 1px solid #333; padding: 6px;">Explicar la diferencia entre invocar y asignar el resultado.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Confundir funci√≥n con procedimiento</td>
      <td style="border: 1px solid #333; padding: 6px;">Usar ejemplos comparativos y an√°lisis en clase.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Par√°metros no inicializados</td>
      <td style="border: 1px solid #333; padding: 6px;">Ense√±ar la importancia de inicializar variables antes de pasarlas.</td>
    </tr>
    <tr>
      <td style="border: 1px solid #333; padding: 6px;">Olvidar el tipo de retorno</td>
      <td style="border: 1px solid #333; padding: 6px;">Resaltar la sintaxis y el uso correcto de tipos de datos.</td>
    </tr>
  </table>

</section>

<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.6;">

  <h3 style="color: #00ffff; font-size: 20px;">üìò Gu√≠as interactivas y materiales en l√≠nea</h3>

  <p>
    <strong>Codersfree.</strong> (s.f.). <em>Introducci√≥n a las funciones en PSeInt: Potenciando la modularidad y reutilizaci√≥n de c√≥digo.</em>  
    Recuperado de  
    <a href="https://codersfree.com/posts/introduccion-a-las-funciones-en-pseint" target="_blank" style="color: #00ffff; text-decoration: none;">https://codersfree.com/posts/introduccion-a-las-funciones-en-pseint</a>
  </p>

  <p>
    <strong>Herrera, M.</strong> (s.f.). <em>Tutorial PSeInt: aprender a escribir pseudoc√≥digo.</em>  
    Recuperado de  
    <a href="https://mcherrera.dev/tutoriales/programaci√≥n/tutorial-pseint/" target="_blank" style="color: #00ffff; text-decoration: none;">https://mcherrera.dev/tutoriales/programaci√≥n/tutorial-pseint/</a>
  </p>

  <p>
    <strong>PSeInt.</strong> (s.f.). <em>Ejemplos de algoritmos y pr√°cticas guiadas.</em>  
    Recuperado de  
    <a href="https://pseint.sourceforge.net/index.php?page=ejemplos.php" target="_blank" style="color: #00ffff; text-decoration: none;">https://pseint.sourceforge.net/index.php?page=ejemplos.php</a>
  </p>

  <h3 style="color: #00ffff; font-size: 20px; margin-top: 30px;">üé• Videos educativos</h3>

  <p>
    <strong>Programaci√≥n F√°cil.</strong> (2023). <em>Procedimientos y funciones en PSeInt ‚Äì uso de par√°metros por valor</em> [Video].  
    Recuperado de  
    <a href="https://www.youtube.com/watch?v=B-iuVThAgvA" target="_blank" style="color: #00ffff; text-decoration: none;">https://www.youtube.com/watch?v=B-iuVThAgvA</a>
  </p>

</section>


`,
    ejemplos: `<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.6;">

  <h2 style="color: #00ffff; font-size: 18px;"> Ejercicios pr√°cticos</h2>

  <p>El uso de funciones y procedimientos permite estructurar los algoritmos de forma modular, separando las tareas en partes m√°s simples y reutilizables. En <strong>PSeInt</strong>, esta t√©cnica ayuda a los estudiantes a comprender el flujo de ejecuci√≥n entre subprogramas y el programa principal, fomentando la claridad y la reutilizaci√≥n del c√≥digo.</p>

  <p>Los siguientes ejercicios muestran c√≥mo aplicar funciones y procedimientos en distintos niveles de complejidad, desde c√°lculos simples hasta el uso combinado de par√°metros y retorno de valores.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 1: Mostrar saludo personalizado </h3>
  <p><strong>Planteamiento del problema:</strong> Crear un procedimiento que reciba el nombre de un usuario y muestre un saludo personalizado.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
SubProceso Saludar(nombre)
    Escribir "¬°Hola, ", nombre, "! Bienvenido al sistema."
FinSubProceso

Algoritmo Principal
    Definir nom Como Cadena
    Escribir "Ingrese su nombre:"
    Leer nom
    Llamar Saludar(nom)
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Se introduce el uso de un procedimiento simple con par√°metro, reforzando el concepto de modularidad b√°sica.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 2: Calcular el cuadrado de un n√∫mero </h3>
  <p><strong>Planteamiento del problema:</strong> Dise√±ar una funci√≥n que reciba un n√∫mero y devuelva su cuadrado. El programa principal debe mostrar el resultado.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Funcion resultado <- Cuadrado(num)
    resultado <- num * num
FinFuncion

Algoritmo Principal
    Definir x, r Como Real
    Escribir "Ingrese un n√∫mero:"
    Leer x
    r <- Cuadrado(x)
    Escribir "El cuadrado es: ", r
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Se aplica una funci√≥n con retorno de valor, mostrando la diferencia entre funci√≥n y procedimiento.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 3: Suma de dos n√∫meros usando subprogramas </h3>
  <p><strong>Planteamiento del problema:</strong> Crear una funci√≥n que sume dos n√∫meros y un procedimiento que muestre el resultado.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Funcion suma <- Sumar(a, b)
    suma <- a + b
FinFuncion

SubProceso MostrarResultado(total)
    Escribir "La suma total es: ", total
FinSubProceso

Algoritmo Principal
    Definir n1, n2, res Como Real
    Escribir "Ingrese dos n√∫meros:"
    Leer n1, n2
    res <- Sumar(n1, n2)
    Llamar MostrarResultado(res)
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Este ejercicio integra una funci√≥n y un procedimiento, destacando c√≥mo pueden interactuar dentro del flujo principal.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 4: Determinar si un n√∫mero es par o impar </h3>
  <p><strong>Planteamiento del problema:</strong> Dise√±ar una funci√≥n que verifique si un n√∫mero es par y un procedimiento que muestre el resultado.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Funcion esPar <- VerificarPar(num)
    Si num MOD 2 = 0 Entonces
        esPar <- Verdadero
    Sino
        esPar <- Falso
    FinSi
FinFuncion

SubProceso MostrarResultado(num, esPar)
    Si esPar Entonces
        Escribir num, " es un n√∫mero par."
    Sino
        Escribir num, " es un n√∫mero impar."
    FinSi
FinSubProceso

Algoritmo Principal
    Definir n Como Entero
    Definir resultado Como Logico
    Escribir "Ingrese un n√∫mero:"
    Leer n
    resultado <- VerificarPar(n)
    Llamar MostrarResultado(n, resultado)
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Combina retorno booleano con un procedimiento para la salida, aplicando l√≥gica condicional y modularidad.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 5: Intercambio de valores con par√°metros por referencia </h3>
  <p><strong>Planteamiento del problema:</strong> Crear un procedimiento que intercambie los valores de dos variables usando el paso por referencia.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
SubProceso Intercambiar(Ref a, Ref b)
    Definir temp Como Real
    temp <- a
    a <- b
    b <- temp
FinSubProceso

Algoritmo Principal
    Definir x, y Como Real
    Escribir "Ingrese dos valores:"
    Leer x, y
    Escribir "Antes del intercambio: x = ", x, ", y = ", y
    Llamar Intercambiar(x, y)
    Escribir "Despu√©s del intercambio: x = ", x, ", y = ", y
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Este ejemplo introduce el paso de par√°metros por referencia (<strong>Ref</strong>), mostrando c√≥mo un subprograma puede modificar variables externas.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 6: C√°lculo de promedio y evaluaci√≥n de notas </h3>
  <p><strong>Planteamiento del problema:</strong> Implementar una funci√≥n que calcule el promedio de N notas y un procedimiento que determine si el estudiante aprueba (‚â•11) o desaprueba.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Funcion prom <- CalcularPromedio(n)
    Definir i, nota, suma Como Real
    suma <- 0
    Para i <- 1 Hasta n Hacer
        Escribir "Ingrese nota ", i, ":"
        Leer nota
        suma <- suma + nota
    FinPara
    prom <- suma / n
FinFuncion

SubProceso Evaluar(prom)
    Si prom >= 11 Entonces
        Escribir "Aprobado con promedio: ", prom
    Sino
        Escribir "Desaprobado con promedio: ", prom
    FinSi
FinSubProceso

Algoritmo Evaluacion
    Definir n Como Entero
    Definir promedio Como Real
    Escribir "¬øCu√°ntas notas ingresar√°?"
    Leer n
    promedio <- CalcularPromedio(n)
    Llamar Evaluar(promedio)
FinAlgoritmo
  </pre>

  <p><em>Nota:</em> Se combinan funciones, procedimientos, bucles y condiciones, consolidando el uso modular y la interacci√≥n entre subprogramas.</p>

</section>
`,
    quiz: `<p><strong>Quiz:</strong> Evaluaci√≥n sobre funciones y procedimientos.</p>`
  },
  pseint6: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
    
    <p>   
‚úîÔ∏è Aplicar estructuras condicionales y repetitivas de manera combinada para resolver problemas pr√°cticos en PSeInt.<br>
‚úîÔ∏è Analizar y procesar conjuntos de datos mediante ciclos controlados y decisiones l√≥gicas.<br>
‚úîÔ∏è Desarrollar algoritmos eficientes que incluyan validaciones, c√°lculos y generaci√≥n de resultados autom√°ticos.<br>
    
   </p> 
    
    
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>
    
    
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.6;">

  <h2 style="color: #00ffff; font-size: 18px;"> 1. Dise√±o de men√∫s interactivos en PSeInt</h2>

  <p>Un men√∫ interactivo es una estructura de control que permite al usuario seleccionar entre varias opciones y ejecutar diferentes acciones seg√∫n su elecci√≥n. Es una herramienta fundamental en la programaci√≥n estructurada, ya que organiza las funcionalidades del programa y mejora la experiencia del usuario.</p>

  <p>En <strong>PSeInt</strong>, los men√∫s se implementan combinando estructuras condicionales y repetitivas. Por ejemplo, se puede utilizar un bucle <strong>Repetir‚Ä¶Hasta Que</strong> o <strong>Mientras‚Ä¶Hacer</strong> para mantener activo el men√∫ hasta que el usuario seleccione la opci√≥n de salir, y una estructura <strong>Segun‚Ä¶FinSegun</strong> o <strong>Si‚Ä¶Entonces‚Ä¶Sino</strong> para decidir qu√© acci√≥n realizar seg√∫n la opci√≥n elegida.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ventajas</h3>
  <ul>
    <li>Mejora la interactividad y la organizaci√≥n del programa.</li>
    <li>Facilita la comprensi√≥n del flujo del algoritmo.</li>
    <li>Permite reutilizar c√≥digo en diferentes partes del programa.</li>
    <li>Favorece la creaci√≥n de programas modulares.</li>
  </ul>

  <h3 style="color: #00ffff; font-size: 16px;">Estructura general</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo MenuInteractivo
    Definir opcion Como Entero
    Repetir
        Escribir "===== MEN√ö PRINCIPAL ====="
        Escribir "1. Opci√≥n 1"
        Escribir "2. Opci√≥n 2"
        Escribir "3. Salir"
        Escribir "Seleccione una opci√≥n:"
        Leer opcion

        Segun opcion Hacer
            Caso 1:
                // Acci√≥n para la opci√≥n 1
            Caso 2:
                // Acci√≥n para la opci√≥n 2
            Caso 3:
                Escribir "Saliendo del programa..."
            De Otro Modo:
                Escribir "Opci√≥n no v√°lida. Intente nuevamente."
        FinSegun

    Hasta Que opcion = 3
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejemplo general</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo MenuPrincipal
    Definir opcion, a, b Como Real
    Repetir
        Escribir "===== MEN√ö PRINCIPAL ====="
        Escribir "1. Sumar"
        Escribir "2. Restar"
        Escribir "3. Salir"
        Escribir "Seleccione una opci√≥n:"
        Leer opcion

        Segun opcion Hacer
            Caso 1:
                Escribir "Ingrese dos n√∫meros:"
                Leer a, b
                Escribir "Resultado: ", a + b
            Caso 2:
                Escribir "Ingrese dos n√∫meros:"
                Leer a, b
                Escribir "Resultado: ", a - b
            Caso 3:
                Escribir "Saliendo del programa..."
            De Otro Modo:
                Escribir "Opci√≥n no v√°lida. Intente nuevamente."
        FinSegun
    Hasta Que opcion = 3
FinAlgoritmo
  </pre>

  <p>En este ejemplo se utiliza un bucle <strong>Repetir‚Ä¶Hasta Que</strong> para mantener activo el men√∫, y la estructura <strong>Segun</strong> para ejecutar la acci√≥n correspondiente seg√∫n la opci√≥n seleccionada.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 1: Men√∫ b√°sico de mensajes (Nivel b√°sico)</h3>

  <p><strong>Planteamiento del problema:</strong> Crear un programa que muestre un men√∫ con tres opciones: mostrar un mensaje de bienvenida, de despedida o salir.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo MenuMensajes
    Definir opcion Como Entero
    Repetir
        Escribir "1. Bienvenida"
        Escribir "2. Despedida"
        Escribir "3. Salir"
        Escribir "Seleccione una opci√≥n:"
        Leer opcion

        Segun opcion Hacer
            Caso 1:
                Escribir "Bienvenido al sistema."
            Caso 2:
                Escribir "Gracias por usar el programa."
            Caso 3:
                Escribir "Fin del programa."
            De Otro Modo:
                Escribir "Opci√≥n inv√°lida."
        FinSegun
    Hasta Que opcion = 3
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> repetici√≥n controlada, selecci√≥n m√∫ltiple, salida condicional.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 2: Calculadora b√°sica (Nivel intermedio)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo CalculadoraBasica
    Definir opcion Como Entero
    Definir a, b Como Real
    Repetir
        Escribir "===== CALCULADORA ====="
        Escribir "1. Sumar"
        Escribir "2. Restar"
        Escribir "3. Multiplicar"
        Escribir "4. Dividir"
        Escribir "5. Salir"
        Escribir "Seleccione una opci√≥n:"
        Leer opcion

        Segun opcion Hacer
            Caso 1:
                Escribir "Ingrese dos n√∫meros:"
                Leer a, b
                Escribir "Suma = ", a + b
            Caso 2:
                Escribir "Ingrese dos n√∫meros:"
                Leer a, b
                Escribir "Resta = ", a - b
            Caso 3:
                Escribir "Ingrese dos n√∫meros:"
                Leer a, b
                Escribir "Multiplicaci√≥n = ", a * b
            Caso 4:
                Escribir "Ingrese dos n√∫meros:"
                Leer a, b
                Si b <> 0 Entonces
                    Escribir "Divisi√≥n = ", a / b
                Sino
                    Escribir "Error: no se puede dividir entre cero."
                FinSi
            Caso 5:
                Escribir "Saliendo..."
            De Otro Modo:
                Escribir "Opci√≥n no v√°lida."
        FinSegun
    Hasta Que opcion = 5
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> condicionales, operadores aritm√©ticos, control de flujo.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 3: Conversi√≥n de unidades (Nivel intermedio)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ConversionUnidades
    Definir opcion Como Entero
    Definir c, k, f, m Como Real
    Repetir
        Escribir "1. Celsius a Fahrenheit"
        Escribir "2. Kil√≥metros a Millas"
        Escribir "3. Salir"
        Escribir "Seleccione una opci√≥n:"
        Leer opcion

        Segun opcion Hacer
            Caso 1:
                Escribir "Ingrese temperatura en ¬∞C:"
                Leer c
                f <- (c * 9/5) + 32
                Escribir "Temperatura en ¬∞F: ", f
            Caso 2:
                Escribir "Ingrese distancia en kil√≥metros:"
                Leer k
                m <- k * 0.621371
                Escribir "Distancia en millas: ", m
            Caso 3:
                Escribir "Fin del programa."
            De Otro Modo:
                Escribir "Opci√≥n inv√°lida."
        FinSegun
    Hasta Que opcion = 3
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> operaciones aritm√©ticas, uso de variables reales.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 4: Men√∫ con contador (Nivel intermedio-avanzado)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo MenuContador
    Definir opcion, num, suma, contador Como Entero
    suma <- 0
    contador <- 0
    Repetir
        Escribir "1. Ingresar n√∫mero"
        Escribir "2. Mostrar cantidad ingresada"
        Escribir "3. Mostrar suma acumulada"
        Escribir "4. Salir"
        Leer opcion

        Segun opcion Hacer
            Caso 1:
                Escribir "Ingrese un n√∫mero:"
                Leer num
                suma <- suma + num
                contador <- contador + 1
            Caso 2:
                Escribir "Cantidad de n√∫meros ingresados: ", contador
            Caso 3:
                Escribir "Suma acumulada: ", suma
            Caso 4:
                Escribir "Fin del programa."
            De Otro Modo:
                Escribir "Opci√≥n no v√°lida."
        FinSegun
    Hasta Que opcion = 4
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> acumuladores, contadores, repetici√≥n controlada.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 5: Sistema de notas (Nivel avanzado)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo SistemaNotas
    Definir opcion, contador, aprobados Como Entero
    Definir nota, suma, promedio Como Real
    suma <- 0
    contador <- 0
    aprobados <- 0

    Repetir
        Escribir "1. Registrar nota"
        Escribir "2. Mostrar promedio general"
        Escribir "3. Mostrar cantidad de aprobados"
        Escribir "4. Salir"
        Leer opcion

        Segun opcion Hacer
            Caso 1:
                Escribir "Ingrese nota:"
                Leer nota
                suma <- suma + nota
                contador <- contador + 1
                Si nota >= 11 Entonces
                    aprobados <- aprobados + 1
                FinSi
            Caso 2:
                Si contador > 0 Entonces
                    promedio <- suma / contador
                    Escribir "Promedio general: ", promedio
                Sino
                    Escribir "No hay notas registradas."
                FinSi
            Caso 3:
                Escribir "Cantidad de aprobados: ", aprobados
            Caso 4:
                Escribir "Saliendo del sistema..."
            De Otro Modo:
                Escribir "Opci√≥n inv√°lida."
        FinSegun
    Hasta Que opcion = 4
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> c√°lculos promedios, contadores, condicionales anidados.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 6: Sistema de inventario b√°sico (Nivel avanzado)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo InventarioBasico
    Definir opcion, i, n Como Entero
    Definir nombre Como Cadena
    Definir precio, total Como Real
    total <- 0
    n <- 0
    Dimension productos[100], precios[100]

    Repetir
        Escribir "1. Registrar producto"
        Escribir "2. Mostrar lista de productos"
        Escribir "3. Calcular total"
        Escribir "4. Salir"
        Leer opcion

        Segun opcion Hacer
            Caso 1:
                Escribir "Ingrese nombre del producto:"
                Leer productos[n]
                Escribir "Ingrese precio:"
                Leer precios[n]
                total <- total + precios[n]
                n <- n + 1
            Caso 2:
                Si n > 0 Entonces
                    Para i <- 0 Hasta n-1 Hacer
                        Escribir productos[i], " - S/.", precios[i]
                    FinPara
                Sino
                    Escribir "No hay productos registrados."
                FinSi
            Caso 3:
                Escribir "Total acumulado: S/.", total
            Caso 4:
                Escribir "Fin del sistema."
            De Otro Modo:
                Escribir "Opci√≥n no v√°lida."
        FinSegun
    Hasta Que opcion = 4
FinAlgoritmo
  </pre>

  <p>Los men√∫s interactivos representan una de las aplicaciones m√°s pr√°cticas de la programaci√≥n estructurada en <strong>PSeInt</strong>. Permiten integrar conocimientos de variables, operadores, estructuras condicionales y repetitivas, fomentando la organizaci√≥n modular y la reutilizaci√≥n del c√≥digo.</p>

</section>
<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.6;">

  <h2 style="color: #00ffff; font-size: 18px;"> 2. Resoluci√≥n de problemas cotidianos con algoritmos</h2>

  <p>La resoluci√≥n de problemas mediante algoritmos es una de las competencias fundamentales en la programaci√≥n. Un algoritmo es una secuencia ordenada de pasos l√≥gicos que permiten solucionar un problema determinado.</p>

  <p>En la vida cotidiana, muchos procesos pueden representarse algor√≠tmicamente: calcular promedios, generar facturas, gestionar inventarios, determinar descuentos, calcular consumo de energ√≠a, entre otros.</p>

  <p>Para desarrollar un algoritmo que solucione un problema real, se siguen las siguientes etapas:</p>
  <ul>
    <li><strong>An√°lisis del problema:</strong> identificar qu√© se necesita resolver.</li>
    <li><strong>Definici√≥n de entradas y salidas:</strong> determinar qu√© datos se necesitan (entradas) y qu√© resultados se deben obtener (salidas).</li>
    <li><strong>Dise√±o del procedimiento:</strong> planificar los pasos o instrucciones que se seguir√°n para procesar los datos.</li>
    <li><strong>Implementaci√≥n:</strong> traducir el algoritmo a pseudoc√≥digo o a un lenguaje de programaci√≥n, como PSeInt.</li>
    <li><strong>Prueba y validaci√≥n:</strong> verificar que el algoritmo produce resultados correctos para distintos casos.</li>
  </ul>

  <p>Es esencial incluir validaciones de datos y mensajes claros que gu√≠en al usuario y garanticen resultados confiables.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejemplo introductorio</h3>
  <p><strong>Problema:</strong> Calcular el monto total a pagar por art√≠culos comprados.  
  Se debe ingresar la cantidad de art√≠culos y el precio unitario, luego calcular el total = cantidad √ó precio.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo CalculoCompra
    Definir cantidad Como Entero
    Definir precio, total Como Real
    Escribir "Ingrese cantidad de art√≠culos:"
    Leer cantidad
    Escribir "Ingrese precio unitario:"
    Leer precio
    total <- cantidad * precio
    Escribir "Total a pagar: S/ ", total
FinAlgoritmo
  </pre>

  <p><em>Explicaci√≥n:</em> El algoritmo solicita los datos de entrada (cantidad y precio), realiza la operaci√≥n aritm√©tica correspondiente y presenta el resultado de salida.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 1. C√°lculo de promedio de notas (Nivel b√°sico)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo PromedioNotas
    Definir n1, n2, n3, promedio Como Real
    Escribir "Ingrese tres notas:"
    Leer n1, n2, n3
    promedio <- (n1 + n2 + n3) / 3
    Escribir "Promedio: ", promedio
    Si promedio >= 11 Entonces
        Escribir "Estado: Aprobado"
    Sino
        Escribir "Estado: Desaprobado"
    FinSi
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> operaciones aritm√©ticas, estructura condicional simple.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 2. C√°lculo de descuento en una compra (Nivel b√°sico-intermedio)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo DescuentoCompra
    Definir monto, total Como Real
    Escribir "Ingrese el monto de la compra:"
    Leer monto
    Si monto >= 100 Entonces
        total <- monto - (monto * 0.10)
    Sino
        total <- monto
    FinSi
    Escribir "Monto final a pagar: S/ ", total
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> estructura condicional, operadores relacionales.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 3. C√°lculo del consumo el√©ctrico (Nivel intermedio)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ConsumoElectrico
    Definir consumo, monto Como Real
    Escribir "Ingrese consumo en kWh:"
    Leer consumo
    monto <- consumo * 0.85
    Escribir "Monto a pagar: S/ ", monto
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> multiplicaci√≥n directa, uso de constantes.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 4. C√°lculo del √≠ndice de masa corporal (IMC) (Nivel intermedio)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo CalculoIMC
    Definir peso, altura, imc Como Real
    Escribir "Ingrese su peso (kg):"
    Leer peso
    Escribir "Ingrese su altura (m):"
    Leer altura
    imc <- peso / (altura ^ 2)
    Escribir "IMC: ", imc

    Si imc < 18.5 Entonces
        Escribir "Bajo peso"
    Sino
        Si imc < 25 Entonces
            Escribir "Normal"
        Sino
            Si imc < 30 Entonces
                Escribir "Sobrepeso"
            Sino
                Escribir "Obesidad"
            FinSi
        FinSi
    FinSi
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> condicionales anidados, operadores de potencia, clasificaci√≥n por rangos.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 5. Control de inventario (Nivel avanzado)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ControlInventario
    Definir n, i Como Entero
    Definir nombre Como Cadena
    Definir precio, cantidad, total, valorTotal Como Real
    valorTotal <- 0
    Escribir "Ingrese n√∫mero de productos:"
    Leer n
    Para i <- 1 Hasta n Hacer
        Escribir "Producto ", i, ":"
        Escribir "Nombre:"
        Leer nombre
        Escribir "Precio unitario:"
        Leer precio
        Escribir "Cantidad en stock:"
        Leer cantidad
        total <- precio * cantidad
        valorTotal <- valorTotal + total
    FinPara
    Escribir "Valor total del inventario: S/ ", valorTotal
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> bucles, acumuladores, entrada m√∫ltiple de datos.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 6. Sistema de facturaci√≥n simple (Nivel avanzado)</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo FacturacionSimple
    Definir n, i Como Entero
    Definir precio, cantidad, subtotal, total, igv Como Real
    subtotal <- 0
    Escribir "Ingrese n√∫mero de productos:"
    Leer n
    Para i <- 1 Hasta n Hacer
        Escribir "Ingrese precio del producto ", i, ":"
        Leer precio
        Escribir "Ingrese cantidad:"
        Leer cantidad
        subtotal <- subtotal + (precio * cantidad)
    FinPara
    igv <- subtotal * 0.18
    total <- subtotal + igv
    Escribir "Subtotal: S/ ", subtotal
    Escribir "IGV (18%): S/ ", igv
    Escribir "Total a pagar: S/ ", total
FinAlgoritmo
  </pre>

  <p>Resolver problemas cotidianos mediante algoritmos permite desarrollar el pensamiento l√≥gico y aplicar la programaci√≥n a situaciones reales. <strong>PSeInt</strong> facilita este proceso al permitir representar claramente los pasos, validar resultados y comprender c√≥mo los datos fluyen desde la entrada hasta la salida del programa.</p>

</section>
<section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.6;">

  <h2 style="color: #00ffff; font-size: 18px;"> 3. Integraci√≥n de estructuras condicionales y repetitivas</h2>

  <h3 style="color: #00ffff; font-size: 16px;">Teor√≠a</h3>

  <p>En la programaci√≥n estructurada, los algoritmos rara vez se limitan a ejecutar instrucciones de manera lineal. En la mayor√≠a de los casos, los programas deben repetir acciones varias veces (estructuras repetitivas) y tomar decisiones en funci√≥n de ciertas condiciones (estructuras condicionales).</p>

  <p>Cuando ambas estructuras se combinan dentro de un mismo algoritmo, se logra un control completo del flujo de ejecuci√≥n, lo que permite procesar m√∫ltiples datos, validar informaci√≥n, generar estad√≠sticas y realizar c√°lculos acumulativos o selectivos.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Conceptos clave</h3>

  <p><strong>Estructura condicional (decisi√≥n):</strong>  
  Permite que el programa elija un camino de ejecuci√≥n dependiendo de si una condici√≥n es verdadera o falsa.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Si edad >= 18 Entonces
    Escribir "Mayor de edad"
Sino
    Escribir "Menor de edad"
FinSi
  </pre>

  <p><strong>Estructura repetitiva (bucle):</strong>  
  Permite ejecutar un conjunto de instrucciones varias veces, ya sea un n√∫mero determinado de veces (Para) o mientras se cumpla una condici√≥n (Mientras o Repetir).</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Para i <- 1 Hasta 5 Hacer
    Escribir "N√∫mero: ", i
FinPara
  </pre>

  <p><strong>Integraci√≥n de ambas estructuras:</strong>  
  Dentro de un bucle se pueden incluir condiciones que afecten el flujo interno, permitiendo procesar selectivamente datos que cumplen determinados criterios.</p>

  <p>Esto es especialmente √∫til en:</p>
  <ul>
    <li>Procesamiento de listas de datos.</li>
    <li>Validaci√≥n de entradas.</li>
    <li>Contadores y acumuladores condicionados.</li>
    <li>Estad√≠sticas parciales o totales.</li>
  </ul>

  <h3 style="color: #00ffff; font-size: 16px;">Ejemplo introductorio</h3>

  <p><strong>Problema:</strong>  
  Se desea ingresar n calificaciones, calcular el promedio general y contar cu√°ntas est√°n aprobadas (nota mayor o igual a 11).</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo EstadisticaNotas
    Definir n, i, contador Como Entero
    Definir nota, suma Como Real
    Escribir "¬øCu√°ntas notas ingresar√°?"
    Leer n
    suma <- 0
    contador <- 0
    Para i <- 1 Hasta n Hacer
        Escribir "Ingrese nota ", i, ":"
        Leer nota
        suma <- suma + nota
        Si nota >= 11 Entonces
            contador <- contador + 1
        FinSi
    FinPara
    Escribir "Promedio: ", suma / n
    Escribir "Cantidad de aprobados: ", contador
FinAlgoritmo
  </pre>

  <p><em>Explicaci√≥n:</em>  
  El bucle permite ingresar varias notas, y dentro de √©l se utiliza una condici√≥n para determinar cu√°ntas cumplen el criterio de aprobaci√≥n.  
  El resultado final muestra tanto el promedio como la cantidad de estudiantes aprobados.</p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicios pr√°cticos resueltos</h3>

  <h4 style="color: #00ffff; font-size: 15px;">Ejercicio 1. Contar n√∫meros pares (Nivel b√°sico)</h4>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ContarPares
    Definir i, num, contador Como Entero
    contador <- 0
    Para i <- 1 Hasta 5 Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer num
        Si num MOD 2 = 0 Entonces
            contador <- contador + 1
        FinSi
    FinPara
    Escribir "Cantidad de n√∫meros pares: ", contador
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> bucle Para, operador m√≥dulo, condicional simple.</p>

  <h4 style="color: #00ffff; font-size: 15px;">Ejercicio 2. Suma de n√∫meros positivos (Nivel b√°sico-intermedio)</h4>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo SumaPositivos
    Definir i, num Como Entero
    Definir suma Como Real
    suma <- 0
    Para i <- 1 Hasta 10 Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer num
        Si num > 0 Entonces
            suma <- suma + num
        FinSi
    FinPara
    Escribir "La suma de los n√∫meros positivos es: ", suma
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> acumulador condicionado, selecci√≥n dentro del bucle.</p>

  <h4 style="color: #00ffff; font-size: 15px;">Ejercicio 3. Validaci√≥n de entrada (Nivel intermedio)</h4>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ValidarNota
    Definir nota Como Real
    Repetir
        Escribir "Ingrese una nota (0 - 20):"
        Leer nota
        Si nota < 0 O nota > 20 Entonces
            Escribir "Nota fuera de rango. Intente nuevamente."
        FinSi
    Hasta Que nota >= 0 Y nota <= 20
    Escribir "Nota registrada: ", nota
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> bucle Repetir...Hasta Que, condici√≥n de salida, validaci√≥n.</p>

  <h4 style="color: #00ffff; font-size: 15px;">Ejercicio 4. Contar aprobados y desaprobados (Nivel intermedio)</h4>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ContarResultados
    Definir n, i, aprobados, desaprobados Como Entero
    Definir nota Como Real
    Escribir "¬øCu√°ntas notas ingresar√°?"
    Leer n
    aprobados <- 0
    desaprobados <- 0
    Para i <- 1 Hasta n Hacer
        Escribir "Ingrese nota ", i, ":"
        Leer nota
        Si nota >= 11 Entonces
            aprobados <- aprobados + 1
        Sino
            desaprobados <- desaprobados + 1
        FinSi
    FinPara
    Escribir "Aprobados: ", aprobados
    Escribir "Desaprobados: ", desaprobados
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> bucle con bifurcaci√≥n doble (Si‚ÄìSino), contadores m√∫ltiples.</p>

  <h4 style="color: #00ffff; font-size: 15px;">Ejercicio 5. N√∫mero mayor y menor (Nivel intermedio-avanzado)</h4>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo MayorYMenor
    Definir n, i, num, mayor, menor Como Entero
    Escribir "¬øCu√°ntos n√∫meros ingresar√°?"
    Leer n
    Escribir "Ingrese n√∫mero 1:"
    Leer num
    mayor <- num
    menor <- num
    Para i <- 2 Hasta n Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer num
        Si num > mayor Entonces
            mayor <- num
        FinSi
        Si num < menor Entonces
            menor <- num
        FinSi
    FinPara
    Escribir "N√∫mero mayor: ", mayor
    Escribir "N√∫mero menor: ", menor
FinAlgoritmo
  </pre>

  <p><em>Conceptos aplicados:</em> condicionales anidadas dentro del bucle, inicializaci√≥n de variables con el primer dato.</p>

  <h4 style="color: #00ffff; font-size: 15px;">Ejercicio 6. Control de ventas (Nivel avanzado)</h4>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 10px; font-family: monospace; font-size: 14px;">
Algoritmo ControlVentas
    Definir n, i, cantidad Como Entero
    Definir precio, totalVenta, totalGeneral Como Real
    totalGeneral <- 0
    Escribir "Ingrese n√∫mero de ventas:"
    Leer n
    Para i <- 1 Hasta n Hacer
        Escribir "Venta ", i, ":"
        Escribir "Ingrese precio del producto:"
        Leer precio
        Escribir "Ingrese cantidad:"
        Leer cantidad
        totalVenta <- precio * cantidad
        Si totalVenta > 100 Entonces
            totalVenta <- totalVenta * 0.90
        FinSi
        Escribir "Total de esta venta: S/ ", totalVenta
        totalGeneral <- totalGeneral + totalVenta
    FinPara
    Escribir "Monto total de todas las ventas: S/ ", totalGeneral
FinAlgoritmo
  </pre>

  <p>La integraci√≥n de estructuras condicionales y repetitivas permite construir programas m√°s completos, capaces de adaptarse a distintos escenarios y procesar grandes vol√∫menes de datos con l√≥gica selectiva.  
  Dominar esta combinaci√≥n es un paso esencial hacia el desarrollo de algoritmos complejos, an√°lisis de datos y automatizaci√≥n de procesos.</p>

</section>

    
  
    
    
    `,
    ejemplos: `
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.6;">

  <h2 style="color: #00ffff; font-size: 18px;"> Ejemplos</h2>

  <h3 style="color: #00ffff; font-size: 16px;">Ejemplo 1: C√°lculo de aprobados</h3>
  <p><strong>Problema:</strong> Leer 5 notas, calcular el promedio y contar cu√°ntas son mayores o iguales a 11.</p>

  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ejemplo1_Aprobados
    Definir i, contador Como Entero
    Definir nota, suma Como Real
    suma <- 0
    contador <- 0
    Para i <- 1 Hasta 5 Hacer
        Escribir "Ingrese nota ", i, ":"
        Leer nota
        suma <- suma + nota
        Si nota >= 11 Entonces
            contador <- contador + 1
        FinSi
    FinPara
    Escribir "Promedio: ", suma / 5
    Escribir "Cantidad de aprobados: ", contador
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejemplo 2: N√∫meros positivos y negativos</h3>
  <p><strong>Problema:</strong> Ingresar 10 n√∫meros y determinar cu√°ntos son positivos, negativos o cero.</p>

  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ejemplo2_Signos
    Definir i, num, pos, neg, ceros Como Entero
    pos <- 0
    neg <- 0
    ceros <- 0
    Para i <- 1 Hasta 10 Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer num
        Si num > 0 Entonces
            pos <- pos + 1
        Sino
            Si num < 0 Entonces
                neg <- neg + 1
            Sino
                ceros <- ceros + 1
            FinSi
        FinSi
    FinPara
    Escribir "Positivos: ", pos
    Escribir "Negativos: ", neg
    Escribir "Ceros: ", ceros
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejemplo 3: Control de ventas</h3>
  <p><strong>Problema:</strong> Registrar varias ventas y aplicar un 10% de descuento si el total supera S/100.</p>

  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ejemplo3_Ventas
    Definir n, i, cantidad Como Entero
    Definir precio, totalVenta, totalGeneral Como Real
    totalGeneral <- 0
    Escribir "Ingrese n√∫mero de ventas:"
    Leer n
    Para i <- 1 Hasta n Hacer
        Escribir "Venta ", i, ":"
        Escribir "Ingrese precio del producto:"
        Leer precio
        Escribir "Ingrese cantidad:"
        Leer cantidad
        totalVenta <- precio * cantidad
        Si totalVenta > 100 Entonces
            totalVenta <- totalVenta * 0.9
        FinSi
        totalGeneral <- totalGeneral + totalVenta
    FinPara
    Escribir "Total general: S/ ", totalGeneral
FinAlgoritmo
  </pre>

  <h2 style="color: #00ffff; font-size: 16px;"> Ejercicios pr√°cticos resueltos</h2>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 1 : Contar n√∫meros pares</h3>
  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej1_Pares
    Definir i, num, contador Como Entero
    contador <- 0
    Para i <- 1 Hasta 5 Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer num
        Si num MOD 2 = 0 Entonces
            contador <- contador + 1
        FinSi
    FinPara
    Escribir "Cantidad de pares: ", contador
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 2 : Sumar solo los n√∫meros positivos</h3>
  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej2_SumaPositivos
    Definir i, num, suma Como Entero
    suma <- 0
    Para i <- 1 Hasta 8 Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer num
        Si num > 0 Entonces
            suma <- suma + num
        FinSi
    FinPara
    Escribir "Suma de positivos: ", suma
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 3 : Validar edades</h3>
  <p><strong>Objetivo:</strong> Pedir edades hasta que se ingrese una edad v√°lida (entre 0 y 120).</p>

  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej3_ValidarEdad
    Definir edad Como Entero
    Repetir
        Escribir "Ingrese edad (0-120):"
        Leer edad
        Si edad < 0 O edad > 120 Entonces
            Escribir "Edad inv√°lida. Intente nuevamente."
        FinSi
    Hasta Que edad >= 0 Y edad <= 120
    Escribir "Edad registrada: ", edad
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 4 : Promedio hasta ingresar -1</h3>
  <p><strong>Objetivo:</strong> Calcular promedio de notas hasta que el usuario ingrese -1.</p>

  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej4_PromedioIndeterminado
    Definir nota, suma Como Real
    Definir contador Como Entero
    suma <- 0
    contador <- 0
    Repetir
        Escribir "Ingrese nota (-1 para terminar):"
        Leer nota
        Si nota <> -1 Entonces
            suma <- suma + nota
            contador <- contador + 1
        FinSi
    Hasta Que nota = -1
    Si contador > 0 Entonces
        Escribir "Promedio: ", suma / contador
    Sino
        Escribir "No se ingresaron notas."
    FinSi
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 5 : Contar m√∫ltiplos de 3</h3>
  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej5_Multiplos3
    Definir i, num, contador Como Entero
    contador <- 0
    Para i <- 1 Hasta 7 Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer num
        Si num MOD 3 = 0 Entonces
            contador <- contador + 1
        FinSi
    FinPara
    Escribir "Cantidad de m√∫ltiplos de 3: ", contador
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 6 : Control de temperaturas</h3>
  <p><strong>Objetivo:</strong> Leer 6 temperaturas y contar cu√°ntas superan los 30 ¬∞C.</p>

  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej6_TemperaturasAltas
    Definir i, contador Como Entero
    Definir temp Como Real
    contador <- 0
    Para i <- 1 Hasta 6 Hacer
        Escribir "Ingrese temperatura ", i, ":"
        Leer temp
        Si temp > 30 Entonces
            contador <- contador + 1
        FinSi
    FinPara
    Escribir "Temperaturas mayores a 30¬∞C: ", contador
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 7: N√∫meros mayores a un umbral</h3>
  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej7_MayoresUmbral
    Definir n, i, num, contador Como Entero
    Definir umbral Como Real
    Escribir "¬øCu√°ntos n√∫meros ingresar√°?"
    Leer n
    Escribir "Ingrese valor umbral:"
    Leer umbral
    contador <- 0
    Para i <- 1 Hasta n Hacer
        Escribir "Ingrese n√∫mero ", i, ":"
        Leer num
        Si num > umbral Entonces
            contador <- contador + 1
        FinSi
    FinPara
    Escribir "Cantidad mayores al umbral: ", contador
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 8 : Control de inventario</h3>
  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej8_Inventario
    Definir n, i, cantidad Como Entero
    Definir precio, total, totalGeneral Como Real
    totalGeneral <- 0
    Escribir "Ingrese cantidad de productos:"
    Leer n
    Para i <- 1 Hasta n Hacer
        Escribir "Producto ", i, ":"
        Escribir "Precio:"
        Leer precio
        Escribir "Cantidad:"
        Leer cantidad
        total <- precio * cantidad
        Si total > 500 Entonces
            total <- total * 0.95
        FinSi
        totalGeneral <- totalGeneral + total
    FinPara
    Escribir "Total inventario: S/ ", totalGeneral
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 9 : C√°lculo de salarios</h3>
  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej9_Salarios
    Definir n, i Como Entero
    Definir salario, bono, totalPagar Como Real
    totalPagar <- 0
    Escribir "¬øCu√°ntos empleados tiene?"
    Leer n
    Para i <- 1 Hasta n Hacer
        Escribir "Ingrese salario del empleado ", i, ":"
        Leer salario
        Si salario < 1200 Entonces
            bono <- salario * 0.15
        Sino
            bono <- salario * 0.05
        FinSi
        Escribir "Salario total (con bono): ", salario + bono
        totalPagar <- totalPagar + (salario + bono)
    FinPara
    Escribir "Total de planilla: S/ ", totalPagar
FinAlgoritmo
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">Ejercicio 10 : Evaluaci√≥n de estudiantes</h3>
  <p><strong>Objetivo:</strong> Calcular promedio general y cantidad de aprobados y desaprobados de varios alumnos.</p>

  <pre style="background-color:#111; color:#00ffff; padding:12px; border-radius:10px; font-family:monospace;">
Algoritmo Ej10_Evaluacion
    Definir n, i, aprobados, desaprobados Como Entero
    Definir nota, suma, promedioGeneral Como Real
    aprobados <- 0
    desaprobados <- 0
    suma <- 0
    Escribir "Ingrese n√∫mero de alumnos:"
    Leer n
    Para i <- 1 Hasta n Hacer
        Escribir "Ingrese nota del alumno ", i, ":"
        Leer nota
        suma <- suma + nota
        Si nota >= 11 Entonces
            aprobados <- aprobados + 1
        Sino
            desaprobados <- desaprobados + 1
        FinSi
    FinPara
    promedioGeneral <- suma / n
    Escribir "Promedio general: ", promedioGeneral
    Escribir "Aprobados: ", aprobados
    Escribir "Desaprobados: ", desaprobados
FinAlgoritmo
  </pre>

  <p>üí¨ <em>La pr√°ctica con estos ejercicios permite dominar el control del flujo en los algoritmos.  
  Integrar estructuras condicionales y repetitivas es la base para desarrollar programas capaces de analizar datos, validar entradas y generar resultados inteligentes.</em></p>

</section>

    
    
    
    
    
    
    `,
    quiz: `<p><strong>Quiz:</strong> </p>
    
    
    
    
    `
  },


  // Curso 3 ‚Äì Python
  py1: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
    
    
     <p>   
‚úîÔ∏è Comprender los fundamentos y caracter√≠sticas del lenguaje Python<br>
‚úîÔ∏è Instalar, configurar y utilizar correctamente el entorno de desarrollo<br>
‚úîÔ∏è Aplicar los conceptos b√°sicos de programaci√≥n estructurada. <br>
    
   </p> 
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong> </p>
    
    
    <section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 16px;">1. ¬øQu√© es Python?</h2>

  <p>
  El lenguaje <strong>Python</strong> fue concebido a finales de los a√±os 80 por el programador <em>Guido van Rossum</em>, en el Centro de Matem√°tica e Inform√°tica (CWI) en los Pa√≠ses Bajos. Su desarrollo comenz√≥ como un proyecto personal, inspirado en el lenguaje <em>ABC</em>, con el prop√≥sito de crear un lenguaje m√°s claro, legible y flexible para realizar tareas de programaci√≥n tanto educativas como profesionales (<strong>Python Software Foundation, 2024</strong>).
  </p>

  <p>
  La primera versi√≥n p√∫blica, <strong>Python 0.9.0</strong>, se lanz√≥ en 1991, incorporando ya caracter√≠sticas fundamentales como el manejo de excepciones, funciones y m√≥dulos. M√°s adelante, la versi√≥n <strong>1.0</strong>, publicada en 1994, consolid√≥ su estructura y sent√≥ las bases del lenguaje moderno (<strong>Codefinity, 2023</strong>). Con el paso de los a√±os, Python se ha mantenido en constante evoluci√≥n, introduciendo mejoras significativas en sus versiones <strong>2.x</strong> y <strong>3.x</strong>, esta √∫ltima iniciada en 2008 y actualmente considerada el est√°ndar oficial (<strong>Python Software Foundation, 2024</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">Caracter√≠sticas principales de Python</h3>

  <ul style="margin-left: 40px;">
    <li><strong>Sintaxis clara y legible:</strong> facilita la comprensi√≥n del c√≥digo, reduciendo la complejidad y mejorando la productividad.</li>
    <li><strong>Lenguaje interpretado:</strong> no requiere compilaci√≥n previa; el int√©rprete ejecuta el c√≥digo l√≠nea por l√≠nea, permitiendo pruebas r√°pidas y aprendizaje √°gil.</li>
    <li><strong>Tipado din√°mico:</strong> las variables no necesitan declaraci√≥n expl√≠cita de tipo, ya que el int√©rprete lo determina autom√°ticamente durante la ejecuci√≥n.</li>
    <li><strong>Multiparadigma:</strong> soporta programaci√≥n estructurada, orientada a objetos y funcional, ofreciendo gran flexibilidad para diferentes estilos de desarrollo.</li>
    <li><strong>Amplia biblioteca est√°ndar y comunidad activa:</strong> Python cuenta con una extensa colecci√≥n de m√≥dulos integrados y una comunidad global que contribuye constantemente a su expansi√≥n (<strong>Python.org, 2024</strong>).</li>
  </ul>

  <p>
  Gracias a estas propiedades, <strong>Python</strong> se ha convertido en uno de los lenguajes m√°s utilizados en <em>educaci√≥n, ciencia de datos, inteligencia artificial, desarrollo web y automatizaci√≥n</em>, siendo considerado un lenguaje esencial para el <strong>pensamiento computacional</strong> y el <strong>aprendizaje inicial de la programaci√≥n</strong> (<strong>Almaguer, 2023</strong>).
  </p>

</section>
<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 16px;">2. Instalaci√≥n y configuraci√≥n (VS Code)</h2>

  <p>
  Para empezar a programar en <strong>Python</strong>, lo primero que se necesita es instalar el programa principal llamado <strong>int√©rprete de Python</strong>, encargado de leer y ejecutar el c√≥digo que se escribe. Actualmente, se recomienda usar la versi√≥n <strong>Python 3</strong>, ya que es la m√°s reciente y cuenta con soporte oficial (<strong>Python Software Foundation, 2024</strong>).
  </p>

  <p>
  Al descargar e instalar Python desde su p√°gina oficial 
  (<a href="https://www.python.org" target="_blank" style="color: #00ffff;">https://www.python.org</a>),
  se incluye un programa llamado <strong>IDLE</strong> (Integrated Development and Learning Environment). Este entorno resulta muy √∫til para principiantes, pues permite escribir c√≥digo, ejecutarlo y visualizar los resultados de forma sencilla, sin necesidad de configuraciones avanzadas.
  </p>

  <p>
  Para los estudiantes o usuarios que ya tienen algo de experiencia, tambi√©n se puede utilizar 
  <strong>Visual Studio Code (VS Code)</strong>, un editor de texto m√°s completo que permite agregar extensiones, aplicar color al c√≥digo, usar la terminal integrada y trabajar con proyectos de mayor tama√±o.
  </p>

  <h3 style="color: #00ffff; font-size: 18px;">Pasos b√°sicos de instalaci√≥n</h3>

  <ol style="margin-left: 40px;">
    <li>Descargar Python desde el sitio oficial: 
      <a href="https://www.python.org/downloads" target="_blank" style="color: #00ffff;">https://www.python.org/downloads</a>.
    </li>
    <li>Instalar el programa y marcar la opci√≥n <strong>‚ÄúAdd Python to PATH‚Äù</strong>, para poder ejecutarlo desde cualquier lugar del sistema.</li>
    <li>Verificar la instalaci√≥n abriendo la terminal o s√≠mbolo del sistema y escribiendo:<br>
      <code style="background-color: #111; color: #00ffff; padding: 4px 8px; border-radius: 6px; display: inline-block;">python --version</code>
    </li>
    <li>Si aparece el n√∫mero de versi√≥n, significa que la instalaci√≥n fue exitosa.</li>
    <li>Elegir el entorno de trabajo: <strong>IDLE</strong> o <strong>VS Code</strong>.</li>
    <li>Crear una carpeta de trabajo donde se guardar√°n los programas y escribir el primer c√≥digo, por ejemplo:</li>
  </ol>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px; margin-left: 40px; margin-right: 40px;">
print("Hola, Python")
  </pre>

  <p>
  Con estos pasos, el estudiante puede comenzar a escribir y ejecutar sus primeros programas. 
  <strong>Python</strong> es un lenguaje muy accesible y no requiere configuraciones complicadas, 
  por lo que el inicio suele ser r√°pido, pr√°ctico y motivador para quienes reci√©n comienzan en la programaci√≥n.
  </p>

  <h3 style="color: #00ffff; font-size: 18px;">Referencia en video</h3>

  <p>
  <em>Importante:</em> Ve el siguiente video explicativo para realizar correctamente la instalaci√≥n de Python:<br>
  <strong>Instalaci√≥n de Python paso a paso (2024).</strong> Disponible en: 
  <a href="https://www.youtube.com/watch?v=i6j8jT_OdEU" target="_blank" style="color: #00ffff;">https://www.youtube.com/watch?v=i6j8jT_OdEU</a>
  </p>

</section>


<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 16px;">3. Estructura b√°sica de un programa</h2>

  <p>
  Un programa en <strong>Python</strong> consiste, en esencia, en un archivo de texto con extensi√≥n <code>.py</code> que contiene instrucciones que el int√©rprete ejecuta de forma secuencial. Esta caracter√≠stica y su sintaxis sencilla permiten a los principiantes comprender f√°cilmente c√≥mo fluye la ejecuci√≥n del c√≥digo (<strong>Severance, 2016</strong>). Adem√°s, su estructura modular y su cercan√≠a al lenguaje natural lo convierten en un excelente recurso educativo para introducir los fundamentos de la programaci√≥n (<strong>Moreno et al., 2020</strong>).
  </p>

  <p>En su forma m√°s b√°sica, un programa en Python puede incluir los siguientes componentes:</p>

  <h3 style="color: #00ffff; font-size: 15px;">3.1. Encabezado o comentario informativo (opcional)</h3>
  <p>
  El encabezado sirve para incluir informaci√≥n sobre el prop√≥sito del programa, el autor y la fecha. No afecta la ejecuci√≥n, pero facilita la comprensi√≥n del c√≥digo, especialmente cuando es revisado por otras personas o despu√©s de un tiempo.
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa: Calculadora b√°sica
# Autor: Ana P√©rez
# Fecha: 31/10/2025
# Descripci√≥n: Este programa realiza operaciones aritm√©ticas simples.
  </pre>

  <p>
  Los comentarios en Python comienzan con el s√≠mbolo <code>#</code> y son ignorados por el int√©rprete (<strong>Severance, 2016</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 15px;">3.2. Importaci√≥n de m√≥dulos o bibliotecas</h3>
  <p>
  En algunos casos, es necesario usar funciones adicionales que no est√°n incluidas en el n√∫cleo de Python. Para eso se emplean las importaciones mediante la palabra clave <code>import</code>.
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
import math  # Importa el m√≥dulo matem√°tico

radio = 5
area = math.pi * radio ** 2
print("El √°rea del c√≠rculo es:", area)
  </pre>

  <p>
  En este ejemplo, el programa importa el m√≥dulo <code>math</code> para utilizar la constante <code>pi</code> y realizar c√°lculos matem√°ticos m√°s precisos. Esta pr√°ctica fomenta la reutilizaci√≥n del c√≥digo y evita tener que escribir funciones desde cero (<strong>Lutz, 2021</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 15px;">3.3. Definici√≥n de funciones o clases (en programas m√°s elaborados)</h3>

  <p>
  Las <strong>funciones</strong> agrupan un conjunto de instrucciones que pueden reutilizarse varias veces dentro de un programa.  
  Las <strong>clases</strong>, por su parte, se usan en programaci√≥n orientada a objetos para definir comportamientos y atributos de entidades.
  </p>

  <p><em>Ejemplo (funci√≥n):</em></p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
def sumar(a, b):
    resultado = a + b
    return resultado

print("La suma es:", sumar(3, 5))
  </pre>

  <p><em>Ejemplo (clase b√°sica):</em></p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
class Persona:
    def __init__(self, nombre):
        self.nombre = nombre

    def saludar(self):
        print("Hola, soy", self.nombre)

persona1 = Persona("Carlos")
persona1.saludar()
  </pre>

  <p>
  Ambas estructuras permiten que el c√≥digo sea modular, legible y reutilizable, lo cual es esencial para programas de mayor tama√±o (<strong>Moreno et al., 2020</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 15px;">3.4. Bloque principal de ejecuci√≥n</h3>

  <p>
  Es la parte donde se colocan las instrucciones que se ejecutan directamente al correr el programa. En Python, se acostumbra usar la condici√≥n <code>if __name__ == "__main__":</code> para indicar el punto de inicio del programa.
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
def saludar():
    print("¬°Bienvenido a Python!")

if __name__ == "__main__":
    saludar()
  </pre>

  <p>
  Esto garantiza que el bloque principal solo se ejecute cuando el archivo se ejecuta directamente, y no cuando es importado como m√≥dulo en otro programa (<strong>Lutz, 2021</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 15px;">3.5. Instrucciones de salida</h3>

  <p>
  Las instrucciones de salida son aquellas que muestran resultados al usuario o registran informaci√≥n.  
  La funci√≥n m√°s utilizada para ello es <code>print()</code>, que permite enviar texto o valores a la consola.
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
nombre = input("Ingrese su nombre: ")
print("Hola,", nombre, "¬°bienvenido al curso de Python!")
  </pre>

  <p>
  Este sencillo ejemplo ilustra el flujo cl√°sico de un programa: <strong>entrada ‚Üí procesamiento ‚Üí salida (E‚ÄìP‚ÄìS)</strong>, considerado la base del pensamiento computacional (<strong>Moreno et al., 2020</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 15px;">Resumen gr√°fico de la estructura</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Comentarios o encabezado
import m√≥dulos

def funciones():
    ...

class Clases:
    ...

if __name__ == "__main__":
    # Bloque principal
    # Lectura de datos
    # Procesamiento
    # Salida de resultados
  </pre>

  <p>
  Esta organizaci√≥n permite desarrollar programas claros, escalables y f√°ciles de mantener, siguiendo los principios de la programaci√≥n estructurada (<strong>Severance, 2016</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 15px;">Ejemplo simple</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
print("¬°Hola, mundo!")
  </pre>

  <p>
  Este programa b√°sico muestra un mensaje en pantalla, lo que permite comprobar que el entorno de desarrollo est√° funcionando correctamente. Es el punto de partida cl√°sico en casi todos los cursos de programaci√≥n (<strong>Severance, 2016</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 15px;">Ejemplo con entrada, procesamiento y salida</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
nombre = input("Ingrese su nombre: ")
edad = int(input("Ingrese su edad: "))
edad_futura = edad + 5
print("Hola", nombre, ", dentro de 5 a√±os tendr√°s", edad_futura, "a√±os.")
  </pre>

  <ul style="margin-left: 40px;">
    <li>Se solicita informaci√≥n al usuario mediante <code>input()</code>.</li>
    <li>Se convierte la entrada de texto a n√∫mero con <code>int()</code>.</li>
    <li>Se realiza un peque√±o c√°lculo (<code>edad_futura = edad + 5</code>).</li>
    <li>Finalmente, se muestra el resultado con <code>print()</code>.</li>
  </ul>

  <p>
  Este tipo de programa refleja el ciclo <strong>entrada ‚Äì proceso ‚Äì salida (E‚ÄìP‚ÄìS)</strong>, un principio fundamental en la l√≥gica de programaci√≥n (<strong>Moreno et al., 2020</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 15px;">Consideraciones did√°cticas importantes</h3>

  <ul style="margin-left: 40px;">
    <li><strong>Indentaci√≥n:</strong> Python define bloques de c√≥digo mediante espacios, lo que favorece la legibilidad (<strong>Lutz, 2021</strong>).</li>
    <li><strong>Secuencialidad:</strong> las l√≠neas se ejecutan de arriba hacia abajo, salvo que haya decisiones o repeticiones.</li>
    <li><strong>Comentarios:</strong> se indican con el s√≠mbolo <code>#</code> y ayudan a documentar el c√≥digo.</li>
    <li><strong>Modularidad:</strong> aunque no se aborde desde el inicio, conviene introducir el concepto para fomentar buenas pr√°cticas desde los primeros programas.</li>
  </ul>

</section>






<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 18px;">4. Uso de la funci√≥n <code>print()</code> y entrada con <code>input()</code></h2>

  <p>
  La interacci√≥n con el usuario es una de las partes m√°s esenciales en todo programa. En <strong>Python</strong>, este proceso se realiza principalmente a trav√©s de dos funciones b√°sicas: 
  <code>print()</code>, que muestra informaci√≥n en pantalla, y <code>input()</code>, que permite recibir datos desde el teclado. 
  Comprender su funcionamiento es clave para desarrollar programas din√°micos, interactivos y f√°ciles de probar (<strong>Severance, 2016</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">La funci√≥n <code>print()</code></h3>

  <p>
  La funci√≥n <code>print()</code> es el mecanismo est√°ndar de salida en Python. Su prop√≥sito es mostrar mensajes, resultados de operaciones, valores de variables o cualquier texto al usuario. 
  Por ejemplo:
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
print("¬°Hola, mundo!")
print("La suma de 2 + 3 es:", 2 + 3)
  </pre>

  <p>
  En este caso, la primera instrucci√≥n muestra un mensaje simple, mientras que la segunda imprime texto junto con el resultado de una operaci√≥n. 
  Python permite combinar texto y valores separados por comas, lo que facilita la creaci√≥n de mensajes informativos (<strong>Lutz, 2021</strong>).
  </p>

  <p>
  La funci√≥n <code>print()</code> tambi√©n acepta caracteres especiales para mejorar el formato de salida, como:
  </p>

  <ul style="margin-left: 40px;">
    <li><code>\n</code> para saltos de l√≠nea.</li>
    <li><code>\t</code> para tabulaciones.</li>
    <li><code>end</code> y <code>sep</code> como par√°metros opcionales para modificar el comportamiento del texto.</li>
  </ul>

  <p><em>Ejemplo:</em></p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
print("Nombre:", "Ana", sep=" - ")
print("Gracias por usar el programa", end=" :)")
  </pre>

  <p>
  Estos par√°metros permiten personalizar la forma en que la informaci√≥n se presenta al usuario, lo que es especialmente √∫til al mostrar reportes o resultados calculados.
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">La funci√≥n <code>input()</code></h3>

  <p>
  Por otro lado, la funci√≥n <code>input()</code> se utiliza para leer informaci√≥n del usuario. Cada vez que se ejecuta, el programa se detiene y espera que el usuario escriba un dato y presione la tecla <em>Enter</em>.
  </p>

  <p><em>Ejemplo b√°sico:</em></p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
nombre = input("Ingrese su nombre: ")
print("Hola,", nombre)
  </pre>

  <p>
  En este ejemplo, el texto entre par√©ntesis y comillas dentro de <code>input()</code> se muestra como un mensaje o <em>prompt</em>, y el valor que el usuario escribe se guarda en la variable 
  <code>nombre</code>. Es importante recordar que <code>input()</code> siempre devuelve una cadena de texto (<code>str</code>), incluso si el usuario escribe un n√∫mero (<strong>Downey, 2020</strong>).
  </p>

  <p>
  Por ello, si se requiere trabajar con n√∫meros, es necesario convertir el tipo de dato usando funciones como <code>int()</code> para enteros o <code>float()</code> para decimales.
  </p>

  <p><em>Ejemplo con conversi√≥n:</em></p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
edad = int(input("Ingrese su edad: "))
print("Tendr√°s", edad + 1, "a√±os el pr√≥ximo a√±o.")
  </pre>

  <p>
  En este caso, el texto ingresado se convierte en n√∫mero entero mediante <code>int()</code>, lo que permite hacer operaciones matem√°ticas con √©l.
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejemplo completo: lectura, procesamiento y salida</h3>

  <p>
  Este peque√±o programa combina ambas funciones para realizar un c√°lculo simple, siguiendo el ciclo 
  <strong>Entrada ‚Üí Procesamiento ‚Üí Salida (E‚ÄìP‚ÄìS)</strong>:
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa: C√°lculo del √°rea de un rect√°ngulo
base = float(input("Ingrese la base del rect√°ngulo: "))
altura = float(input("Ingrese la altura del rect√°ngulo: "))
area = base * altura
print("El √°rea del rect√°ngulo es:", area)
  </pre>

  <p>
  El usuario introduce los valores de base y altura, el programa los procesa multiplic√°ndolos y finalmente muestra el resultado. 
  Este tipo de estructura es el fundamento de casi todos los programas interactivos, desde los m√°s sencillos hasta los m√°s avanzados 
  (<strong>Moreno, Robles, & Rom√°n, 2020</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">En resumen</h3>

  <ul style="margin-left: 40px;">
    <li><code>print()</code> muestra informaci√≥n al usuario.</li>
    <li><code>input()</code> recoge informaci√≥n del usuario.</li>
    <li>Los datos ingresados se tratan como texto y deben convertirse a n√∫meros si se van a usar en operaciones.</li>
  </ul>

  <p>
  Juntas, estas funciones permiten la comunicaci√≥n b√°sica entre el usuario y el programa. 
  Su dominio es esencial para comprender c√≥mo fluye la informaci√≥n en un programa, y sienta las bases del 
  <strong>pensamiento computacional</strong> y la <strong>programaci√≥n estructurada</strong> 
  (<strong>Downey, 2020; Lutz, 2021</strong>).
  </p>

</section>


<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 18px;">5. Tipos de datos b√°sicos: n√∫meros, cadenas y booleanos</h2>

  <p>
  Comprender los tipos de datos es uno de los fundamentos m√°s importantes en la programaci√≥n, ya que cada valor que maneja un programa pertenece a una categor√≠a espec√≠fica que define qu√© operaciones son posibles y c√≥mo se comportan los resultados (<strong>Python Software Foundation, 2024</strong>). En Python, el sistema de tipado din√°mico permite que el tipo de una variable se determine autom√°ticamente seg√∫n el valor que se le asigne, sin necesidad de declararlo expl√≠citamente.
  </p>

  <p>Por ejemplo:</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
x = 10      # entero
y = 3.14    # flotante
nombre = "Ana"  # cadena de texto
  </pre>

  <p>
  Aqu√≠, Python asigna autom√°ticamente los tipos <code>int</code>, <code>float</code> y <code>str</code> a las variables <code>x</code>, <code>y</code> y <code>nombre</code>, respectivamente.
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">5.1. N√∫meros</h3>

  <p>
  Python utiliza tres tipos principales de datos num√©ricos:
  </p>

  <ul>
    <li><strong>Enteros (int)</strong>: representan n√∫meros sin parte decimal. Ejemplo: 5, -12, 2025.</li>
    <li><strong>Flotantes (float)</strong>: incluyen una parte decimal. Ejemplo: 3.14, 0.5, -10.75.</li>
    <li><strong>Complejos (complex)</strong>: se expresan en la forma a + bj, donde j representa la unidad imaginaria. Ejemplo: 2 + 3j.</li>
  </ul>

  <p>Ejemplo de operaciones num√©ricas:</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
a = 5
b = 2
print("Suma:", a + b)
print("Divisi√≥n:", a / b)
print("Divisi√≥n entera:", a // b)
print("Potencia:", a ** b)
  </pre>

  <p>
  Los n√∫meros son ampliamente utilizados en c√°lculos matem√°ticos, cient√≠ficos y financieros. Python proporciona adem√°s el m√≥dulo <code>math</code>, que incluye funciones avanzadas como ra√≠ces, potencias, logaritmos y trigonometr√≠a (<strong>Python Software Foundation, 2024</strong>).
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">5.2. Cadenas de caracteres (str)</h3>

  <p>
  Las cadenas representan texto y se escriben entre comillas simples o dobles. Python trata las cadenas como secuencias de caracteres, lo que permite acceder a cada posici√≥n o realizar transformaciones.
  </p>

  <p>Ejemplo:</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
mensaje = "Hola, Python"
nombre = "Ana"
saludo = "Hola " + nombre       # concatenaci√≥n
eco = nombre * 3                # repetici√≥n
print(saludo)                   # salida: Hola Ana
print(eco)                      # salida: AnaAnaAna
  </pre>

  <p>M√©todos √∫tiles de cadenas:</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
texto = "Aprendiendo Python"
print(texto.upper())   # convierte a may√∫sculas
print(texto.lower())   # convierte a min√∫sculas
print(len(texto))      # devuelve la longitud
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">5.3. Booleanos (bool)</h3>

  <p>
  El tipo booleano s√≥lo tiene dos valores posibles: <code>True</code> y <code>False</code>. Se usan principalmente en estructuras de control como condicionales o bucles, donde las decisiones dependen del resultado de una evaluaci√≥n l√≥gica (<strong>GeeksforGeeks, 2023</strong>).
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
activo = True
if activo:
    print("El sistema est√° activo")
else:
    print("El sistema est√° inactivo")

edad = 18
print(edad >= 18)  # True
print(edad < 0)    # False
  </pre>

  <h3 style="color: #00ffff; font-size: 16px;">5.4. Importancia de los tipos b√°sicos</h3>

  <p>
  Dominar estos tres tipos ‚Äî<code>n√∫meros</code>, <code>cadenas</code> y <code>booleanos</code>‚Äî permite al estudiante comprender c√≥mo se almacenan, transforman e interpretan los datos en un programa (<strong>Real Python, 2024</strong>). A partir de ellos se construyen estructuras m√°s avanzadas como listas, tuplas y diccionarios, pero dominar los tipos b√°sicos es indispensable para desarrollar programas correctos y eficientes.
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">Ejemplo integrador</h3>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
nombre = input("Ingrese su nombre: ")
edad = int(input("Ingrese su edad: "))
mayor = edad >= 18

print("Hola,", nombre)
print("Tu edad es:", edad)
print("¬øEres mayor de edad?", mayor)
  </pre>

  <p>
  En este programa: <code>nombre</code> es una cadena (<code>str</code>), <code>edad</code> es un n√∫mero entero (<code>int</code>) y <code>mayor</code> es un booleano (<code>bool</code>). Cada tipo cumple una funci√≥n espec√≠fica dentro del flujo l√≥gico del programa.
  </p>

</section>



    
    `,
    ejemplos: `
    <section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 16px;">Ejemplo 1. ‚Äú¬°Hola, mundo!‚Äù ‚Äì Primer programa</h2>

  <p><strong>Planteamiento del problema:</strong> Comprobar que el entorno de Python est√° correctamente instalado y puede ejecutar un programa simple que muestre un mensaje en pantalla.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa 1: Primer mensaje en Python
print("¬°Hola, mundo!")
  </pre>

  <p><strong>Explicaci√≥n:</strong> Este es el cl√°sico programa de inicio. Permite verificar que Python funciona correctamente y que el estudiante comprende c√≥mo escribir y ejecutar un script b√°sico.</p>

  <h2 style="color: #00ffff; font-size: 16px;">Ejemplo 2. Saludo personalizado</h2>

  <p><strong>Planteamiento del problema:</strong> Crear un programa que solicite el nombre del usuario y muestre un mensaje de saludo personalizado.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa 2: Saludo personalizado
nombre = input("Ingrese su nombre: ")
print("Hola,", nombre, "¬°bienvenido a Python!")
  </pre>

  <p><strong>Explicaci√≥n:</strong> Se introduce la funci√≥n <code>input()</code> para la lectura de datos desde el teclado. El programa combina entrada y salida de datos de forma sencilla.</p>

  <h2 style="color: #00ffff; font-size: 16px;">Ejemplo 3. Operaciones aritm√©ticas</h2>

  <p><strong>Planteamiento del problema:</strong> Realizar operaciones b√°sicas entre dos n√∫meros ingresados por teclado.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa 3: Operaciones con n√∫meros
a = int(input("Ingrese el primer n√∫mero: "))
b = int(input("Ingrese el segundo n√∫mero: "))

print("Suma:", a + b)
print("Resta:", a - b)
print("Multiplicaci√≥n:", a * b)
print("Divisi√≥n:", a / b)
  </pre>

  <p><strong>Explicaci√≥n:</strong> Introduce el uso de variables num√©ricas y operadores aritm√©ticos. Tambi√©n muestra c√≥mo convertir los datos ingresados a tipo entero (<code>int</code>).</p>

  <h2 style="color: #00ffff; font-size: 16px;">Ejemplo 4. C√°lculo del √°rea de un tri√°ngulo</h2>

  <p><strong>Planteamiento del problema:</strong> Calcular el √°rea de un tri√°ngulo a partir de su base y altura ingresadas por el usuario.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa 4: C√°lculo del √°rea de un tri√°ngulo
base = float(input("Ingrese la base del tri√°ngulo: "))
altura = float(input("Ingrese la altura del tri√°ngulo: "))

area = (base * altura) / 2
print("El √°rea del tri√°ngulo es:", area)
  </pre>

  <p><strong>Explicaci√≥n:</strong> Aplica la f√≥rmula geom√©trica del √°rea de un tri√°ngulo. Requiere comprender operaciones matem√°ticas b√°sicas y tipos de datos decimales (<code>float</code>).</p>

  <h2 style="color: #00ffff; font-size: 16px;">Ejemplo 5. Evaluaci√≥n de edad (uso de condicional)</h2>

  <p><strong>Planteamiento del problema:</strong> Determinar si una persona es mayor o menor de edad seg√∫n el valor ingresado.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa 5: Evaluar si el usuario es mayor de edad
edad = int(input("Ingrese su edad: "))
mayor = edad >= 18

if mayor:
    print("Eres mayor de edad.")
else:
    print("Eres menor de edad.")
  </pre>

  <p><strong>Explicaci√≥n:</strong> Introduce el tipo booleano (<code>bool</code>) y la estructura condicional <code>if-else</code>. Permite comprender c√≥mo tomar decisiones en un programa.</p>

  <h2 style="color: #00ffff; font-size: 16px;">Ejemplo 6. C√°lculo del √°rea de un c√≠rculo (uso de m√≥dulo math)</h2>

  <p><strong>Planteamiento del problema:</strong> Calcular el √°rea de un c√≠rculo usando la constante œÄ (<code>pi</code>). El radio ser√° ingresado por el usuario.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa 6: C√°lculo del √°rea de un c√≠rculo
import math

radio = float(input("Ingrese el radio del c√≠rculo: "))
area = math.pi * radio ** 2
print("El √°rea del c√≠rculo es:", area)
  </pre>

  <p><strong>Explicaci√≥n:</strong> Introduce la importaci√≥n de m√≥dulos (<code>import math</code>) y el uso de funciones matem√°ticas predefinidas. Refuerza el uso de variables y operadores.</p>

  <h2 style="color: #00ffff; font-size: 16px;">Ejemplo 7. C√°lculo del promedio de notas (uso de funciones)</h2>

  <p><strong>Planteamiento del problema:</strong> Calcular el promedio de tres notas ingresadas por el usuario, utilizando una funci√≥n personalizada.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa 7: Funci√≥n para calcular el promedio de tres notas
def calcular_promedio(n1, n2, n3):
    return (n1 + n2 + n3) / 3

nota1 = float(input("Ingrese la primera nota: "))
nota2 = float(input("Ingrese la segunda nota: "))
nota3 = float(input("Ingrese la tercera nota: "))

promedio = calcular_promedio(nota1, nota2, nota3)
print("El promedio es:", promedio)
  </pre>

  <p><strong>Explicaci√≥n:</strong> Introduce la definici√≥n y uso de funciones (<code>def</code>). Fomenta la reutilizaci√≥n del c√≥digo y la organizaci√≥n modular.</p>

  <h2 style="color: #00ffff; font-size: 16px;">Ejemplo 8. Evaluaci√≥n de rendimiento acad√©mico (programa completo)</h2>

  <p><strong>Planteamiento del problema:</strong> Evaluar si un estudiante ha aprobado o desaprobado seg√∫n su nota final. Incluye funciones, entrada de datos y bloque principal.</p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
# Programa 8: Evaluaci√≥n de rendimiento acad√©mico
def evaluar_estudiante(nombre, nota):
    if nota >= 11:
        print(nombre, "ha aprobado con nota", nota)
    else:
        print(nombre, "ha desaprobado con nota", nota)

if __name__ == "__main__":
    estudiante = input("Ingrese el nombre del estudiante: ")
    nota = float(input("Ingrese la nota obtenida: "))
    evaluar_estudiante(estudiante, nota)
  </pre>

  <p><strong>Explicaci√≥n:</strong> Integra funciones, condicionales, tipos de datos y el bloque principal <code>if __name__ == "__main__":</code>. Es un ejemplo completo de l√≥gica de decisi√≥n y modularidad.</p>

</section>

    
    
    
    
    `,
    quiz: `<p><strong>Quiz:</strong> Preguntas de variables y tipos de datos.</p>`
  },
  py2: {
    objetivo: `<p><strong>Objetivo:</strong> Aplicar condicionales y bucles en Python.</p>
    
    <p>   
‚úîÔ∏è Identificar y usar variables para almacenar y manipular distintos tipos de datos en Python. <br>
‚úîÔ∏è Aplicar operadores aritm√©ticos, relacionales y l√≥gicos para realizar c√°lculos y comparaciones en los programas.<br>
‚úîÔ∏è Dise√±ar estructuras condicionales y repetitivas <br>
    
   </p> 
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>


<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 16px;">1. Variables y tipos din√°micos</h2>

  <p>
  En programaci√≥n, una variable es un espacio en la memoria del computador donde se guarda un valor que puede cambiar durante la ejecuci√≥n del programa. Las variables son fundamentales porque permiten almacenar informaci√≥n, manipularla y reutilizarla tantas veces como sea necesario sin tener que escribirla nuevamente. En Python, las variables se crean simplemente asignando un valor mediante el operador <code>=</code>. Por ejemplo:
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
nombre = "Ana"
edad = 20
altura = 1.68
  </pre>

  <p>
  En este ejemplo, la variable <code>nombre</code> almacena una cadena de texto (<code>str</code>), <code>edad</code> almacena un n√∫mero entero (<code>int</code>) y <code>altura</code> un n√∫mero decimal (<code>float</code>). A diferencia de otros lenguajes como C o Java, donde es necesario declarar expl√≠citamente el tipo de dato, Python utiliza un <strong>tipado din√°mico</strong>. Esto significa que el int√©rprete detecta autom√°ticamente el tipo de dato seg√∫n el valor asignado (<strong>Python Software Foundation, 2024</strong>).
  </p>

  <p>
  El tipado din√°mico ofrece gran flexibilidad, pues una misma variable puede cambiar de tipo en distintos momentos del programa. Por ejemplo:
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
x = 10        # x es un entero
x = "diez"    # ahora x es una cadena
  </pre>

  <p>
  Aunque Python lo permite, no se recomienda cambiar el tipo de dato de una misma variable dentro de un programa, ya que puede generar confusi√≥n o errores l√≥gicos dif√≠ciles de detectar (<strong>Zelle, 2022</strong>). Se aconseja mantener coherencia en el tipo de informaci√≥n que almacena cada variable.
  </p>

  <p>
  Las variables tambi√©n pueden almacenar resultados de operaciones o expresiones. Por ejemplo:
  </p>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
suma = 4 + 5
mensaje = "El resultado es " + str(suma)
print(mensaje)
  </pre>

  <p>
  En este caso, se realiza una suma num√©rica y luego se convierte el resultado a texto con la funci√≥n <code>str()</code> para poder concatenarlo con la cadena <code>"El resultado es"</code>. Esto ilustra c√≥mo las variables pueden combinarse con funciones y operadores para crear salidas personalizadas.
  </p>

  <p>
  En cuanto a la nomenclatura, Python recomienda seguir el estilo <strong>snake_case</strong>, que consiste en escribir los nombres de variables en min√∫sculas y separar las palabras con guiones bajos (<code>_</code>). Por ejemplo: <code>nombre_estudiante</code>, <code>precio_total</code> o <code>nota_final</code>. Adem√°s, se deben evitar nombres gen√©ricos como <code>x</code> o <code>dato</code>, ya que dificultan la comprensi√≥n del c√≥digo (<strong>Pylint Guidelines, 2023</strong>).
  </p>

  <p>
  En resumen, las variables son uno de los pilares de la programaci√≥n en Python. Gracias a su tipado din√°mico y sintaxis simple, permiten trabajar de manera r√°pida y eficiente, favoreciendo la escritura de c√≥digo claro y legible, especialmente en las etapas iniciales de aprendizaje.
  </p>

</section>

<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 16px;">2. Operadores aritm√©ticos, relacionales y l√≥gicos</h2>

  <p>
  En programaci√≥n, los operadores son s√≠mbolos que permiten realizar operaciones sobre los datos. En Python, estos operadores se agrupan principalmente en tres categor√≠as: aritm√©ticos, relacionales y l√≥gicos. Cada grupo cumple una funci√≥n espec√≠fica dentro de la construcci√≥n de algoritmos, ya sea para efectuar c√°lculos, comparar valores o establecer condiciones que determinen el flujo del programa.
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">2.1. Operadores aritm√©ticos</h3>

  <p>
  Los operadores aritm√©ticos se utilizan para realizar c√°lculos matem√°ticos b√°sicos, como sumas, restas, multiplicaciones o divisiones. Python incluye adem√°s operadores adicionales, como la divisi√≥n entera, el m√≥dulo y la potencia.
  </p>

  <table style="color: white; margin-left: 20px; margin-bottom: 10px; border-collapse: collapse;">
    <tr>
      <th style="padding: 4px 8px; text-align: left;">Operador</th>
      <th style="padding: 4px 8px; text-align: left;">Descripci√≥n</th>
      <th style="padding: 4px 8px; text-align: left;">Ejemplo</th>
      <th style="padding: 4px 8px; text-align: left;">Resultado</th>
    </tr>
    <tr><td>+</td><td>Suma</td><td>5 + 3</td><td>8</td></tr>
    <tr><td>-</td><td>Resta</td><td>7 - 2</td><td>5</td></tr>
    <tr><td>*</td><td>Multiplicaci√≥n</td><td>4 * 2</td><td>8</td></tr>
    <tr><td>/</td><td>Divisi√≥n</td><td>9 / 2</td><td>4.5</td></tr>
    <tr><td>//</td><td>Divisi√≥n entera</td><td>9 // 2</td><td>4</td></tr>
    <tr><td>%</td><td>M√≥dulo (resto)</td><td>9 % 2</td><td>1</td></tr>
    <tr><td>**</td><td>Potencia</td><td>2 ** 3</td><td>8</td></tr>
  </table>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
precio = 50
descuento = 10
total = precio - (precio * descuento / 100)
print("El total a pagar es:", total)
  </pre>

  <p>
  En este ejemplo se aplica un descuento porcentual al precio de un producto. Los operadores permiten combinar diferentes operaciones en una sola expresi√≥n, facilitando el c√°lculo autom√°tico de resultados.
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">2.2. Operadores relacionales</h3>

  <p>
  Los operadores relacionales se utilizan para comparar valores y devuelven un resultado booleano (<code>True</code> o <code>False</code>). Son esenciales en estructuras condicionales como <code>if</code>, <code>elif</code> o <code>while</code>.
  </p>

  <table style="color: white; margin-left: 20px; margin-bottom: 10px; border-collapse: collapse;">
    <tr>
      <th style="padding: 4px 8px; text-align: left;">Operador</th>
      <th style="padding: 4px 8px; text-align: left;">Significado</th>
      <th style="padding: 4px 8px; text-align: left;">Ejemplo</th>
      <th style="padding: 4px 8px; text-align: left;">Resultado</th>
    </tr>
    <tr><td>==</td><td>Igualdad</td><td>5 == 5</td><td>True</td></tr>
    <tr><td>!=</td><td>Diferente</td><td>5 != 3</td><td>True</td></tr>
    <tr><td>></td><td>Mayor que</td><td>8 > 2</td><td>True</td></tr>
    <tr><td><</td><td>Menor que</td><td>3 < 7</td><td>True</td></tr>
    <tr><td>>=</td><td>Mayor o igual</td><td>5 >= 5</td><td>True</td></tr>
    <tr><td><=</td><td>Menor o igual</td><td>4 <= 2</td><td>False</td></tr>
  </table>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
nota = 15
if nota >= 11:
    print("Aprobado")
else:
    print("Desaprobado")
  </pre>

  <p>
  En este caso, el operador relacional <code>>=</code> compara la variable <code>nota</code> con el valor 11 para determinar si el estudiante aprob√≥.
  </p>

  <h3 style="color: #00ffff; font-size: 16px;">2.3. Operadores l√≥gicos</h3>

  <p>
  Los operadores l√≥gicos permiten combinar varias condiciones relacionales en una sola expresi√≥n. Se utilizan para crear decisiones m√°s complejas dentro del flujo del programa.
  </p>

  <table style="color: white; margin-left: 20px; margin-bottom: 10px; border-collapse: collapse;">
    <tr>
      <th style="padding: 4px 8px; text-align: left;">Operador</th>
      <th style="padding: 4px 8px; text-align: left;">Descripci√≥n</th>
      <th style="padding: 4px 8px; text-align: left;">Ejemplo</th>
      <th style="padding: 4px 8px; text-align: left;">Resultado</th>
    </tr>
    <tr><td>and</td><td>Devuelve True si ambas condiciones son verdaderas</td><td>(5 > 2) and (3 < 4)</td><td>True</td></tr>
    <tr><td>or</td><td>Devuelve True si al menos una condici√≥n es verdadera</td><td>(5 > 10) or (4 == 4)</td><td>True</td></tr>
    <tr><td>not</td><td>Invierte el valor l√≥gico</td><td>not (5 > 2)</td><td>False</td></tr>
  </table>

  <pre style="background-color: #111; color: #00ffff; padding: 10px; border-radius: 8px;">
edad = 18
if edad >= 18 and edad <= 65:
    print("Edad laboral activa")
  </pre>

  <p>
  En este ejemplo, la condici√≥n combina dos comparaciones con el operador l√≥gico <code>and</code>, verificando que la edad est√© dentro del rango laboral activo.
  </p>

  <p>
  Los operadores l√≥gicos son esenciales para la toma de decisiones m√∫ltiples, el control de flujo y la validaci√≥n de datos dentro de programas de cualquier nivel de complejidad (<strong>Lutz, 2021</strong>). El dominio de los operadores en Python permite construir programas m√°s funcionales y precisos. Saber c√≥mo y cu√°ndo utilizar operadores aritm√©ticos, relacionales y l√≥gicos es fundamental para resolver problemas mediante c√≥digo, ya que son la base de toda operaci√≥n matem√°tica, comparaci√≥n y decisi√≥n condicional.
  </p>

</section>
<section style="color: white; text-align: justify; margin: 30px; font-size: 15px; line-height: 1.8;">

  <h3 style="color: #00ffff; font-size: 18px;">3. Condicionales if, elif, else</h3>

  <p>
    Las estructuras condicionales constituyen una de las herramientas m√°s poderosas y fundamentales en la programaci√≥n, ya que permiten controlar el flujo de ejecuci√≥n del programa en funci√≥n de decisiones l√≥gicas. Dicho de otro modo, el programa puede ‚Äúelegir‚Äù qu√© instrucciones ejecutar dependiendo de ciertas condiciones que se cumplan o no (<strong>Downey, 2020</strong>).
    En <strong>Python</strong>, estas decisiones se implementan mediante las palabras clave <code>if</code>, <code>elif</code> y <code>else</code>, las cuales se eval√∫an secuencialmente y determinan el camino que seguir√° el programa durante su ejecuci√≥n.
  </p>

  <p>
    A nivel conceptual, las condicionales permiten que un programa responda de manera din√°mica ante distintas situaciones, como validar la edad de un usuario, calcular descuentos seg√∫n el monto de compra o verificar contrase√±as antes de conceder acceso. Sin ellas, los programas ser√≠an puramente secuenciales y no podr√≠an adaptarse a condiciones cambiantes.
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">3.1. Sintaxis y funcionamiento b√°sico</h4>

  <p>La estructura general de una condicional en Python es la siguiente:</p>

  <pre style="background-color: #1a1a1a; color: #00ffcc; padding: 10px; border-radius: 8px;">
if condici√≥n:
    # c√≥digo que se ejecuta si la condici√≥n es verdadera
elif otra_condici√≥n:
    # c√≥digo que se ejecuta si la primera condici√≥n no se cumple pero esta s√≠
else:
    # c√≥digo que se ejecuta si ninguna condici√≥n se cumple
  </pre>

  <p>
    <strong>Explicaci√≥n:</strong>  
    La palabra clave <code>if</code> inicia la evaluaci√≥n l√≥gica. Si la condici√≥n es verdadera (<code>True</code>), se ejecuta el bloque de c√≥digo que le sigue.  
    Si la condici√≥n no se cumple, se eval√∫a la siguiente mediante <code>elif</code> (abreviaci√≥n de <em>else if</em>).  
    Si ninguna de las condiciones previas se cumple, el bloque <code>else</code> se ejecuta como alternativa final.  
    Cada bloque debe estar indentado (sangrado), generalmente con 4 espacios (<strong>Lutz, 2021</strong>).
  </p>

  <p><strong>Ejemplo pr√°ctico: Clasificaci√≥n por edad</strong></p>

  <pre style="background-color: #1a1a1a; color: #00ffcc; padding: 10px; border-radius: 8px;">
edad = int(input("Ingrese su edad: "))

if edad < 18:
    print("Eres menor de edad")
elif edad >= 18 and edad < 65:
    print("Eres adulto")
else:
    print("Eres adulto mayor")
  </pre>

  <p>
    Este flujo de evaluaci√≥n de condiciones es lineal y exclusivo: solo uno de los bloques se ejecuta, incluso si varias condiciones fueran verdaderas.
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">3.2. Uso de operadores</h4>

  <p>
    Las condiciones pueden combinar operadores relacionales y l√≥gicos para construir expresiones m√°s complejas:
  </p>

  <ul>
    <li><strong>Relacionales:</strong> ==, !=, &lt;, &gt;, &lt;=, &gt;=</li>
    <li><strong>L√≥gicos:</strong> and, or, not</li>
  </ul>

  <p><strong>Ejemplo de aplicaci√≥n combinada:</strong></p>

  <pre style="background-color: #1a1a1a; color: #00ffcc; padding: 10px; border-radius: 8px;">
nota = float(input("Ingrese su nota final: "))

if nota >= 17:
    print("Excelente desempe√±o")
elif nota >= 13 and nota < 17:
    print("Aprobado")
elif nota >= 10 and nota < 13:
    print("En recuperaci√≥n")
else:
    print("Desaprobado")
  </pre>

  <p>
    El operador <code>and</code> asegura que ambas condiciones sean verdaderas para ejecutar el bloque correspondiente.
    Si se introduce una nota menor que 10, el programa llega al <code>else</code> y muestra ‚ÄúDesaprobado‚Äù.
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">3.3. Condicionales anidadas</h4>

  <p>
    En algunos casos, las decisiones pueden depender de m√∫ltiples niveles de verificaci√≥n. Las condicionales anidadas permiten incluir un bloque <code>if</code> dentro de otro, creando estructuras jer√°rquicas de decisi√≥n.
  </p>

  <pre style="background-color: #1a1a1a; color: #00ffcc; padding: 10px; border-radius: 8px;">
usuario = input("Ingrese su rol (admin/usuario): ")
clave = input("Ingrese su clave: ")

if usuario == "admin":
    if clave == "1234":
        print("Acceso concedido al administrador")
    else:
        print("Clave incorrecta")
else:
    print("Acceso restringido a usuarios registrados")
  </pre>

  <p>
    Este tipo de estructura es com√∫n en sistemas de autenticaci√≥n o control de acceso. No obstante, un exceso de anidamiento puede dificultar la lectura del c√≥digo (<strong>Lutz, 2021</strong>).
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">3.4. Condicionales abreviadas</h4>

  <p>
    Python ofrece una sintaxis m√°s compacta para condicionales simples, conocida como <strong>expresi√≥n condicional o ternaria</strong>:
  </p>

  <pre style="background-color: #1a1a1a; color: #00ffcc; padding: 10px; border-radius: 8px;">
edad = int(input("Ingrese su edad: "))
mensaje = "Mayor de edad" if edad >= 18 else "Menor de edad"
print(mensaje)
  </pre>

  <p>
    Esta forma resulta √∫til para asignar valores r√°pidamente sin tener que escribir m√∫ltiples l√≠neas de <code>if</code> y <code>else</code>.
  </p>

  <p><strong>Evaluaci√≥n booleana impl√≠cita</strong></p>

  <pre style="background-color: #1a1a1a; color: #00ffcc; padding: 10px; border-radius: 8px;">
nombre = input("Ingrese su nombre: ")

if nombre:
    print("Hola,", nombre)
else:
    print("No ingres√≥ ning√∫n nombre")
  </pre>

  <p>
    Aqu√≠, una cadena vac√≠a (<code>""</code>) se considera falsa, mientras que cualquier texto no vac√≠o se considera verdadero.
    Este comportamiento se aplica tambi√©n a listas, tuplas y otros tipos de datos (<strong>Python Software Foundation, 2024</strong>).
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">3.5. Importancia pedag√≥gica y pr√°ctica</h4>

  <p>
    El aprendizaje de las estructuras condicionales introduce a los estudiantes en el razonamiento l√≥gico algor√≠tmico. Con ellas, los programas pueden:
  </p>

  <ul>
    <li>Tomar decisiones seg√∫n datos introducidos por el usuario.</li>
    <li>Adaptarse a distintas situaciones o entradas.</li>
    <li>Evitar errores l√≥gicos.</li>
    <li>Fomentar la abstracci√≥n l√≥gica.</li>
  </ul>

  <p>
    Seg√∫n <strong>Downey (2020)</strong>, dominar las estructuras condicionales es esencial para construir algoritmos robustos.  
    <strong>Lutz (2021)</strong> destaca que las decisiones condicionales son el n√∫cleo de la ‚Äúinteligencia‚Äù en los programas.
  </p>

  <p><strong>Ejemplo integrador: Clasificaci√≥n de n√∫meros</strong></p>

  <pre style="background-color: #1a1a1a; color: #00ffcc; padding: 10px; border-radius: 8px;">
numero = float(input("Ingrese un n√∫mero: "))

if numero > 0:
    print("El n√∫mero es positivo")
elif numero == 0:
    print("El n√∫mero es cero")
else:
    print("El n√∫mero es negativo")
  </pre>

  <p>
    Este ejemplo resume el comportamiento condicional cl√°sico y muestra c√≥mo el programa selecciona la ruta correcta de ejecuci√≥n.
  </p>

</section>
<section style="color: white; text-align: justify; margin: 30px; font-size: 15px; line-height: 1.8;">

  <h3 style="color: #00ffff; font-size: 18px;">4. Bucles <em>for</em> y <em>while</em></h3>

  <p>
    En programaci√≥n, muchas tareas requieren repetir un conjunto de instrucciones varias veces. 
    Por ejemplo, mostrar una lista de nombres, calcular promedios o imprimir una tabla de multiplicar. 
    Escribir esas mismas instrucciones una por una ser√≠a ineficiente.  
    Por ello, los lenguajes de programaci√≥n incorporan <strong>estructuras de repetici√≥n o bucles</strong>, 
    que permiten ejecutar autom√°ticamente un bloque de c√≥digo tantas veces como sea necesario 
    (<strong>Downey, 2020</strong>).
  </p>

  <p>
    En <strong>Python</strong>, los dos bucles m√°s usados son <code>for</code> y <code>while</code>. 
    Aunque ambos repiten c√≥digo, se diferencian por su control de repetici√≥n:
  </p>

  <table style="width:100%; border-collapse: collapse; text-align:center; color:white; margin: 10px 0;">
    <tr style="background-color:#00ffff33;">
      <th style="padding:6px; border:1px solid #00ffff;">Bucle</th>
      <th style="padding:6px; border:1px solid #00ffff;">Uso principal</th>
    </tr>
    <tr>
      <td style="padding:6px; border:1px solid #00ffff;"><code>for</code></td>
      <td style="padding:6px; border:1px solid #00ffff;">Cuando se conoce el n√∫mero de iteraciones o se recorre una secuencia.</td>
    </tr>
    <tr>
      <td style="padding:6px; border:1px solid #00ffff;"><code>while</code></td>
      <td style="padding:6px; border:1px solid #00ffff;">Cuando la repetici√≥n depende de una condici√≥n l√≥gica variable.</td>
    </tr>
  </table>

  <h4 style="color: #00ffff; font-size: 16px;">4.1. Bucle <em>for</em></h4>

  <p>
    El bucle <code>for</code> se utiliza para recorrer secuencias como listas, cadenas, rangos o tuplas.
  </p>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
for variable in secuencia:
    # Bloque de c√≥digo a repetir
  </pre>

  <ul>
    <li><strong>variable:</strong> almacena temporalmente el valor actual del elemento.</li>
    <li><strong>secuencia:</strong> conjunto de elementos a recorrer.</li>
  </ul>

  <h5 style="color:#00ffff; font-size:15px;">Uso con <code>range()</code></h5>

  <p>
    La funci√≥n <code>range()</code> genera una secuencia num√©rica:
  </p>

  <table style="width:100%; border-collapse:collapse; color:white; margin:10px 0;">
    <tr style="background-color:#00ffff33;">
      <th style="padding:6px; border:1px solid #00ffff;">Sintaxis</th>
      <th style="padding:6px; border:1px solid #00ffff;">Descripci√≥n</th>
    </tr>
    <tr>
      <td style="padding:6px; border:1px solid #00ffff;"><code>range(inicio, fin, paso)</code></td>
      <td style="padding:6px; border:1px solid #00ffff;">
        <strong>inicio:</strong> desde d√≥nde empieza (por defecto 0).<br>
        <strong>fin:</strong> hasta d√≥nde llega (no incluido).<br>
        <strong>paso:</strong> incremento entre n√∫meros (por defecto 1).
      </td>
    </tr>
  </table>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
for i in range(1, 6):
    print("Iteraci√≥n n√∫mero:", i)
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color:#0d0d0d; color:#00ffaa; padding:10px; border-radius:8px;">
Iteraci√≥n n√∫mero: 1
Iteraci√≥n n√∫mero: 2
Iteraci√≥n n√∫mero: 3
Iteraci√≥n n√∫mero: 4
Iteraci√≥n n√∫mero: 5
  </pre>

  <p>
    Este tipo de bucle es ideal cuando sabemos cu√°ntas veces queremos repetir algo.
  </p>

  <h5 style="color:#00ffff; font-size:15px;">Recorrido de listas</h5>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
frutas = ["manzana", "pera", "uva"]
for fruta in frutas:
    print("Me gusta la", fruta)
  </pre>

  <h5 style="color:#00ffff; font-size:15px;">Iterar sobre cadenas de texto</h5>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
palabra = "Python"
for letra in palabra:
    print(letra)
  </pre>

  <p>
    Cada car√°cter se procesa individualmente, √∫til en conteo o validaci√≥n de texto.
  </p>

  <h5 style="color:#00ffff; font-size:15px;">Control de flujo dentro del <em>for</em></h5>

  <p><strong>Instrucciones especiales:</strong></p>

  <table style="width:100%; border-collapse:collapse; text-align:center; color:white;">
    <tr style="background-color:#00ffff33;">
      <th style="padding:6px; border:1px solid #00ffff;">Instrucci√≥n</th>
      <th style="padding:6px; border:1px solid #00ffff;">Funci√≥n</th>
    </tr>
    <tr>
      <td style="padding:6px; border:1px solid #00ffff;"><code>break</code></td>
      <td style="padding:6px; border:1px solid #00ffff;">Termina el bucle antes de tiempo.</td>
    </tr>
    <tr>
      <td style="padding:6px; border:1px solid #00ffff;"><code>continue</code></td>
      <td style="padding:6px; border:1px solid #00ffff;">Salta a la siguiente iteraci√≥n.</td>
    </tr>
  </table>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
for numero in range(1, 10):
    if numero == 5:
        break
    print("N√∫mero:", numero)
  </pre>

  <h4 style="color: #00ffff; font-size: 16px;">4.2. Bucle <em>while</em></h4>

  <p>
    El bucle <code>while</code> ejecuta un bloque mientras se cumpla una condici√≥n.
  </p>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
while condici√≥n:
    # Bloque de c√≥digo
  </pre>

  <p><strong>Ejemplo b√°sico:</strong></p>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
contador = 1
while contador <= 5:
    print("Contando:", contador)
    contador += 1
  </pre>

  <p>
    Cuando la condici√≥n deja de cumplirse, el bucle termina.
  </p>

  <h5 style="color:#00ffff; font-size:15px;">Validaci√≥n de entrada</h5>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
clave = ""
while clave != "python123":
    clave = input("Ingrese la clave: ")
print("Acceso concedido")
  </pre>

  <p>
    El programa pedir√° la contrase√±a hasta que se ingrese la correcta.
  </p>

  <h5 style="color:#00ffff; font-size:15px;">Evitar bucles infinitos</h5>

  <p>
    Si la variable de control no cambia, el programa no termina.
  </p>

  <pre style="background-color:#1a1a1a; color:#ff7777; padding:10px; border-radius:8px;">
contador = 1
while contador <= 5:
    print(contador)
# Falta contador += 1 ‚Üí bucle infinito
  </pre>

  <p>
    Para evitarlo, siempre debe existir una condici√≥n de salida clara (<strong>Moreno et al., 2020</strong>).
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">4.3. Combinaci√≥n de bucles y condicionales</h4>

  <p><strong>Ejemplo: clasificaci√≥n de n√∫meros pares e impares</strong></p>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
for i in range(1, 11):
    if i % 2 == 0:
        print(i, "es par")
    else:
        print(i, "es impar")
  </pre>

  <h5 style="color:#00ffff; font-size:15px;">Ejemplo: suma de precios</h5>

  <pre style="background-color:#1a1a1a; color:#00ffcc; padding:10px; border-radius:8px;">
precios = [10, 20, 30, 40]
total = 0

for precio in precios:
    total += precio

print("El total de la compra es:", total)
  </pre>

  <p>
    Este programa demuestra el poder de los bucles para automatizar tareas repetitivas.
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">4.4. Buenas pr√°cticas</h4>

  <ul>
    <li>Definir siempre una condici√≥n de salida clara en los <code>while</code>.</li>
    <li>No modificar la secuencia mientras se recorre con <code>for</code>.</li>
    <li>Usar nombres descriptivos como <em>contador</em> o <em>precio</em>.</li>
    <li>Mantener indentaci√≥n consistente (4 espacios).</li>
    <li>Comentar el c√≥digo cuando la l√≥gica sea compleja.</li>
  </ul>

  <h4 style="color: #00ffff; font-size: 16px;">4.5. Aplicaciones</h4>

  <ul>
    <li>Procesamiento de datos y estad√≠sticas.</li>
    <li>Automatizaci√≥n de tareas administrativas.</li>
    <li>An√°lisis de archivos y lectura de registros.</li>
    <li>Creaci√≥n de videojuegos (movimiento, turnos).</li>
    <li>Inteligencia artificial (entrenamiento iterativo de modelos).</li>
  </ul>

  <p>
    Los bucles <code>for</code> y <code>while</code> son pilares de la programaci√≥n estructurada.  
    Permiten repetir, controlar y automatizar el c√≥digo, haciendo los programas m√°s eficientes.  
    Comprender sus diferencias y aplicarlos correctamente es clave para desarrollar pensamiento computacional avanzado 
    (<strong>Downey, 2020; Lutz, 2021; Moreno et al., 2020</strong>).
  </p>

</section>
<section style="color: white; text-align: justify; margin-left: 0px; margin-right: 10px; font-size: 15px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 15px;">üé• Videos recomendados</h2>

  <p>
    Dimas. (2021, abril 12). <strong>¬øC√≥mo hacer un BUCLE ‚ôæÔ∏è en PYTHON? (Con EJEMPLOS incluidos) | Curso PYTHON desde CERO #5</strong> [Video]. YouTube.  
    <a href="https://www.youtube.com/watch?v=moUHTWl7QCQ" style="color: #66ccff;">https://www.youtube.com/watch?v=moUHTWl7QCQ</a>
  </p>

  <p>
    OMES. (2023, junio 26). <strong>Bucle for | Curso de Python desde cero üêç</strong> [Video]. YouTube.  
    <a href="https://www.youtube.com/watch?v=AP8-5GRwPig" style="color: #66ccff;">https://www.youtube.com/watch?v=AP8-5GRwPig</a>
  </p>

  <p>
    Sergio A. Casta√±o Giraldo. (2021, abril 26). <strong>Bucle While en Python desde Cero ‚ôªÔ∏è [Continue y Break]</strong> [Video]. YouTube.  
    <a href="https://www.youtube.com/watch?v=nQxWthR71PI" style="color: #66ccff;">https://www.youtube.com/watch?v=nQxWthR71PI</a>
  </p>

</section>

    
    `,
    ejemplos: `
<section style="background-color:#0a0a0a; color:#e6e6e6; font-family: Arial, sans-serif; line-height:1.7; padding:25px; border-radius:12px;">

  <h2 style="color:#00bfff; font-size:26px; text-align:left; margin-bottom:25px;">üí° Ejemplos pr√°cticos en Python (niveles progresivos)</h2>

  <!-- Ejemplo 1 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 1</h3>
  <p><strong>Enunciado:</strong> Pedir al usuario su nombre y saludarlo.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
nombre = input("Ingrese su nombre: ")
print("Hola,", nombre, "- bienvenido al curso de Python.")
  </div>
  <p><em>Nota:</em> Uso de variable tipo cadena, funci√≥n <code>input()</code>, y <code>print()</code>. No incluye condicionales ni bucles. Ideal para principiantes.</p>

  <!-- Ejemplo 2 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 2</h3>
  <p><strong>Enunciado:</strong> Leer un n√∫mero entero y determinar si es mayor, igual o menor que 10.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
n = int(input("Ingrese un n√∫mero entero: "))
if n > 10:
    print("El n√∫mero es mayor que 10.")
elif n == 10:
    print("El n√∫mero es igual a 10.")
else:
    print("El n√∫mero es menor que 10.")
  </div>
  <p><em>Nota:</em> Introduce condicionales <code>if-elif-else</code> y operadores relacionales. No incluye bucles.</p>

  <!-- Ejemplo 3 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 3</h3>
  <p><strong>Enunciado:</strong> Calcular la suma de los primeros n n√∫meros positivos (donde n lo define el usuario).</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
n = int(input("¬øCu√°ntos n√∫meros sumaremos? "))
suma = 0
for i in range(1, n+1):
    suma += i
print("La suma de los primeros", n, "n√∫meros es:", suma)
  </div>
  <p><em>Nota:</em> Introduce bucle <code>for</code>, acumulador (<code>suma</code>), uso de <code>range()</code>. Buen puente hacia estructuras repetitivas.</p>

  <!-- Ejemplo 4 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 4</h3>
  <p><strong>Enunciado:</strong> Leer 5 calificaciones (0‚Äì20) y mostrar el promedio, el mayor y el menor valor ingresado.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
suma = 0.0
mayor = -1
menor = 100
for i in range(5):
    nota = float(input(f"Ingrese la nota {i+1} (0-20): "))
    suma += nota
    if nota > mayor:
        mayor = nota
    if nota < menor:
        menor = nota
promedio = suma / 5
print("Promedio:", promedio)
print("Mayor nota:", mayor)
print("Menor nota:", menor)
  </div>
  <p><em>Nota:</em> Combina bucle y condicionales dentro del bucle. Introduce inicializaci√≥n cuidadosa de variables l√≠mite.</p>

  <!-- Ejemplo 5 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 5</h3>
  <p><strong>Enunciado:</strong> Leer n√∫meros hasta que el usuario ingrese 0; contar cu√°ntos positivos hay, su suma y promedio.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
contador = 0
suma = 0.0
while True:
    n = float(input("Ingrese un n√∫mero (0 para terminar): "))
    if n == 0:
        break
    if n > 0:
        contador += 1
        suma += n
if contador > 0:
    promedio = suma / contador
    print("Cantidad de positivos:", contador)
    print("Suma de positivos:", suma)
    print("Promedio de positivos:", promedio)
else:
    print("No se ingresaron n√∫meros positivos.")
  </div>
  <p><em>Nota:</em> Usa bucle <code>while</code> infinito con <code>break</code> y condicional dentro del bucle. Ejercicio ideal de razonamiento algor√≠tmico.</p>

  <!-- Ejemplo 6 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 6 ‚Äì Nivel avanzado</h3>
  <p><strong>Enunciado:</strong> Leer edades hasta que se introduzca una negativa; contar cu√°ntas personas est√°n entre 18 y 65 a√±os.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
contador_activa = 0
while True:
    edad = int(input("Ingrese edad (negativo para terminar): "))
    if edad < 0:
        break
    if edad >= 18 and edad <= 65:
        contador_activa += 1
print("Cantidad de personas en edad laboral activa:", contador_activa)
  </div>
  <p><em>Nota:</em> Incluye operadores l√≥gicos <code>and</code>, bucle con condici√≥n de paro y conteo selectivo.</p>

  <!-- Ejemplo 7 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 7 ‚Äì Nivel dif√≠cil</h3>
  <p><strong>Enunciado:</strong> Calcular el total a pagar considerando descuentos del 10% si el precio supera 1000.</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
n = int(input("¬øCu√°ntos precios ingresar√°? "))
total = 0.0
contador_desc = 0
for i in range(n):
    precio = float(input(f"Ingrese precio del producto {i+1}: "))
    if precio > 1000:
        precio = precio * 0.9
        contador_desc += 1
    total += precio
print("Total a pagar:", total)
print("Cantidad de productos con descuento:", contador_desc)
  </div>
  <p><em>Nota:</em> Requiere bucle, condicional, acumuladores y conteo. Muy √∫til para escenarios comerciales.</p>

  <!-- Ejemplo 8 -->
  <h3 style="color:#00bfff; font-size:20px;">Ejemplo 8 ‚Äì Nivel muy dif√≠cil (Integrador)</h3>
  <p><strong>Enunciado:</strong> Juego donde el usuario intenta adivinar un n√∫mero entre 1 y 50 (m√°ximo 7 intentos).</p>
  <div style="background-color:#161b22; color:#e0e0e0; padding:14px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
import random
secreto = random.randint(1, 50)
intentos = 0
max_intentos = 7
while intentos < max_intentos:
    intentos += 1
    n = int(input(f"Intento {intentos} de {max_intentos}. Ingrese n√∫mero (1-50): "))
    if n == secreto:
        print("¬°Ganaste! N√∫mero correcto:", secreto)
        break
    elif n < secreto:
        print("El n√∫mero secreto es mayor.")
    else:
        print("El n√∫mero secreto es menor.")
else:
    print("Lo siento, agotaste los intentos. El n√∫mero era:", secreto)
print("Usaste", intentos, "intentos.")
  </div>
  <p><em>Nota:</em> Incluye m√≥dulo <code>random</code>, bucle condicionado, condicionales anidados y control de flujo (<code>break</code>, <code>else</code> del <code>while</code>). Excelente para evaluaci√≥n final.</p>

</section>

    
    `,
  },
  py3: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    
  <p>   
‚úîÔ∏è Identificar y diferenciar claramente las estructuras de datos b√°sicas en Python <br>
‚úîÔ∏è Aplicar operaciones esenciales sobre colecciones (como a√±adir, eliminar y buscar) para manipular datos de forma eficiente y segura en programas reales.<br>
‚úîÔ∏è Desarrollar algoritmos que utilicen listas, tuplas o diccionarios para almacenar, procesar y presentar conjuntos de datos, reforzando buenas pr√°cticas de nombrado, tipo de datos y consistencia<br>
    
   </p> 




    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>
    
    <section style="color: white; text-align: justify; margin: 30px; font-size: 16px; line-height: 1.8;">

  <h4 style="color: #00ffff; font-size: 18px;">1. Estructuras de datos b√°sicas en Python</h4>

  <p>
    Hasta este punto, los programas escritos en <strong>Python</strong> trabajaban con variables individuales, como 
    <em>edad</em>, <em>nombre</em> o <em>nota</em>, que almacenan un solo valor a la vez. Sin embargo, en la mayor√≠a de 
    los problemas del mundo real, es necesario manejar <strong>conjuntos de datos relacionados</strong>: por ejemplo, 
    una lista de calificaciones de varios estudiantes, un conjunto de precios de productos o los nombres de los 
    asistentes a un evento.
  </p>

  <p>
    Para resolver estas necesidades, Python incorpora un conjunto de 
    <strong>estructuras de datos b√°sicas</strong> que permiten almacenar y organizar m√∫ltiples valores dentro de una sola 
    variable. Estas estructuras no solo facilitan el almacenamiento, sino tambi√©n el acceso, la modificaci√≥n y el 
    an√°lisis eficiente de la informaci√≥n.
  </p>

  <h5 style="color: #00ffff; font-size: 16px;">Principales estructuras de datos en Python</h5>

  <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 100%; text-align: center; color: white;">
    <thead style="background-color: #00ffff; color: black; font-weight: bold;">
      <tr>
        <th>Estructura</th>
        <th>Tipo</th>
        <th>Caracter√≠sticas</th>
        <th>Ejemplo</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><strong>Lista</strong> (<em>list</em>)</td>
        <td>Ordenada y modificable</td>
        <td>Permite agregar, eliminar o cambiar elementos. Ideal para datos cambiantes.</td>
        <td><code>frutas = ["manzana", "pera", "uva"]</code></td>
      </tr>
      <tr>
        <td><strong>Tupla</strong> (<em>tuple</em>)</td>
        <td>Ordenada e inmutable</td>
        <td>No puede modificarse despu√©s de su creaci√≥n. √ötil para datos fijos o protegidos.</td>
        <td><code>coordenadas = (10, 20)</code></td>
      </tr>
      <tr>
        <td><strong>Diccionario</strong> (<em>dict</em>)</td>
        <td>No ordenado (pares clave‚Äìvalor)</td>
        <td>Permite asociar valores con claves √∫nicas, facilitando b√∫squedas r√°pidas.</td>
        <td><code>alumno = {"nombre": "Ana", "edad": 20}</code></td>
      </tr>
    </tbody>
  </table>

  <h5 style="color: #00ffff; font-size: 16px; margin-top: 25px;">Importancia pr√°ctica</h5>

  <p>
    Estas herramientas son fundamentales para el desarrollo de programas m√°s estructurados, flexibles y escalables. 
    Comprender su funcionamiento permite al programador <strong>manipular datos de manera avanzada</strong>, resolver 
    problemas con mayor eficiencia y construir aplicaciones con una l√≥gica m√°s clara y organizada.
  </p>

  <p style="color: #b0ffff; font-size: 14px;">
    <em>(Lutz, 2021; Downey, 2020)</em>
  </p>

</section>
<section style="color: white; text-align: justify; margin: 30px; font-size: 16px; line-height: 1.8;">

  <h4 style="color: #00ffff; font-size: 18px;">2. Listas: creaci√≥n, recorrido y m√©todos</h4>

  <p>
    Las <strong>listas</strong> son una de las estructuras de datos m√°s vers√°tiles y utilizadas en <strong>Python</strong>, 
    debido a su flexibilidad, facilidad de uso y capacidad para almacenar m√∫ltiples valores dentro de una sola variable. 
    Una lista permite guardar una colecci√≥n ordenada de elementos, los cuales pueden ser modificados, eliminados o agregados 
    durante la ejecuci√≥n del programa (Lutz, 2021).
  </p>

  <p>
    En la vida real, una lista puede compararse con una tabla de registro o un inventario, donde cada elemento ocupa una posici√≥n dentro de un orden.
  </p>

  <h5 style="color: #00ffff; font-size: 16px;">Creaci√≥n de listas</h5>

  <p>
    Las listas se definen con corchetes <code>[ ]</code> y sus elementos se separan con comas. 
    Cada elemento puede ser de cualquier tipo de dato: n√∫meros, cadenas, valores booleanos o incluso otras listas.
  </p>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
frutas = ["manzana", "pera", "uva"]
edades = [18, 25, 30, 45]
mixta = ["Python", 3, True, 4.5]
  </pre>

  <p>
    Adem√°s, se puede crear una lista vac√≠a e ir agregando elementos despu√©s:
  </p>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
numeros = []
numeros.append(10)
numeros.append(20)
numeros.append(30)
print(numeros)  # [10, 20, 30]
  </pre>

  <h5 style="color: #00ffff; font-size: 16px;">2.1. Acceso a los elementos</h5>

  <p>
    Cada elemento dentro de una lista tiene un <strong>√≠ndice</strong> (posici√≥n) que comienza desde <code>0</code>.
  </p>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
frutas = ["manzana", "pera", "uva"]
print(frutas[0])   # manzana
print(frutas[2])   # uva
print(frutas[-1])  # uva (√∫ltimo elemento)
print(frutas[0:2]) # ['manzana', 'pera']
  </pre>

  <h5 style="color: #00ffff; font-size: 16px;">2.2. Recorrido de una lista</h5>

  <p>
    El recorrido o iteraci√≥n permite acceder a cada elemento de una lista, una operaci√≥n muy com√∫n al analizar datos o generar reportes.
  </p>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
for fruta in frutas:
    print("Me gusta la", fruta)
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color: #111; padding: 10px; border-radius: 8px;">Me gusta la manzana
Me gusta la pera
Me gusta la uva</pre>

  <p>Con √≠ndices mediante <code>enumerate()</code>:</p>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
for i, fruta in enumerate(frutas):
    print(f"Fruta {i+1}: {fruta}")
  </pre>

  <h5 style="color: #00ffff; font-size: 16px;">3. M√©todos m√°s utilizados en listas</h5>

  <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 100%; text-align: center; color: white;">
    <thead style="background-color: #00ffff; color: black;">
      <tr>
        <th>M√©todo</th>
        <th>Descripci√≥n</th>
        <th>Ejemplo</th>
        <th>Resultado</th>
      </tr>
    </thead>
    <tbody>
      <tr><td><code>append(x)</code></td><td>Agrega un elemento al final</td><td><code>frutas.append("mango")</code></td><td>["manzana", "pera", "uva", "mango"]</td></tr>
      <tr><td><code>insert(i, x)</code></td><td>Inserta en una posici√≥n</td><td><code>frutas.insert(1, "kiwi")</code></td><td>["manzana", "kiwi", "pera", "uva"]</td></tr>
      <tr><td><code>remove(x)</code></td><td>Elimina el valor indicado</td><td><code>frutas.remove("pera")</code></td><td>["manzana", "uva"]</td></tr>
      <tr><td><code>pop(i)</code></td><td>Elimina y devuelve un elemento</td><td><code>frutas.pop()</code></td><td>["manzana", "pera"]</td></tr>
      <tr><td><code>sort()</code></td><td>Ordena los elementos</td><td><code>edades.sort()</code></td><td>[18, 25, 30, 45]</td></tr>
      <tr><td><code>reverse()</code></td><td>Invierte el orden</td><td><code>frutas.reverse()</code></td><td>["uva", "pera", "manzana"]</td></tr>
      <tr><td><code>len()</code></td><td>Devuelve el tama√±o</td><td><code>len(frutas)</code></td><td>3</td></tr>
    </tbody>
  </table>

  <p>
    Tambi√©n se puede verificar si un elemento existe:
  </p>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
if "pera" in frutas:
    print("La pera est√° en la lista")
  </pre>

  <h5 style="color: #00ffff; font-size: 16px;">Ejemplo: c√°lculo del promedio de notas</h5>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
notas = [15, 18, 12, 20, 17]
promedio = sum(notas) / len(notas)
print("Promedio:", promedio)
  </pre>

  <p><strong>Salida:</strong> Promedio: 16.4</p>

  <h5 style="color: #00ffff; font-size: 16px;">Ejemplo adicional: lista din√°mica</h5>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
nombres = []
for i in range(3):
    nombre = input("Ingrese un nombre: ")
    nombres.append(nombre)

nombres.sort()
print("Nombres ordenados:", nombres)
  </pre>

  <h5 style="color: #00ffff; font-size: 16px;">4. Aplicaciones</h5>

  <ul>
    <li>Educaci√≥n: almacenar notas o nombres de estudiantes.</li>
    <li>Negocios: registrar ventas diarias o precios.</li>
    <li>Ciencia de datos: guardar mediciones o resultados.</li>
    <li>Desarrollo web: manejar listas de usuarios o comentarios.</li>
  </ul>

  <h5 style="color: #00ffff; font-size: 16px;">5. Buenas pr√°cticas</h5>

  <ul>
    <li>Usar nombres descriptivos (<code>ventas_mensuales</code> en lugar de <code>x</code>).</li>
    <li>Evitar mezclar tipos de datos innecesariamente.</li>
    <li>Usar m√©todos integrados como <code>append()</code> y <code>sort()</code>.</li>
    <li>Verificar l√≠mites de √≠ndice.</li>
    <li>Utilizar <strong>comprensiones de listas</strong> para crear listas nuevas r√°pidamente.</li>
  </ul>

  <pre style="background-color: #111; padding: 10px; border-radius: 8px; color: #b0ffff;">
cuadrados = [x**2 for x in range(1, 6)]
print(cuadrados)
# [1, 4, 9, 16, 25]
  </pre>

  <p style="color: #b0ffff; font-size: 14px;">
    <em>(Downey, 2020; Lutz, 2021)</em>
  </p>

</section>


<section style="color: white; text-align: justify; margin: 40px; font-size: 15px; line-height: 1.7;">

  <h3 style="color: #00ffff; font-size: 18px;">6. Tuplas y diferencias con listas</h3>

  <p>
    En <strong>Python</strong>, las <strong>tuplas</strong> son estructuras de datos muy similares a las listas, 
    pero con una diferencia fundamental: <strong>son inmutables</strong>, es decir, no se pueden modificar una vez creadas. 
    Esto significa que no es posible a√±adir, eliminar ni cambiar elementos dentro de una tupla despu√©s de su definici√≥n.
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">Creaci√≥n de tuplas</h4>

  <p>Las tuplas se definen utilizando par√©ntesis <code>( )</code> en lugar de corchetes <code>[ ]</code>:</p>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
coordenadas = (10, 20)
dias_semana = ("Lunes", "Martes", "Mi√©rcoles")
  </pre>

  <p>
    A diferencia de las listas, si se intenta modificar una tupla, Python genera un error:
  </p>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #ff7777;">
dias_semana[0] = "Domingo"   # ‚ùå Error: las tuplas son inmutables
  </pre>

  <h4 style="color: #00ffff; font-size: 16px;">Ventajas de usar tuplas</h4>

  <ul>
    <li><strong>Mayor seguridad:</strong> protegen los datos al no permitir modificaciones.</li>
    <li><strong>Mejor rendimiento:</strong> consumen menos memoria y se procesan m√°s r√°pido que las listas.</li>
    <li><strong>Compatibilidad:</strong> pueden usarse como claves en diccionarios o elementos en conjuntos (<code>set</code>).</li>
  </ul>

  <h4 style="color: #00ffff; font-size: 16px;">Ejemplo comparativo entre lista y tupla</h4>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
lista = [1, 2, 3]
tupla = (1, 2, 3)

lista.append(4)     # ‚úÖ Se puede modificar la lista
# tupla.append(4)   # ‚ùå Error: las tuplas no se pueden modificar

print(lista)  # [1, 2, 3, 4]
print(tupla)  # (1, 2, 3)
  </pre>

  <p>En este ejemplo, se observa c√≥mo la lista puede ampliarse agregando un nuevo elemento, mientras que la tupla permanece intacta.</p>

  <h4 style="color: #00ffff; font-size: 16px;">Conversi√≥n entre listas y tuplas</h4>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
# De lista a tupla
lista = [10, 20, 30]
tupla = tuple(lista)

# De tupla a lista
tupla = (5, 6, 7)
lista = list(tupla)
  </pre>

  <p>
    Estas funciones son √∫tiles cuando se necesita <strong>proteger temporalmente los datos</strong> 
    o permitir modificaciones en estructuras previamente inmutables.
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">Resumen comparativo</h4>

  <table style="width: 100%; border-collapse: collapse; text-align: center; color: white; margin-top: 10px;">
    <thead style="background-color: #00ffff; color: black;">
      <tr>
        <th style="padding: 8px;">Caracter√≠stica</th>
        <th style="padding: 8px;">Lista (list)</th>
        <th style="padding: 8px;">Tupla (tuple)</th>
      </tr>
    </thead>
    <tbody style="background-color: #111;">
      <tr>
        <td style="padding: 8px;">Modificable</td>
        <td style="padding: 8px;">‚úÖ S√≠</td>
        <td style="padding: 8px;">‚ùå No</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Sintaxis</td>
        <td style="padding: 8px;">[ ]</td>
        <td style="padding: 8px;">( )</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Velocidad de ejecuci√≥n</td>
        <td style="padding: 8px;">M√°s lenta</td>
        <td style="padding: 8px;">M√°s r√°pida</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Uso t√≠pico</td>
        <td style="padding: 8px;">Datos cambiantes o din√°micos</td>
        <td style="padding: 8px;">Datos fijos o constantes</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Memoria utilizada</td>
        <td style="padding: 8px;">Mayor</td>
        <td style="padding: 8px;">Menor</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Puede ser clave en diccionario</td>
        <td style="padding: 8px;">No</td>
        <td style="padding: 8px;">S√≠</td>
      </tr>
    </tbody>
  </table>

  <h4 style="color: #00ffff; font-size: 16px; margin-top: 20px;">Representaci√≥n gr√°fica</h4>

  <div style="display: flex; justify-content: center; gap: 30px; margin: 15px 0;">
    <div style="background-color: #111; border-radius: 10px; padding: 15px; text-align: center;">
      <h5 style="color: #00ffff;">Lista</h5>
      <p>[1, 2, 3, 4]</p>
      <p style="color: #888;">Modificable ‚ûú Se pueden a√±adir o eliminar elementos.</p>
    </div>
    <div style="background-color: #111; border-radius: 10px; padding: 15px; text-align: center;">
      <h5 style="color: #00ffff;">Tupla</h5>
      <p>(1, 2, 3)</p>
      <p style="color: #888;">Inmutable ‚ûú No se pueden modificar los elementos.</p>
    </div>
  </div>

  <p style="margin-top: 20px;">
    En conclusi√≥n, las <strong>tuplas</strong> son una alternativa eficiente y segura a las listas 
    cuando se necesita almacenar <strong>datos est√°ticos o invariables</strong>. 
    Su uso mejora el rendimiento del programa y mantiene una estructura m√°s coherente y protegida, 
    especialmente √∫til en <em>configuraciones, bases de datos o datos sensibles</em> 
    (Downey, 2020; Lutz, 2021).
  </p>

</section>

    <section style="color: white; text-align: justify; margin: 40px; font-size: 15px; line-height: 1.7;">

  <h3 style="color: #00ffff; font-size: 18px;">7. Diccionarios: claves y valores</h3>

  <p>
    Los <strong>diccionarios</strong> son una de las estructuras de datos m√°s potentes y vers√°tiles de <strong>Python</strong>. 
    Permiten almacenar pares de elementos formados por una <strong>clave</strong> (<em>key</em>) y un <strong>valor</strong> (<em>value</em>), 
    lo que los convierte en una herramienta ideal para organizar y acceder r√°pidamente a informaci√≥n asociada.
  </p>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
estudiante = {
    "nombre": "Ana",
    "edad": 20,
    "nota": 18
}
  </pre>

  <p>
    En este ejemplo, <code>"nombre"</code>, <code>"edad"</code> y <code>"nota"</code> son las claves, 
    mientras que <code>"Ana"</code>, <code>20</code> y <code>18</code> son los valores correspondientes.
  </p>

  <h4 style="color: #00ffff; font-size: 16px;">7.1. Caracter√≠sticas principales</h4>

  <ul>
    <li>üîπ <strong>Las claves son √∫nicas:</strong> no pueden repetirse dentro del mismo diccionario.</li>
    <li>üîπ <strong>Los valores pueden ser de cualquier tipo:</strong> n√∫meros, cadenas, listas u otros diccionarios.</li>
    <li>üîπ <strong>Acceso r√°pido y directo:</strong> mediante la clave, sin recorrer todos los elementos.</li>
    <li>üîπ <strong>Son mutables:</strong> se pueden modificar, agregar o eliminar elementos en cualquier momento.</li>
  </ul>

  <h4 style="color: #00ffff; font-size: 16px;">7.2. Acceso y modificaci√≥n de valores</h4>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
print(estudiante["nombre"])   # Ana

estudiante["nota"] = 19
print(estudiante)  # {"nombre": "Ana", "edad": 20, "nota": 19}
  </pre>

  <h4 style="color: #00ffff; font-size: 16px;">7.3. Agregar y eliminar datos</h4>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
estudiante["curso"] = "Python"   # ‚úÖ Agrega un nuevo par
del estudiante["edad"]           # ‚ùå Elimina una clave y su valor
  </pre>

  <p>Resultado final:</p>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
{"nombre": "Ana", "nota": 19, "curso": "Python"}
  </pre>

  <h4 style="color: #00ffff; font-size: 16px;">7.4. Recorrido de un diccionario</h4>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
for clave, valor in estudiante.items():
    print(clave, ":", valor)
  </pre>

  <p>Salida:</p>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
nombre : Ana
nota : 19
curso : Python
  </pre>

  <p>Tambi√©n puedes recorrer solo las claves o los valores:</p>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
print(estudiante.keys())    # dict_keys(['nombre', 'nota', 'curso'])
print(estudiante.values())  # dict_values(['Ana', 19, 'Python'])
  </pre>

  <h4 style="color: #00ffff; font-size: 16px;">7.5. Ejemplo pr√°ctico: registro de estudiantes</h4>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
registro = {
    "Juan": 15,
    "Mar√≠a": 18,
    "Pedro": 17
}

# Acceder a una nota espec√≠fica
print("Nota de Mar√≠a:", registro["Mar√≠a"])

# Agregar un nuevo estudiante
registro["Luc√≠a"] = 20

# Mostrar todos los estudiantes y sus notas
for nombre, nota in registro.items():
    print(nombre, "tiene nota", nota)
  </pre>

  <p>Salida:</p>

  <pre style="background-color: #111; padding: 10px; border-radius: 10px; color: #00ffcc;">
Nota de Mar√≠a: 18
Juan tiene nota 15
Mar√≠a tiene nota 18
Pedro tiene nota 17
Luc√≠a tiene nota 20
  </pre>

  <h4 style="color: #00ffff; font-size: 16px;">7.6. M√©todos √∫tiles de los diccionarios</h4>

  <table style="width: 100%; border-collapse: collapse; text-align: center; color: white; margin-top: 10px;">
    <thead style="background-color: #00ffff; color: black;">
      <tr>
        <th style="padding: 8px;">M√©todo</th>
        <th style="padding: 8px;">Descripci√≥n</th>
        <th style="padding: 8px;">Ejemplo</th>
      </tr>
    </thead>
    <tbody style="background-color: #111;">
      <tr>
        <td style="padding: 8px;">.keys()</td>
        <td style="padding: 8px;">Devuelve todas las claves</td>
        <td style="padding: 8px;">registro.keys()</td>
      </tr>
      <tr>
        <td style="padding: 8px;">.values()</td>
        <td style="padding: 8px;">Devuelve todos los valores</td>
        <td style="padding: 8px;">registro.values()</td>
      </tr>
      <tr>
        <td style="padding: 8px;">.items()</td>
        <td style="padding: 8px;">Devuelve pares (clave, valor)</td>
        <td style="padding: 8px;">registro.items()</td>
      </tr>
      <tr>
        <td style="padding: 8px;">.get()</td>
        <td style="padding: 8px;">Devuelve el valor de una clave o un valor por defecto</td>
        <td style="padding: 8px;">registro.get("Luis", "No registrado")</td>
      </tr>
      <tr>
        <td style="padding: 8px;">.pop()</td>
        <td style="padding: 8px;">Elimina una clave y devuelve su valor</td>
        <td style="padding: 8px;">registro.pop("Pedro")</td>
      </tr>
      <tr>
        <td style="padding: 8px;">.clear()</td>
        <td style="padding: 8px;">Vac√≠a todo el diccionario</td>
        <td style="padding: 8px;">registro.clear()</td>
      </tr>
    </tbody>
  </table>

  <h4 style="color: #00ffff; font-size: 16px;">7.7. Usos comunes</h4>

  <ul>
    <li> <strong>Gesti√≥n de datos:</strong> almacenar informaci√≥n de usuarios, productos o estudiantes.</li>
    <li><strong>Traducci√≥n o mapeo:</strong> relacionar c√≥digos con nombres.</li>
    <li> <strong>Procesamiento de datos JSON:</strong> muy usados en desarrollo web.</li>
    <li> <strong>Contadores o estad√≠sticas:</strong> contar frecuencias o clasificar datos.</li>
  </ul>

  <h4 style="color: #00ffff; font-size: 16px;">7.8. Comparaci√≥n entre listas, tuplas y diccionarios</h4>

  <table style="width: 100%; border-collapse: collapse; text-align: center; color: white; margin-top: 10px;">
    <thead style="background-color: #00ffff; color: black;">
      <tr>
        <th style="padding: 8px;">Caracter√≠stica</th>
        <th style="padding: 8px;">Lista (list)</th>
        <th style="padding: 8px;">Tupla (tuple)</th>
        <th style="padding: 8px;">Diccionario (dict)</th>
      </tr>
    </thead>
    <tbody style="background-color: #111;">
      <tr>
        <td style="padding: 8px;">Estructura</td>
        <td style="padding: 8px;">Elementos ordenados</td>
        <td style="padding: 8px;">Elementos ordenados e inmutables</td>
        <td style="padding: 8px;">Pares clave‚Äìvalor</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Mutabilidad</td>
        <td style="padding: 8px;">S√≠</td>
        <td style="padding: 8px;">No</td>
        <td style="padding: 8px;">S√≠</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Acceso</td>
        <td style="padding: 8px;">Por √≠ndice</td>
        <td style="padding: 8px;">Por √≠ndice</td>
        <td style="padding: 8px;">Por clave</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Velocidad de acceso</td>
        <td style="padding: 8px;">Media</td>
        <td style="padding: 8px;">Alta</td>
        <td style="padding: 8px;">Muy alta</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Uso t√≠pico</td>
        <td style="padding: 8px;">Colecciones din√°micas</td>
        <td style="padding: 8px;">Datos fijos</td>
        <td style="padding: 8px;">Datos asociados</td>
      </tr>
      <tr>
        <td style="padding: 8px;">Sintaxis</td>
        <td style="padding: 8px;">[ ]</td>
        <td style="padding: 8px;">( )</td>
        <td style="padding: 8px;">{ }</td>
      </tr>
    </tbody>
  </table>

  <p style="margin-top: 20px;">
    En conclusi√≥n, los <strong>diccionarios</strong> son estructuras esenciales para el manejo de informaci√≥n 
    compleja y relacional. Su capacidad para asociar claves √∫nicas con valores espec√≠ficos 
    los convierte en una herramienta indispensable para desarrollar programas eficientes, 
    organizados y f√°ciles de mantener (Downey, 2020; Lutz, 2021).
  </p>

</section>
<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h3 style="color: #00ffff; font-size: 18px;">8. Operaciones comunes: a√±adir, eliminar y buscar</h3>

  <p>
    Las estructuras de datos en <strong>Python</strong> ‚Äîlistas, tuplas y diccionarios‚Äî permiten almacenar y organizar informaci√≥n de distintas maneras. 
    Aunque comparten algunas similitudes, cada una ofrece operaciones espec√≠ficas seg√∫n sus caracter√≠sticas 
    (<em>mutabilidad, orden y tipo de acceso</em>).
  </p>

  <p>A continuaci√≥n, se describen las operaciones m√°s comunes para <strong>a√±adir, eliminar y buscar</strong> elementos, junto con ejemplos pr√°cticos de su uso.</p>

  <!-- A√±adir elementos -->
  <h4 style="color: #00bfff;">8.1. A√±adir elementos</h4>

  <table border="1" cellpadding="6" cellspacing="0" style="width: 100%; border-collapse: collapse; text-align: center;">
    <tr style="background-color: #003366; color: #00ffff;">
      <th>Estructura</th>
      <th>M√©todo u operaci√≥n</th>
      <th>Ejemplo</th>
      <th>Resultado</th>
    </tr>
    <tr>
      <td>Lista</td>
      <td><code>append()</code> agrega al final.<br><code>insert(pos, valor)</code> inserta en una posici√≥n.</td>
      <td><pre>frutas = ["pera", "manzana"]<br>frutas.append("uva")</pre></td>
      <td>["pera", "manzana", "uva"]</td>
    </tr>
    <tr>
      <td>Tupla</td>
      <td>‚ùå No aplica (inmutable)</td>
      <td>‚Äî</td>
      <td>‚Äî</td>
    </tr>
    <tr>
      <td>Diccionario</td>
      <td><code>dicc[clave] = valor</code> crea o actualiza un par.</td>
      <td><pre>registro = {"Ana": 18}<br>registro["Luis"] = 20</pre></td>
      <td>{"Ana": 18, "Luis": 20}</td>
    </tr>
  </table>

  <p style="margin-top: 10px;"><strong>Nota:</strong> Si la clave ya existe en un diccionario, su valor se actualiza; si no, se agrega una nueva entrada.</p>

  <!-- Eliminar elementos -->
  <h4 style="color: #00bfff;">8.2. Eliminar elementos</h4>

  <table border="1" cellpadding="6" cellspacing="0" style="width: 100%; border-collapse: collapse; text-align: center;">
    <tr style="background-color: #003366; color: #00ffff;">
      <th>Estructura</th>
      <th>M√©todo u operaci√≥n</th>
      <th>Ejemplo</th>
      <th>Resultado</th>
    </tr>
    <tr>
      <td>Lista</td>
      <td><code>remove(valor)</code> elimina por contenido.<br><code>pop(pos)</code> elimina por √≠ndice.</td>
      <td><pre>frutas = ["pera", "uva", "manzana"]<br>frutas.remove("uva")</pre></td>
      <td>["pera", "manzana"]</td>
    </tr>
    <tr>
      <td>Tupla</td>
      <td>‚ùå No se puede modificar.<br>Solo eliminar completa con <code>del</code>.</td>
      <td><pre>del coordenadas</pre></td>
      <td>‚Äî</td>
    </tr>
    <tr>
      <td>Diccionario</td>
      <td><code>del dicc[clave]</code> o <code>pop(clave)</code></td>
      <td><pre>del registro["Ana"]</pre></td>
      <td>{"Luis": 20}</td>
    </tr>
  </table>

  <p>
     Si se intenta eliminar una clave inexistente, Python genera un <code>KeyError</code>. 
    Para evitarlo, se puede usar: <br>
    <code>registro.pop("Pedro", "No encontrado")</code>
  </p>

  <!-- Buscar elementos -->
  <h4 style="color: #00bfff;">8.3. Buscar elementos</h4>

  <table border="1" cellpadding="6" cellspacing="0" style="width: 100%; border-collapse: collapse; text-align: center;">
    <tr style="background-color: #003366; color: #00ffff;">
      <th>Estructura</th>
      <th>Forma de b√∫squeda</th>
      <th>Ejemplo</th>
      <th>Resultado</th>
    </tr>
    <tr>
      <td>Lista</td>
      <td>Busca si el valor est√° presente.</td>
      <td><pre>frutas = ["pera", "manzana", "uva"]<br>if "uva" in frutas:<br>    print("La uva est√° en la lista")</pre></td>
      <td>La uva est√° en la lista</td>
    </tr>
    <tr>
      <td>Tupla</td>
      <td>Igual que en listas.</td>
      <td><pre>dias = ("Lunes", "Martes", "Mi√©rcoles")<br>if "Martes" in dias:<br>    print("D√≠a encontrado")</pre></td>
      <td>D√≠a encontrado</td>
    </tr>
    <tr>
      <td>Diccionario</td>
      <td>Verifica claves, no valores.</td>
      <td><pre>registro = {"Ana": 18, "Luis": 20}<br>if "Ana" in registro:<br>    print("Estudiante encontrado")</pre></td>
      <td>Estudiante encontrado</td>
    </tr>
  </table>

  <p> Para buscar entre los <strong>valores</strong> de un diccionario:</p>
  <pre><code>if 20 in registro.values():
    print("Nota encontrada")</code></pre>

  <!-- Contar elementos -->
  <h4 style="color: #00bfff;">8.4. Contar elementos</h4>
  <p>La funci√≥n <code>len()</code> devuelve el n√∫mero de elementos de cualquier estructura:</p>

  <pre><code>len(frutas)      # 3
len(dias)        # 3
len(registro)    # 2</code></pre>

  <!-- Ejemplo completo -->
  <h4 style="color: #00bfff;">Ejemplo completo</h4>

  <pre style="background-color: #001f33; color: #00ffcc; padding: 10px; border-radius: 10px;">
# Lista
frutas = ["pera", "manzana", "uva"]
frutas.append("mango")
if "uva" in frutas:
    frutas.remove("uva")
print("Lista final:", frutas)

# Tupla
colores = ("rojo", "azul", "verde")
if "azul" in colores:
    print("Color encontrado:", "azul")

# Diccionario
registro = {"Ana": 18, "Luis": 20}
registro["Mar√≠a"] = 19
if "Ana" in registro:
    del registro["Ana"]
print("Diccionario final:", registro)
  </pre>

  <p><strong>Salida:</strong></p>
  <pre>
Lista final: ['pera', 'manzana', 'mango']
Color encontrado: azul
Diccionario final: {'Luis': 20, 'Mar√≠a': 19}
  </pre>

  <p>
    El dominio de estas operaciones b√°sicas ‚Äîa√±adir, eliminar y buscar‚Äî es fundamental para manipular colecciones de datos en Python de forma eficiente.
    Cada estructura tiene su prop√≥sito:
  </p>

  <ul>
    <li><strong>Listas:</strong> ideales para conjuntos din√°micos.</li>
    <li><strong>Tuplas:</strong> adecuadas para datos fijos.</li>
    <li><strong>Diccionarios:</strong> √≥ptimos para informaci√≥n asociada mediante pares clave‚Äìvalor.</li>
  </ul>

  <p style="margin-top: 10px;">
    En conjunto, estas herramientas forman la base para la manipulaci√≥n de datos m√°s compleja en etapas posteriores del aprendizaje de programaci√≥n 
    (<em>Downey, 2020; Lutz, 2021</em>).
  </p>

</section>

    
    `,
    ejemplos: `<p><strong>Ejemplos:</strong></p>
    
    <section style="color: #ddd; text-align: left; margin-left: 20px; font-size: 15px; line-height: 1.8; font-family: 'Consolas', monospace;">

  <h3 style="color: #00ffff; font-size: 16px;"> Ejercicio 1: Mostrar nombres de estudiantes (Listas b√°sicas)</h3>
  <div style="background-color: #111; padding: 12px; border-radius: 8px; margin-top: 5px;">
  <pre><code>estudiantes = ["Ana", "Luis", "Mar√≠a", "Pedro", "Luc√≠a"]

for nombre in estudiantes:
    print(nombre)</code></pre>
  </div>
  <p><strong>Salida esperada:</strong><br>
  Ana<br> Luis<br> Mar√≠a<br> Pedro<br> Luc√≠a</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejercicio 2: Contar n√∫meros mayores que 50</h3>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>numeros = [12, 55, 89, 43, 67, 100, 5, 22, 90, 51]
mayores = 0

for n in numeros:
    if n > 50:
        mayores += 1

print("Cantidad de n√∫meros mayores que 50:", mayores)</code></pre>
  </div>
  <p><strong>Salida esperada:</strong> Cantidad de n√∫meros mayores que 50: 6</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejercicio 3: Diccionario de productos y precios</h3>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>productos = {
    "Manzana": 2.5,
    "Pan": 1.2,
    "Leche": 4.5,
    "Queso": 7.0
}

for producto, precio in productos.items():
    print(producto, "cuesta S/.", precio)</code></pre>
  </div>
  <p><strong>Salida esperada:</strong><br>
  Manzana cuesta S/. 2.5<br>
  Pan cuesta S/. 1.2<br>
  Leche cuesta S/. 4.5<br>
  Queso cuesta S/. 7.0</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejercicio 4: Verificar d√≠a de la semana (Tuplas)</h3>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>dias = ("Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo")

dia = input("Ingresa un d√≠a: ")

if dia in dias:
    print("S√≠, ese d√≠a existe.")
else:
    print("No es un d√≠a v√°lido.")</code></pre>
  </div>
  <p><strong>Ejemplo de salida:</strong><br>
  Ingresa un d√≠a: Martes<br>
  S√≠, ese d√≠a existe.</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejercicio 5: Filtrar notas aprobadas</h3>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>notas = [10, 15, 8, 17, 12, 5, 18]
aprobadas = []

for nota in notas:
    if nota >= 11:
        aprobadas.append(nota)

promedio = sum(aprobadas) / len(aprobadas)

print("Notas aprobadas:", aprobadas)
print("Promedio de aprobadas:", round(promedio, 2))</code></pre>
  </div>
  <p><strong>Salida esperada:</strong><br>
  Notas aprobadas: [15, 17, 12, 18]<br>
  Promedio de aprobadas: 15.5</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejercicio 6: Diccionario de estudiantes aprobados</h3>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>registro = {
    "Ana": 18,
    "Luis": 10,
    "Mar√≠a": 14,
    "Pedro": 8,
    "Luc√≠a": 16
}

print("Estudiantes aprobados:")
for nombre, nota in registro.items():
    if nota >= 14:
        print(nombre, "con nota", nota)</code></pre>
  </div>
  <p><strong>Salida esperada:</strong><br>
  Estudiantes aprobados:<br>
  Ana con nota 18<br>
  Mar√≠a con nota 14<br>
  Luc√≠a con nota 16</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejercicio 7: Ingreso din√°mico y conversi√≥n a tupla</h3>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>precios = []

while True:
    valor = float(input("Ingresa un precio (0 para terminar): "))
    if valor == 0:
        break
    precios.append(valor)

tupla_precios = tuple(precios)
print("Precios registrados:", tupla_precios)
print("Precios ordenados:", sorted(tupla_precios))</code></pre>
  </div>
  <p><strong>Salida esperada:</strong><br>
  Precios registrados: (5.0, 2.0, 9.0)<br>
  Precios ordenados: [2.0, 5.0, 9.0]</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejercicio 8: Sistema de inventario con diccionario</h3>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>inventario = {}

while True:
    print("\n--- MEN√ö ---")
    print("1. Agregar producto")
    print("2. Eliminar producto")
    print("3. Buscar producto")
    print("4. Mostrar inventario")
    print("5. Salir")
    opcion = input("Elige una opci√≥n: ")

    if opcion == "1":
        nombre = input("Nombre del producto: ")
        cantidad = int(input("Cantidad: "))
        inventario[nombre] = cantidad
        print("Producto agregado correctamente.")
    
    elif opcion == "2":
        nombre = input("Producto a eliminar: ")
        if nombre in inventario:
            del inventario[nombre]
            print("Producto eliminado.")
        else:
            print("No existe ese producto.")
    
    elif opcion == "3":
        nombre = input("Producto a buscar: ")
        if nombre in inventario:
            print(nombre, "=> cantidad:", inventario[nombre])
        else:
            print("Producto no encontrado.")
    
    elif opcion == "4":
        print("Inventario actual:")
        for prod, cant in inventario.items():
            print("-", prod, ":", cant)
    
    elif opcion == "5":
        print("Saliendo del programa...")
        break
    else:
        print("Opci√≥n inv√°lida. Intenta nuevamente.")</code></pre>
  </div>
</section>

      
    
    `,
    quiz: `<p><strong>Quiz:</strong> Preguntas sobre funciones y modularizaci√≥n.</p>`
  },
  py4: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    
    
    <p>   
‚úîÔ∏è Comprender y aplicar la definici√≥n de funciones en Python utilizando la palabra clave def, as√≠ como invocar estas funciones para modularizar el c√≥digo y mejorar su legibilidad. <br>
‚úîÔ∏è Dominar el uso de par√°metros, argumentos y valores de retorno (return) para dise√±ar funciones reutilizables y din√°micas<br>
‚úîÔ∏è Diferenciar adecuadamente entre variables locales y globales, gestionar el √°mbito de las variables en funciones <br>
    
   </p> 
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>


<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h3 style="color: #00ffff; font-size: 18px;">1. Introducci√≥n a las funciones en Python</h3>

  <p>
    En los programas desarrollados hasta este punto, todas las instrucciones se ejecutaban de manera <strong>lineal</strong>, una despu√©s de otra. 
    Este enfoque resulta adecuado para programas peque√±os, pero a medida que el c√≥digo crece, se vuelve m√°s dif√≠cil de leer, mantener y reutilizar.
  </p>

  <p>
    Para resolver este problema, <strong>Python</strong> permite dividir el c√≥digo en <strong>funciones</strong>, es decir, bloques independientes 
    que realizan una tarea espec√≠fica. Cada funci√≥n puede ejecutarse cuando se necesite, evitando la repetici√≥n de c√≥digo y mejorando 
    la organizaci√≥n general del programa.
  </p>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 10px;">
    <strong>Ejemplo b√°sico:</strong>
    <pre style="margin-top: 5px;">
def saludar():
    print("¬°Hola! Bienvenido al curso de Python")

# Llamada a la funci√≥n
saludar()
    </pre>
  </div>

  <p>
    En este ejemplo, la funci√≥n <code>saludar()</code> agrupa una acci√≥n espec√≠fica dentro de un bloque reutilizable. 
    Cada vez que se llama la funci√≥n, se ejecuta su contenido sin necesidad de escribir las mismas instrucciones repetidamente.
  </p>

  <h4 style="color: #00bfff;">Ventajas del uso de funciones</h4>

  <ul>
    <li><strong>Modularidad:</strong> divide el programa en partes m√°s peque√±as y manejables.</li>
    <li><strong>Reutilizaci√≥n:</strong> permite emplear el mismo c√≥digo en diferentes secciones del programa.</li>
    <li><strong>Legibilidad:</strong> facilita la comprensi√≥n y el mantenimiento del c√≥digo.</li>
    <li><strong>Colaboraci√≥n:</strong> varios programadores pueden trabajar en funciones distintas del mismo proyecto.</li>
  </ul>

  <p>
    El uso de funciones favorece la <strong>modularidad</strong>, ya que el programa se puede estructurar en componentes m√°s peque√±os, 
    comprensibles y reutilizables. Esta pr√°ctica es esencial en la programaci√≥n moderna, ya que facilita el trabajo en equipo, 
    la depuraci√≥n de errores y el mantenimiento del software 
    (<em>Lutz, 2021</em>).
  </p>

</section>



    
    <section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h3 style="color: #00ffff; font-size: 18px;">1. Definici√≥n de funciones con <code>def</code></h3>

  <p>
    En programaci√≥n, una funci√≥n es un bloque de c√≥digo que realiza una tarea espec√≠fica y que puede reutilizarse cada vez que sea necesario. 
    En lugar de repetir la misma secuencia de instrucciones varias veces, se agrupan dentro de una funci√≥n y luego se invoca con una sola l√≠nea de c√≥digo.
  </p>

  <p><strong>Ventajas de las funciones:</strong></p>
  <ul>
    <li>Dividen el programa en partes m√°s peque√±as y comprensibles.</li>
    <li>Evitan la repetici√≥n del mismo c√≥digo.</li>
    <li>Facilitan el mantenimiento y la lectura del programa.</li>
    <li>Promueven la reutilizaci√≥n, ahorrando tiempo y reduciendo errores.</li>
  </ul>

  <h4 style="color: #00bfff;">Sintaxis b√°sica</h4>

  <p>Se definen con la palabra clave <code>def</code>, seguida del nombre de la funci√≥n, par√©ntesis (opcionalmente con par√°metros) y dos puntos. El bloque de c√≥digo se indentar√° normalmente con cuatro espacios.</p>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 10px;">
    <strong>Ejemplo b√°sico:</strong>
    <pre style="margin-top: 5px;">
def saludar():
    print("¬°Hola! Bienvenido al curso de Python.")

# Llamada a la funci√≥n
saludar()
    </pre>
  </div>

  <p><strong>Salida:</strong> ¬°Hola! Bienvenido al curso de Python.</p>

  <h4 style="color: #00bfff;">Ejemplo con m√∫ltiples instrucciones</h4>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 10px;">
<pre>
def mostrar_mensaje():
    print("Aprender Python es divertido.")
    print("Las funciones hacen el c√≥digo m√°s claro y ordenado.")
    print("¬°Practica creando tus propias funciones!")

mostrar_mensaje()
</pre>
  </div>

  <p><strong>Salida:</strong><br>
    Aprender Python es divertido.<br>
    Las funciones hacen el c√≥digo m√°s claro y ordenado.<br>
    ¬°Practica creando tus propias funciones!
  </p>

  <h4 style="color: #00bfff;">Estructura general de una funci√≥n</h4>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 10px;">
<pre>
def nombre_funcion(par√°metros_opcionales):
    # Bloque de c√≥digo
    # Instrucciones que realiza la funci√≥n
    # Opcionalmente devuelve un valor con return
</pre>
  </div>

  <h4 style="color: #00bfff;">Funciones con l√≥gica interna</h4>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 10px;">
<pre>
def evaluar_edad():
    edad = int(input("Ingrese su edad: "))
    if edad >= 18:
        print("Eres mayor de edad.")
    else:
        print("Eres menor de edad.")
</pre>
  </div>

  <h4 style="color: #00bfff;">Buenas pr√°cticas al definir funciones</h4>

  <ul>
    <li>Usar nombres descriptivos: <code>calcular_promedio()</code>, <code>mostrar_menu()</code>, <code>registrar_usuario()</code>.</li>
    <li>Seguir la convenci√≥n <strong>snake_case</strong>: min√∫sculas con guiones bajos.</li>
    <li>Evitar funciones demasiado largas: una funci√≥n, una tarea principal.</li>
    <li>Comentar el prop√≥sito de la funci√≥n:</li>
  </ul>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 10px;">
<pre>
def mostrar_saludo():
    """Muestra un mensaje de bienvenida al usuario."""
    print("Bienvenido al sistema.")
</pre>
  </div>

  <h4 style="color: #00bfff;">Ejemplo aplicado: men√∫ de opciones</h4>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 10px;">
<pre>
def mostrar_menu():
    print("=== MEN√ö PRINCIPAL ===")
    print("1. Saludar")
    print("2. Mostrar mensaje motivacional")
    print("3. Salir")

def saludar():
    print("¬°Hola! Espero que est√©s teniendo un gran d√≠a.")

def motivar():
    print("Nunca dejes de aprender. ¬°Cada l√≠nea de c√≥digo te hace mejor!")

while True:
    mostrar_menu()
    opcion = input("Selecciona una opci√≥n: ")

    if opcion == "1":
        saludar()
    elif opcion == "2":
        motivar()
    elif opcion == "3":
        print("¬°Hasta luego!")
        break
    else:
        print("Opci√≥n no v√°lida. Intenta nuevamente.")
</pre>
  </div>

  <p>
    Este programa utiliza tres funciones distintas, cada una con una tarea clara. Mejora la organizaci√≥n, facilita la lectura y permite modificar o ampliar el c√≥digo f√°cilmente.
  </p>

  <p>
    <strong>Resumen:</strong> Las funciones son esenciales para crear programas claros, ordenados y reutilizables. Constituyen el primer paso hacia la <strong>programaci√≥n modular</strong>, donde cada componente tiene un prop√≥sito espec√≠fico y puede integrarse con otros sin dificultad.
  </p>

</section>

    
    <section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h3 style="color: #00ffff; font-size: 18px;">2. Par√°metros, argumentos y valores de retorno</h3>

  <p>
    Hasta ahora hemos visto funciones simples que ejecutan instrucciones sin recibir informaci√≥n externa ni devolver resultados. 
    Sin embargo, en la mayor√≠a de los casos, las funciones necesitan recibir datos para trabajar con ellos y, en algunos casos, devolver un resultado.
  </p>

  <p>
    Python permite esto mediante el uso de <strong>par√°metros</strong>, <strong>argumentos</strong> y la instrucci√≥n <code>return</code>.
    Estos elementos hacen que las funciones sean din√°micas, reutilizables y potentes.
  </p>

  <h4 style="color: #00bfff;"> Par√°metros vs Argumentos</h4>

  <table style="width: 100%; border-collapse: collapse; margin-top: 10px; color: white; text-align: left;">
    <tr style="background-color: #003366;">
      <th style="padding: 10px;">Concepto</th>
      <th style="padding: 10px;">Descripci√≥n</th>
    </tr>
    <tr style="background-color: #001f33;">
      <td style="padding: 10px;"><strong>Par√°metro</strong></td>
      <td style="padding: 10px;">Variable definida dentro de los par√©ntesis de la funci√≥n. Act√∫a como espacio reservado para un valor.</td>
    </tr>
    <tr style="background-color: #002b4d;">
      <td style="padding: 10px;"><strong>Argumento</strong></td>
      <td style="padding: 10px;">Valor real que se pasa a la funci√≥n al llamarla, sustituyendo a los par√°metros.</td>
    </tr>
  </table>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 15px;">
<pre>
def saludar(nombre):      # nombre es un par√°metro
    print("Hola,", nombre, "¬°bienvenido al curso!")

saludar("Ana")            # "Ana" es un argumento
saludar("Carlos")
</pre>
  </div>

  <p><strong>Salida:</strong><br>
    Hola, Ana ¬°bienvenido al curso!<br>
    Hola, Carlos ¬°bienvenido al curso!
  </p>

  <h4 style="color: #00bfff;">Funciones con m√∫ltiples par√°metros</h4>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc;">
<pre>
def presentar_persona(nombre, edad):
    print("Nombre:", nombre)
    print("Edad:", edad, "a√±os")

presentar_persona("Luc√≠a", 22)
</pre>
  </div>

  <p><strong>Salida:</strong><br>
    Nombre: Luc√≠a<br>
    Edad: 22 a√±os
  </p>

  <h4 style="color: #00bfff;">Valores de retorno con <code>return</code></h4>

  <p>
    La instrucci√≥n <code>return</code> permite que una funci√≥n devuelva un resultado al lugar donde fue llamada. 
    El valor devuelto puede almacenarse o utilizarse en operaciones posteriores.
  </p>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc;">
<pre>
def sumar(a, b):
    resultado = a + b
    return resultado

total = sumar(5, 3)
print("La suma es:", total)
</pre>
  </div>

  <p><strong>Salida:</strong> La suma es: 8</p>

  <h4 style="color: #00bfff;"> Diferencia entre imprimir y retornar</h4>

  <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
    <tr style="background-color: #003366;">
      <th style="padding: 10px;">Con <code>print()</code></th>
      <th style="padding: 10px;">Con <code>return</code></th>
    </tr>
    <tr style="background-color: #001f33;">
      <td style="padding: 10px;">Solo muestra el resultado en pantalla, no se puede reutilizar.</td>
      <td style="padding: 10px;">Devuelve el valor, que puede usarse en otras operaciones.</td>
    </tr>
  </table>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc; margin-top: 10px;">
<pre>
def cuadrado_con_print(x):
    print(x * x)

def cuadrado_con_return(x):
    return x * x

cuadrado_con_print(4)          # Muestra 16
resultado = cuadrado_con_return(4)
print("El cuadrado es:", resultado)
print(resultado + 10)          # Se puede reutilizar (26)
</pre>
  </div>

  <h4 style="color: #00bfff;"> Tipos de argumentos en Python</h4>

  <ul>
    <li><strong>Argumentos posicionales:</strong> Se asignan seg√∫n el orden.</li>
    <li><strong>Argumentos con nombre (keyword):</strong> Se especifica qu√© valor corresponde a cada par√°metro.</li>
    <li><strong>Par√°metros con valor por defecto:</strong> Tienen un valor asignado si no se pasa argumento.</li>
  </ul>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc;">
<pre>
def restar(a, b):
    return a - b

print(restar(10, 4))          # Posicional ‚Üí 6
print(restar(b=4, a=10))      # Con nombre ‚Üí 6

def saludar(nombre="invitado"):
    print("Hola,", nombre)

saludar()          # Hola, invitado
saludar("Luis")    # Hola, Luis
</pre>
  </div>

  <h4 style="color: #00bfff;"> Ejemplo : c√°lculo de promedio</h4>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc;">
<pre>
def calcular_promedio(n1, n2, n3):
    promedio = (n1 + n2 + n3) / 3
    return promedio

nota_final = calcular_promedio(15, 18, 20)
print("El promedio es:", nota_final)
</pre>
  </div>

  <p><strong>Salida:</strong> El promedio es: 17.67</p>

  <h4 style="color: #00bfff;"> Funciones que devuelven m√∫ltiples valores</h4>

  <p>Python permite retornar varios valores usando tuplas.</p>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc;">
<pre>
def operaciones(a, b):
    suma = a + b
    resta = a - b
    return suma, resta

resultado_suma, resultado_resta = operaciones(10, 4)
print("Suma:", resultado_suma)
print("Resta:", resultado_resta)
</pre>
  </div>

  <p><strong>Salida:</strong><br>
    Suma: 14<br>
    Resta: 6
  </p>

  <h4 style="color: #00bfff;"> Buenas pr√°cticas</h4>

  <ul>
    <li>Usar nombres descriptivos para los par√°metros (<code>precio</code>, <code>cantidad</code>, <code>edad</code>).</li>
    <li>Definir solo los par√°metros necesarios.</li>
    <li>Documentar qu√© recibe y qu√© devuelve la funci√≥n.</li>
    <li>Evitar variables globales; usar par√°metros y <code>return</code>.</li>
    <li>Usar <code>return</code> para valores que se reutilizar√°n.</li>
  </ul>

  <h4 style="color: #00bfff;"> Ejemplo: </h4>

  <div style="background-color: #001f33; padding: 10px; border-radius: 10px; color: #00ffcc;">
<pre>
def calcular_area_rectangulo(base, altura):
    """Calcula y devuelve el √°rea de un rect√°ngulo."""
    area = base * altura
    return area

b = float(input("Ingrese la base: "))
h = float(input("Ingrese la altura: "))

resultado = calcular_area_rectangulo(b, h)
print("El √°rea del rect√°ngulo es:", resultado)
</pre>
  </div>

  <p><strong>Salida esperada:</strong><br>
    Ingrese la base: 5<br>
    Ingrese la altura: 3<br>
    El √°rea del rect√°ngulo es: 15.0
  </p>

  <p>
    Con esta estructura, el programa es m√°s claro, modular y f√°cil de mantener. 
    Cada parte del c√≥digo cumple una funci√≥n espec√≠fica y puede reutilizarse en otros programas.
  </p>

</section>

   <section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h3 style="color: #00ffff;">3. Variables locales y globales</h3>

  <p>
  En <strong>Python</strong>, las variables tienen un <strong>√°mbito o alcance</strong> (<em>scope</em>), que determina d√≥nde pueden ser utilizadas o modificadas dentro del programa. 
  Comprender esta diferencia es fundamental para evitar errores o comportamientos inesperados.
  </p>

  <h4 style="color: #00cccc;">‚û§ Variables locales</h4>

  <p>
  Son aquellas que se declaran dentro de una funci√≥n y solo existen mientras la funci√≥n se ejecuta.
  Una vez que termina, desaparecen de la memoria.
  </p>

  <pre style="background-color:#111; color:#0f0; padding:10px; border-radius:10px;">
def saludar():
    mensaje = "Hola desde la funci√≥n"
    print(mensaje)

saludar()
print(mensaje)  # ‚ùå Error: mensaje no est√° definida fuera de la funci√≥n
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
Hola desde la funci√≥n
NameError: name 'mensaje' is not defined
  </pre>

  <p>
  La variable <strong>mensaje</strong> solo existe dentro de la funci√≥n <code>saludar()</code>.
  Cada vez que se llama, se crea de nuevo evitando conflictos con otras partes del c√≥digo.
  </p>

  <h4 style="color: #00cccc;">‚û§ Variables globales</h4>

  <p>
  Son las que se declaran fuera de cualquier funci√≥n. 
  Pueden ser le√≠das desde cualquier parte del c√≥digo.
  </p>

  <pre style="background-color:#111; color:#0f0; padding:10px; border-radius:10px;">
mensaje = "Python"

def mostrar():
    saludo = "Hola"
    print(saludo, mensaje)

mostrar()
print(mensaje)
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
Hola Python
Python
  </pre>

  <h4 style="color: #00cccc;">‚û§ Modificaci√≥n de variables globales</h4>

  <p>
  Si se intenta cambiar una variable global dentro de una funci√≥n sin declararla como <code>global</code>, Python genera un error.
  </p>

  <pre style="background-color:#111; color:#0f0; padding:10px; border-radius:10px;">
contador = 0

def incrementar():
    contador = contador + 1  # ‚ùå Error
    print("Contador:", contador)

incrementar()
  </pre>

  <p><strong>Error:</strong></p>
  <pre style="background-color:#000; color:#f33; padding:10px; border-radius:10px;">
UnboundLocalError: local variable 'contador' referenced before assignment
  </pre>

  <p>‚úÖ Soluci√≥n correcta:</p>

  <pre style="background-color:#111; color:#0f0; padding:10px; border-radius:10px;">
contador = 0

def incrementar():
    global contador
    contador = contador + 1
    print("Contador:", contador)

incrementar()
incrementar()
print("Valor final:", contador)
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
Contador: 1
Contador: 2
Valor final: 2
  </pre>

  <h4 style="color: #00cccc;">‚û§ Mejor pr√°ctica sin usar <code>global</code></h4>

  <pre style="background-color:#111; color:#0f0; padding:10px; border-radius:10px;">
def incrementar(valor):
    valor = valor + 1
    return valor

contador = 0
contador = incrementar(contador)
contador = incrementar(contador)
print("Valor final:", contador)
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
Valor final: 2
  </pre>

  <h4 style="color: #00cccc;">‚û§ √Åmbito anidado (LEGB)</h4>

  <p>
  Python sigue el orden <strong>Local ‚Üí Enclosing ‚Üí Global ‚Üí Built-in</strong> al buscar variables.
  </p>

  <pre style="background-color:#111; color:#0f0; padding:10px; border-radius:10px;">
x = "global"

def externa():
    x = "enclosing"
    
    def interna():
        x = "local"
        print("Dentro de interna:", x)
    
    interna()
    print("Dentro de externa:", x)

externa()
print("Fuera de todo:", x)
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
Dentro de interna: local
Dentro de externa: enclosing
Fuera de todo: global
  </pre>

  <h4 style="color: #00cccc;">‚û§ Buenas pr√°cticas</h4>

  <ul>
    <li> Usa variables locales siempre que sea posible.</li>
    <li> Evita modificar variables globales.</li>
    <li> Usa nombres descriptivos y distintos en cada √°mbito.</li>
    <li> Comparte datos entre funciones usando par√°metros y retornos, no globales.</li>
  </ul>

  <h4 style="color: #00cccc;">‚û§ Ejemplo final integrador</h4>

  <pre style="background-color:#111; color:#0f0; padding:10px; border-radius:10px;">
# Variable global
curso = "Python B√°sico"

def registrar_estudiante(nombre):
    mensaje = f"El estudiante {nombre} se ha inscrito en el curso {curso}."
    return mensaje

def mostrar_curso():
    print("Curso actual:", curso)

print(registrar_estudiante("Ana"))
mostrar_curso()
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
El estudiante Ana se ha inscrito en el curso Python B√°sico.
Curso actual: Python B√°sico
  </pre>

</section>
 
<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 16px; line-height: 1.8;">

  <h4 style="color: #00ffff;">4. Importaci√≥n de m√≥dulos (<code>math</code>, <code>random</code>)</h4>

  <p>
  En <strong>Python</strong>, un <strong>m√≥dulo</strong> es un archivo que contiene funciones, clases y variables ya definidas y listas para reutilizar. 
  Su uso permite organizar mejor el c√≥digo, reutilizar funciones comunes y ampliar las capacidades del lenguaje sin tener que escribirlas desde cero.
  </p>

  <p>
  Python incluye muchos m√≥dulos est√°ndar (como <code>math</code> o <code>random</code>), y tambi√©n puedes crear los tuyos o instalar otros mediante <code>pip</code>.
  </p>

  <h5 style="color: #00cccc;">‚û§ Importaci√≥n b√°sica</h5>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
import nombre_del_modulo

resultado = nombre_del_modulo.funcion(argumentos)
  </pre>

  <h5 style="color: #00cccc;">‚û§ Ejemplo con el m√≥dulo <code>math</code></h5>

  <p>
  El m√≥dulo <code>math</code> ofrece funciones matem√°ticas avanzadas y constantes como <code>œÄ</code> y <code>e</code>.
  </p>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
import math

raiz = math.sqrt(25)
potencia = math.pow(2, 3)
angulo = math.radians(90)

print("Ra√≠z cuadrada de 25:", raiz)
print("2 elevado a 3:", potencia)
print("90 grados en radianes:", angulo)
  </pre>

  <p><strong>Salida:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
Ra√≠z cuadrada de 25: 5.0
2 elevado a 3: 8.0
90 grados en radianes: 1.5707963267948966
  </pre>

  <h5 style="color: #00cccc;">‚û§ Constantes √∫tiles del m√≥dulo <code>math</code></h5>

  <ul>
    <li><code>math.pi</code> ‚Üí œÄ (3.14159‚Ä¶)</li>
    <li><code>math.e</code> ‚Üí n√∫mero e (2.71828‚Ä¶)</li>
    <li><code>math.ceil(x)</code> ‚Üí redondea hacia arriba</li>
    <li><code>math.floor(x)</code> ‚Üí redondea hacia abajo</li>
    <li><code>math.factorial(x)</code> ‚Üí factorial de un n√∫mero entero</li>
  </ul>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
import math

print("PI =", math.pi)
print("e =", math.e)
print("Factorial de 5 =", math.factorial(5))
print("Redondeo hacia arriba de 4.2:", math.ceil(4.2))
print("Redondeo hacia abajo de 4.8:", math.floor(4.8))
  </pre>

  <h5 style="color: #00cccc;">‚û§ Ejemplo con el m√≥dulo <code>random</code></h5>

  <p>
  El m√≥dulo <code>random</code> permite generar n√∫meros pseudoaleatorios, seleccionar elementos al azar o mezclar listas.
  </p>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
import random

numero = random.randint(1, 10)
print("N√∫mero aleatorio:", numero)
  </pre>

  <p><strong>Salida posible:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
N√∫mero aleatorio: 7
  </pre>

  <h5 style="color: #00cccc;">‚û§ Otras funciones del m√≥dulo <code>random</code></h5>

  <table style="width:100%; border-collapse:collapse; color:white; font-size:15px; margin-top:10px;">
    <tr style="background-color:#003333;">
      <th style="padding:8px; border:1px solid #00cccc;">Funci√≥n</th>
      <th style="padding:8px; border:1px solid #00cccc;">Descripci√≥n</th>
      <th style="padding:8px; border:1px solid #00cccc;">Ejemplo</th>
      <th style="padding:8px; border:1px solid #00cccc;">Resultado posible</th>
    </tr>
    <tr>
      <td style="border:1px solid #00cccc;">random.random()</td>
      <td style="border:1px solid #00cccc;">Genera un n√∫mero entre 0.0 y 1.0</td>
      <td style="border:1px solid #00cccc;">random.random()</td>
      <td style="border:1px solid #00cccc;">0.5432</td>
    </tr>
    <tr>
      <td style="border:1px solid #00cccc;">random.randint(a, b)</td>
      <td style="border:1px solid #00cccc;">Entero entre a y b (incluidos)</td>
      <td style="border:1px solid #00cccc;">random.randint(1, 5)</td>
      <td style="border:1px solid #00cccc;">4</td>
    </tr>
    <tr>
      <td style="border:1px solid #00cccc;">random.choice(lista)</td>
      <td style="border:1px solid #00cccc;">Elemento aleatorio de una lista</td>
      <td style="border:1px solid #00cccc;">random.choice(["rojo","azul","verde"])</td>
      <td style="border:1px solid #00cccc;">"azul"</td>
    </tr>
    <tr>
      <td style="border:1px solid #00cccc;">random.shuffle(lista)</td>
      <td style="border:1px solid #00cccc;">Mezcla los elementos de una lista</td>
      <td style="border:1px solid #00cccc;">random.shuffle(cartas)</td>
      <td style="border:1px solid #00cccc;">lista desordenada</td>
    </tr>
    <tr>
      <td style="border:1px solid #00cccc;">random.uniform(a, b)</td>
      <td style="border:1px solid #00cccc;">Decimal entre a y b</td>
      <td style="border:1px solid #00cccc;">random.uniform(1, 5)</td>
      <td style="border:1px solid #00cccc;">3.276</td>
    </tr>
  </table>

  <h5 style="color: #00cccc;">‚û§ Ejemplo pr√°ctico</h5>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
import random

colores = ["rojo", "azul", "verde", "amarillo"]

print("Color elegido:", random.choice(colores))

numeros = [1, 2, 3, 4, 5]
random.shuffle(numeros)
print("Lista mezclada:", numeros)
  </pre>

  <h5 style="color: #00cccc;">‚û§ Importaci√≥n parcial y alias</h5>

  <p>
  Puedes importar funciones espec√≠ficas o usar alias para simplificar el c√≥digo.
  </p>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
from math import sqrt, pi

print("Ra√≠z de 16:", sqrt(16))
print("Valor de PI:", pi)
  </pre>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
import math as m

print("Ra√≠z de 36:", m.sqrt(36))
print("PI =", m.pi)
  </pre>

  <h5 style="color: #00cccc;">‚û§ Ejemplo integrador: uso combinado</h5>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
import math
import random

num = random.randint(1, 100)
raiz = math.sqrt(num)
redondeado = math.ceil(raiz)

print(f"N√∫mero aleatorio: {num}")
print(f"Ra√≠z cuadrada: {raiz}")
print(f"Redondeo hacia arriba: {redondeado}")
  </pre>

  <p><strong>Salida posible:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
N√∫mero aleatorio: 49
Ra√≠z cuadrada: 7.0
Redondeo hacia arriba: 7
  </pre>

  <h5 style="color: #00cccc;">‚û§ Ventajas del uso de m√≥dulos</h5>

  <ul>
    <li> Reutilizan c√≥digo probado y optimizado.</li>
    <li> Aumentan la organizaci√≥n y legibilidad.</li>
    <li> Facilitan mantenimiento y colaboraci√≥n.</li>
    <li> Ahorra tiempo al no escribir funciones complejas.</li>
    <li> Permite combinar m√≥dulos para tareas avanzadas.</li>
  </ul>

  <h5 style="color: #00cccc;">‚û§ Ejemplo final</h5>

  <pre style="background-color:#111; color:white; padding:10px; border-radius:10px;">
import math
import random

print("=== Simulaci√≥n matem√°tica ===")
x = random.uniform(1, 50)
raiz = math.sqrt(x)
angulo = math.radians(random.randint(0, 180))
seno = math.sin(angulo)

print(f"N√∫mero generado: {x:.2f}")
print(f"Ra√≠z cuadrada: {raiz:.2f}")
print(f"Seno del √°ngulo aleatorio: {seno:.3f}")
  </pre>

  <p><strong>Salida posible:</strong></p>
  <pre style="background-color:#000; color:#0ff; padding:10px; border-radius:10px;">
=== Simulaci√≥n matem√°tica ===
N√∫mero generado: 23.47
Ra√≠z cuadrada: 4.84
Seno del √°ngulo aleatorio: 0.866
  </pre>

  <p>
  El uso de m√≥dulos como <strong>math</strong> y <strong>random</strong> demuestra la potencia de Python para realizar c√°lculos y operaciones aleatorias de forma sencilla y eficiente.
  </p>

</section>

<section style="text-align:left; margin:0; font-family: Arial, sans-serif; color:#ffffff; background:none;">
  <h3 style="font-size:18px; margin:6px 0;">üé• V√≠deos recomendados: </h3>

  <p style="margin:8px 0;">
    <strong>Code Hive.</strong> (2022, julio 21). <em>Funciones en Python | Par√°metros y Return (Ejemplos)</em> [Video]. YouTube.<br>
    <a href="https://www.youtube.com/watch?v=g78juF9pB_w" target="_blank" rel="noopener" style="color:#00ffff;">https://www.youtube.com/watch?v=g78juF9pB_w</a>
  </p>

  <p style="margin:8px 0;">
    <strong>Sergio A. Casta√±o Giraldo.</strong> (2021, marzo 29). <em>Funciones en Python desde Cero - Ejercicios Resueltos [DEF]</em> [Video]. YouTube.<br>
    <a href="https://www.youtube.com/watch?v=hrv1ruHxiQY" target="_blank" rel="noopener" style="color:#00ffff;">https://www.youtube.com/watch?v=hrv1ruHxiQY</a>
  </p>
</section>

    
    `,
    ejemplos: `<p><strong>Ejemplos:</strong></p>
    <section style="color: #ddd; text-align: left; margin-left: 20px; font-size: 15px; line-height: 1.8; font-family: 'Consolas', monospace;">

  <h3 style="color: #00ffff; font-size: 16px;"> Ejemplo 1: Funci√≥n sin par√°metros</h3>
  <p><strong>Enunciado:</strong> Crear una funci√≥n <code>saludar()</code> que imprima un mensaje de bienvenida al usuario, luego llamarla.</p>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>def saludar():
    print("¬°Hola! Bienvenido al curso de Python.")

saludar()</code></pre>
  </div>
  <p><strong>Observaciones:</strong> Introducci√≥n a funciones sin par√°metros ni retorno. Permite ver la modularidad b√°sica.</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejemplo 2: Funci√≥n con par√°metros</h3>
  <p><strong>Enunciado:</strong> Crear una funci√≥n <code>presentar_persona(nombre, edad)</code> que reciba dos par√°metros y los muestre.</p>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>def presentar_persona(nombre, edad):
    print("Nombre:", nombre)
    print("Edad:", edad, "a√±os")

presentar_persona("Luc√≠a", 22)</code></pre>
  </div>
  <p><strong>Notas:</strong> Uso de par√°metros posicionales. Ejemplo claro de entrada de datos en funci√≥n.</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejemplo 3: Funci√≥n con retorno</h3>
  <p><strong>Enunciado:</strong> Crear una funci√≥n <code>sumar(a, b)</code> que devuelva la suma de dos n√∫meros y luego usar el resultado.</p>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>def sumar(a, b):
    resultado = a + b
    return resultado

total = sumar(5, 3)
print("La suma es:", total)</code></pre>
  </div>
  <p><strong>Observaciones:</strong> Introducci√≥n de <code>return</code>. Diferencia entre imprimir directamente y devolver valor.</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejemplo 4: Promedio de tres notas</h3>
  <p><strong>Enunciado:</strong> Crear una funci√≥n <code>calcular_promedio(n1, n2, n3)</code> que devuelva el promedio de tres notas.</p>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>def calcular_promedio(n1, n2, n3):
    promedio = (n1 + n2 + n3) / 3
    return promedio

nota_final = calcular_promedio(15, 18, 20)
print("El promedio es:", round(nota_final, 2))</code></pre>
  </div>
  <p><strong>Notas:</strong> Uso de m√∫ltiples par√°metros, retorno y formateo de resultado.</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejemplo 5: Incrementar contador</h3>
  <p><strong>Enunciado:</strong> Crear una funci√≥n <code>incrementar(valor)</code> que reciba un n√∫mero y devuelva el valor incrementado en uno.</p>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>def incrementar(valor):
    valor = valor + 1
    return valor

contador = 0
contador = incrementar(contador)
contador = incrementar(contador)
print("Valor final:", contador)</code></pre>
  </div>
  <p><strong>Observaciones:</strong> Ejemplo de retorno para modificar estado externo sin variables globales.</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejemplo 6: Uso de variable global</h3>
  <p><strong>Enunciado:</strong> Crear una variable global y funciones que la usen para mostrar informaci√≥n.</p>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>curso = "Python B√°sico"

def registrar_estudiante(nombre):
    mensaje = f"El estudiante {nombre} se ha inscrito en el curso {curso}."
    return mensaje

def mostrar_curso():
    print("Curso actual:", curso)

print(registrar_estudiante("Ana"))
mostrar_curso()</code></pre>
  </div>
  <p><strong>Notas:</strong> Ejemplo de uso seguro de variable global sin modificarla dentro de la funci√≥n.</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejemplo 7: Retornar m√∫ltiples valores</h3>
  <p><strong>Enunciado:</strong> Crear una funci√≥n <code>operaciones(a, b)</code> que devuelva la suma y la resta de dos n√∫meros.</p>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>def operaciones(a, b):
    suma = a + b
    resta = a - b
    return suma, resta

resultado_suma, resultado_resta = operaciones(10, 4)
print("Suma:", resultado_suma)
print("Resta:", resultado_resta)</code></pre>
  </div>
  <p><strong>Observaciones:</strong> Retorno m√∫ltiple (tupla) y desempaquetado de resultados.</p>

  <h3 style="color: #00ffff; font-size: 16px;"> Ejemplo 8: Programa modular con men√∫</h3>
  <p><strong>Enunciado:</strong> Crear un programa con funciones <code>mostrar_menu()</code>, <code>saludar()</code> y <code>motivar()</code>, y un bucle principal que permita elegir opciones.</p>
  <div style="background-color: #111; padding: 12px; border-radius: 8px;">
  <pre><code>def mostrar_menu():
    print("=== MEN√ö PRINCIPAL ===")
    print("1. Saludar")
    print("2. Mostrar mensaje motivacional")
    print("3. Salir")

def saludar():
    print("¬°Hola! Espero que est√©s teniendo un gran d√≠a.")

def motivar():
    print("Nunca dejes de aprender. ¬°Cada l√≠nea de c√≥digo te hace mejor!")

while True:
    mostrar_menu()
    opcion = input("Selecciona una opci√≥n: ")

    if opcion == "1":
        saludar()
    elif opcion == "2":
        motivar()
    elif opcion == "3":
        print("¬°Hasta luego!")
        break
    else:
        print("Opci√≥n no v√°lida. Intenta nuevamente.")</code></pre>
  </div>
  <p><strong>Notas:</strong> Integra funciones, bucles, condicionales y modularidad. Ejemplo completo y pr√°ctico.</p>

</section>

    
    
    
    `,
  
  },

  py5: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    
    
    <p>   
‚úîÔ∏è Comprender el concepto de bucle como estructura de control repetitiva y explicar sus componentes <br>
‚úîÔ∏è Diferenciar entre los tipos de bucles (while y for), saber cu√°ndo usar cada uno y reconocer sus ventajas y limitaciones.<br>
‚úîÔ∏è Aplicar bucles junto con condicionales para procesar colecciones, filtrar datos y optimizar algoritmos mediante t√©cnicas como break y continue. <br>
    
   </p> 
    
    
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>
<section style="color: white; text-align: justify; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 15px;">1. Concepto de bucle y su funci√≥n en los algoritmos</h2>
  <p>
    Un <strong>bucle</strong> (o ciclo) es una estructura de control que permite repetir un conjunto de instrucciones de manera continua mientras se cumpla una condici√≥n l√≥gica.
    Su funci√≥n principal es automatizar tareas repetitivas, evitando la redundancia de c√≥digo y permitiendo construir programas m√°s compactos, eficientes y f√°ciles de mantener (Lutz, 2013).
  </p>

  <h3 style="color: #66ffff; font-size: 13px;">1.1. Importancia en los algoritmos</h3>
  <p>
    En l√≥gica de programaci√≥n, los bucles constituyen un pilar esencial del control de flujo, junto con las estructuras condicionales y secuenciales.
    Gracias a ellos, los algoritmos pueden:
  </p>
  <ul>
    <li>Repetir operaciones sin reescribir el mismo bloque de c√≥digo.</li>
    <li>Procesar colecciones de datos (arrays, objetos).</li>
    <li>Modelar fen√≥menos o procesos iterativos (movimiento, conteo, simulaciones).</li>
    <li>Implementar c√°lculos acumulativos o progresivos (sumas, promedios, b√∫squedas).</li>
  </ul>
  <p>
    Seg√∫n McKinney (2022), la repetici√≥n es una caracter√≠stica fundamental de los programas orientados a datos, pues la mayor√≠a de los an√°lisis computacionales implican recorrer series o matrices m√∫ltiples veces.
  </p>

  <h3 style="color: #66ffff; font-size: 13px;">1.2. Componentes b√°sicos de un bucle</h3>
  <ul>
    <li><strong>Inicializaci√≥n:</strong> define las variables de control.</li>
    <li><strong>Condici√≥n:</strong> determina si el ciclo contin√∫a o termina.</li>
    <li><strong>Cuerpo:</strong> conjunto de instrucciones que se repiten.</li>
    <li><strong>Actualizaci√≥n:</strong> cambio que asegura la finalizaci√≥n del ciclo.</li>
  </ul>

  <h3 style="color: #66ffff; font-size: 13px;">1.3. Tipos de bucles en JavaScript</h3>
  <ul>
    <li><strong>Bucle while:</strong> repite mientras la condici√≥n sea verdadera.</li>
    <li><strong>Bucle for:</strong> repite un n√∫mero determinado de veces o recorre colecciones.</li>
  </ul>

  <h2 style="color: #00ffff; font-size: 15px;">2. Estructura ‚ÄúMientras‚Äù (while)</h2>
  <p>
    El bucle <strong>while</strong> ejecuta un bloque de c√≥digo mientras se cumpla una condici√≥n l√≥gica.
    Si la condici√≥n es falsa al inicio, el bucle no se ejecuta.
  </p>

  <h3 style="color: #66ffff; font-size: 13px;">2.1. Sintaxis general</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
while (condici√≥n) {
  // bloque de instrucciones
}
  </pre>

  <h3 style="color: #66ffff; font-size: 13px;">2.2. Ejemplo simple</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
let i = 1;
while (i &lt;= 3) {
  console.log("Iteraci√≥n:", i);
  i++;
}
// Salida:
// Iteraci√≥n: 1
// Iteraci√≥n: 2
// Iteraci√≥n: 3
  </pre>

  <h3 style="color: #66ffff; font-size: 13px;">2.3. Bucle infinito</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
let x = 1;
while (x &gt; 0) {
  console.log("Nunca termina...");
}
  </pre>

  <h3 style="color: #66ffff; font-size: 13px;">2.4. Ejemplo pr√°ctico: men√∫</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
let opcion = "";
while (opcion !== "salir") {
  opcion = prompt("Men√∫: [1] Sumar [2] Restar [salir]");
  console.log("Elegiste:", opcion);
}
console.log("Programa finalizado.");
  </pre>

  <h2 style="color: #00ffff; font-size: 15px;">3. Estructura ‚ÄúPara‚Äù (for)</h2>
  <p>
    El bucle <strong>for</strong> permite recorrer una secuencia o repetir un bloque de c√≥digo un n√∫mero determinado de veces.
  </p>

  <h3 style="color: #66ffff; font-size: 13px;">3.1. Sintaxis general</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
for (inicializaci√≥n; condici√≥n; actualizaci√≥n) {
  // bloque de instrucciones
}
  </pre>

  <h3 style="color: #66ffff; font-size: 13px;">3.2. Ejemplo b√°sico</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
for (let i = 1; i &lt;= 5; i++) {
  console.log("N√∫mero:", i);
}
  </pre>

  <h3 style="color: #66ffff; font-size: 13px;">3.3. Recorriendo arreglos</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
const colores = ["rojo", "verde", "azul"];
for (let color of colores) {
  console.log("Color:", color);
}
  </pre>

  <h3 style="color: #66ffff; font-size: 13px;">3.4. Recorriendo cadenas</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
for (let letra of "JavaScript") {
  console.log(letra);
}
  </pre>

  <h3 style="color: #66ffff; font-size: 13px;">3.5. Ejemplo con √≠ndice</h3>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
const nombres = ["Ana", "Luis", "Carlos"];
for (let i = 0; i &lt; nombres.length; i++) {
  console.log("Posici√≥n", i, ":", nombres[i]);
}
  </pre>

  <section style="color: white; text-align: justify; margin-left: 0px; margin-right: 10px; font-size: 15px; line-height: 1.8;">

  <h2 style="color: #00ffff; font-size: 15px;">4. Combinaci√≥n de bucles y condicionales</h2>
  <p>
    En programaci√≥n, la combinaci√≥n de bucles (repeticiones) y estructuras condicionales (decisiones) es una pr√°ctica fundamental para crear algoritmos din√°micos que puedan ejecutar acciones diferentes seg√∫n las circunstancias que ocurren en cada iteraci√≥n.
  </p>
  <p>
    Mientras que los bucles permiten repetir bloques de c√≥digo m√∫ltiples veces, las condicionales (como <strong>if</strong>, <strong>else if</strong>, <strong>else</strong>) determinan qu√© acci√≥n realizar en cada repetici√≥n, dependiendo de una condici√≥n l√≥gica.
  </p>
  <p>
    Esta integraci√≥n permite procesar datos, filtrar informaci√≥n, controlar flujos y optimizar la ejecuci√≥n de programas, especialmente en tareas que requieren analizar colecciones, listas o secuencias num√©ricas.
  </p>

  <h3 style="color: #66ffff; font-size: 13px;">4.1. Contar n√∫meros pares</h3>
  <p><strong>C√≥digo</strong></p>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
let pares = 0;
for (let i = 1; i <= 10; i++) {
  if (i % 2 === 0) {
    pares++;
  }
}
console.log("Cantidad de pares:", pares);
  </pre>

  <p><strong>Explicaci√≥n paso a paso</strong></p>
  <ul>
    <li>Se inicializa una variable llamada <strong>pares</strong> con el valor 0. Esta variable servir√° como contador para registrar cu√°ntos n√∫meros pares se encuentran.</li>
    <li>El bucle <strong>for</strong> recorre los n√∫meros del 1 al 10, aumentando <strong>i</strong> en una unidad en cada iteraci√≥n.</li>
    <li>Dentro del bucle, se utiliza una condicional <strong>if</strong> para verificar si el n√∫mero actual (<strong>i</strong>) es par.</li>
    <li>La expresi√≥n <strong>i % 2 === 0</strong> usa el operador m√≥dulo (%), que devuelve el resto de una divisi√≥n.</li>
    <li>Si el resto de dividir <strong>i</strong> entre 2 es igual a 0, significa que el n√∫mero es par.</li>
    <li>Si la condici√≥n es verdadera, se incrementa el contador <strong>pares</strong> en uno (<strong>pares++</strong>).</li>
    <li>Al finalizar el bucle, se muestra el total con <strong>console.log()</strong>.</li>
  </ul>

  <p><strong>Resultado</strong><br>Cantidad de pares: 5</p>

  <p><strong>An√°lisis</strong><br>
    Este ejemplo combina un bucle iterativo con una condicional de evaluaci√≥n para realizar un conteo selectivo.
    Este tipo de estructura es fundamental en la anal√≠tica de datos, donde es necesario contar elementos que cumplen una condici√≥n espec√≠fica, como n√∫meros positivos, aprobados en un examen o registros v√°lidos.
  </p>

  <h3 style="color: #66ffff; font-size: 13px;">4.2. Filtrar datos positivos</h3>
  <p><strong>C√≥digo</strong></p>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
const datos = [5, -2, 7, -1, 0, 3];
const positivos = [];
for (let n of datos) {
  if (n > 0) {
    positivos.push(n);
  }
}
console.log("N√∫meros positivos:", positivos);
  </pre>

  <p><strong>Explicaci√≥n paso a paso</strong></p>
  <ul>
    <li>Se declara un arreglo (<strong>array</strong>) llamado <strong>datos</strong> que contiene n√∫meros positivos, negativos y cero.</li>
    <li>Se crea un arreglo vac√≠o <strong>positivos</strong>, donde se almacenar√°n solo los valores que cumplan la condici√≥n.</li>
    <li>El bucle <strong>for...of</strong> recorre cada elemento del arreglo <strong>datos</strong>.</li>
    <li>En cada iteraci√≥n, la condicional <strong>if</strong> eval√∫a si el n√∫mero actual <strong>n</strong> es mayor que cero (<strong>n > 0</strong>).</li>
    <li>Si la condici√≥n se cumple, el n√∫mero se agrega al nuevo arreglo <strong>positivos</strong> mediante el m√©todo <strong>.push()</strong>.</li>
    <li>Al finalizar, se imprime el arreglo con todos los valores positivos.</li>
  </ul>

  <p><strong>Salida</strong><br>N√∫meros positivos: [5, 7, 3]</p>

  <p><strong>An√°lisis</strong><br>
    Este tipo de estructura permite filtrar informaci√≥n de una colecci√≥n seg√∫n una regla espec√≠fica.
    En la pr√°ctica, se usa en procesos de limpieza de datos, validaciones de entrada, o an√°lisis estad√≠stico, donde se deben conservar solo ciertos valores que cumplan condiciones de validez o calidad.
  </p>

  <h3 style="color: #66ffff; font-size: 13px;">4.3. Corte de ciclo (break)</h3>
  <p><strong>C√≥digo</strong></p>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
for (let i = 1; i < 10; i++) {
  if (i === 5) break;
  console.log(i);
}
// Se detiene al llegar a 5
  </pre>

  <p><strong>Explicaci√≥n paso a paso</strong></p>
  <ul>
    <li>El bucle <strong>for</strong> inicia en 1 y se repite mientras <strong>i</strong> sea menor que 10.</li>
    <li>En cada iteraci√≥n, se eval√∫a la condici√≥n <strong>if (i === 5)</strong>.</li>
    <li>Cuando <strong>i</strong> llega al valor 5, la condici√≥n se cumple y se ejecuta la instrucci√≥n <strong>break;</strong>.</li>
    <li>El <strong>break</strong> interrumpe inmediatamente la ejecuci√≥n del bucle, sin importar si quedaban iteraciones pendientes.</li>
    <li>Por tanto, solo se imprimen los n√∫meros del 1 al 4, y el bucle se detiene antes de llegar al 5.</li>
  </ul>

  <p><strong>Salida</strong><br>1<br>2<br>3<br>4</p>

  <p><strong>An√°lisis</strong><br>
    El comando <strong>break</strong> es √∫til cuando se desea detener un bucle bajo una condici√≥n particular.  
    Se emplea en casos como:
  </p>
  <ul>
    <li>Buscar un elemento dentro de una lista y detenerse al encontrarlo.</li>
    <li>Interrumpir procesos al detectar un error.</li>
    <li>Finalizar un ciclo anticipadamente por condiciones externas (por ejemplo, cuando el usuario cancela una operaci√≥n).</li>
  </ul>
  <p>
    En algoritmos de b√∫squeda o exploraci√≥n, <strong>break</strong> mejora el rendimiento, ya que evita realizar iteraciones innecesarias despu√©s de alcanzar el objetivo.
  </p>

  <h3 style="color: #66ffff; font-size: 13px;">4.4. Saltar iteraciones (continue)</h3>
  <p><strong>C√≥digo</strong></p>
  <pre style="background-color: #1a1a1a; color: white; padding: 10px; border-radius: 8px;">
for (let i = 1; i <= 6; i++) {
  if (i === 3) continue;
  console.log(i);
}

  </pre>

  <p><strong>Explicaci√≥n paso a paso</strong></p>
  <ul>
    <li>El bucle recorre los n√∫meros del 1 al 6.</li>
    <li>En cada iteraci√≥n, se eval√∫a la condici√≥n <strong>if (i === 3)</strong>.</li>
    <li>Cuando <strong>i</strong> vale 3, se ejecuta la instrucci√≥n <strong>continue;</strong>.</li>
    <li><strong>continue</strong> no termina el bucle, sino que salta directamente a la siguiente iteraci√≥n, omitiendo el resto del c√≥digo dentro del bloque actual.</li>
    <li>Por lo tanto, el n√∫mero 3 no se imprime, pero los dem√°s s√≠.</li>
  </ul>

  <p><strong>Salida</strong><br>1<br>2<br>4<br>5<br>6</p>

  <p><strong>An√°lisis</strong><br>
    El uso de <strong>continue</strong> permite saltar casos espec√≠ficos dentro de una repetici√≥n sin detener completamente el proceso.  
    Es √∫til cuando se desea ignorar temporalmente ciertos valores o condiciones, como:
  </p>
  <ul>
    <li>Saltar datos inv√°lidos.</li>
    <li>Omitir elementos vac√≠os en una lista.</li>
    <li>Evitar c√°lculos cuando una condici√≥n no lo amerita.</li>
  </ul>
  <p>
    A diferencia de <strong>break</strong>, que finaliza el ciclo, <strong>continue</strong> solo omite una vuelta.
  </p>

</section>












  
// Se omite el n√∫mero 3, pero el bucle contin√∫a
  </pre>

  <h2 style="color: #00ffff; font-size: 15px;">5. Buenas pr√°cticas</h2>
  <ul>
    <li>Inicializar correctamente las variables antes del bucle.</li>
    <li>Verificar que la condici√≥n de salida se cumpla.</li>
    <li>Evitar bucles infinitos no controlados.</li>
    <li>Nombrar las variables de forma clara y significativa.</li>
    <li>No modificar la colecci√≥n que se recorre dentro del bucle.</li>
    <li>Comentar el prop√≥sito del ciclo.</li>
  </ul>

</section>

    
     <section style="text-align:left; margin:0; font-family: Arial, sans-serif; color:#ffffff; background:none;">
  <h3 style="font-size:18px; margin:6px 0;">üé• V√≠deos recomendados</h3>

  <p style="margin:8px 0;">
    <strong>Sergio A. Casta√±o Giraldo.</strong> (2021, abril 26). 
    <em>Bucle While en Python desde Cero ‚ôªÔ∏è [Continue y Break]</em> [Video]. YouTube.<br>
    <a href="https://www.youtube.com/watch?v=nQxWthR71PI" target="_blank" rel="noopener" style="color:#00ffff;">
      https://www.youtube.com/watch?v=nQxWthR71PI
    </a>
  </p>

  <p style="margin:8px 0;">
    <strong>Charly Cimino.</strong> (2023, agosto 5). 
    <em>Ciclo WHILE en Python üêç</em> [Video]. YouTube.<br>
    <a href="https://www.youtube.com/watch?v=IyI2ZuOq_xQ" target="_blank" rel="noopener" style="color:#00ffff;">
      https://www.youtube.com/watch?v=IyI2ZuOq_xQ
    </a>
  </p>

  <p style="margin:8px 0;">
    <strong>OMES.</strong> (2023, junio 26). 
    <em>Bucle for | Curso de Python desde cero üêç</em> [Video]. YouTube.<br>
    <a href="https://www.youtube.com/watch?v=AP8-5GRwPig" target="_blank" rel="noopener" style="color:#00ffff;">
      https://www.youtube.com/watch?v=AP8-5GRwPig
    </a>
  </p>
</section>
 
    
    
    
    
    
    
    `,
    ejemplos: `<p><strong>Ejemplos:</strong> </p>
    
<section style="text-align:left; color:#ffffff; font-family: Arial, sans-serif; line-height:1.6;">

  <h3 style="font-size:18px; margin:8px 0;">Ejemplo 1: Imprimir los n√∫meros del 1 al 10</h3>
  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:10px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code>for i in range(1, 11):
    print(i)
</code></pre>
  <p><strong>Observaci√≥n:</strong> Ejemplo cl√°sico para aprender la estructura <code>for</code>. <code>range(1, 11)</code> genera los n√∫meros del 1 al 10.</p>

  <h3 style="font-size:18px; margin:8px 0;">Ejemplo 2: Leer 5 n√∫meros y mostrar los mayores que 50</h3>
  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:10px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code>mayores = []

for i in range(5):
    num = int(input(f"Ingrese el n√∫mero {i + 1}: "))
    if num > 50:
        mayores.append(num)

print("N√∫meros mayores que 50:", mayores)
</code></pre>
  <p><strong>Observaci√≥n:</strong> Combina <code>for</code> e <code>if</code>. Se almacenan los n√∫meros que cumplen la condici√≥n en una lista.</p>

  <h3 style="font-size:18px; margin:8px 0;">Ejemplo 3: Validar n√∫mero mayor que 0</h3>
  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:10px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code>numero = 0

while numero <= 0:
    numero = int(input("Ingrese un n√∫mero mayor que 0: "))

print("N√∫mero v√°lido ingresado:", numero)
</code></pre>
  <p><strong>Observaci√≥n:</strong> Uso del bucle <code>while</code> para validar entrada. Se repite hasta que el usuario cumpla la condici√≥n.</p>

  <h3 style="font-size:18px; margin:8px 0;">Ejemplo 4: Contar personas en rango de edad 18-65</h3>
  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:10px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code>edades = [15, 22, 35, 70, 18, 64, 10]
contador = 0

for edad in edades:
    if 18 <= edad <= 65:
        contador += 1

print("Personas entre 18 y 65 a√±os:", contador)
</code></pre>
  <p><strong>Observaci√≥n:</strong> El operador l√≥gico compuesto <code>18 &lt;= edad &lt;= 65</code> permite verificar si el valor est√° dentro del rango.</p>

  <h3 style="font-size:18px; margin:8px 0;">Ejemplo 5: Contar vocales en un texto</h3>
  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:10px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code>texto = input("Ingrese un texto: ").lower()
vocales = "aeiou"
contador = 0

for letra in texto:
    if letra in vocales:
        contador += 1

print("Cantidad de vocales:", contador)
</code></pre>
  <p><strong>Observaci√≥n:</strong> Combina bucles, condicionales e iteraci√≥n sobre una cadena de texto.</p>

  <h3 style="font-size:18px; margin:8px 0;">Ejemplo 6: Calcular cu√°ntos precios superan 1000 y aplicar descuento al total</h3>
  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:10px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code>precios = [500, 1200, 800, 1500, 2000]
contador = 0
total = 0

for precio in precios:
    total += precio
    if precio > 1000:
        contador += 1

# Aplicar descuento del 10% si hay m√°s de 2 precios altos
if contador > 2:
    total *= 0.9

print("Productos mayores a 1000:", contador)
print("Total con posible descuento:", total)
</code></pre>
  <p><strong>Observaci√≥n:</strong> Ejemplo t√≠pico de acumuladores y condicionales anidadas para c√°lculos m√°s elaborados.</p>

  <h3 style="font-size:18px; margin:8px 0;">Ejemplo 7: Hallar el m√°ximo de cada fila en una matriz</h3>
  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:10px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code>matriz = [
    [3, 8, 1],
    [12, 5, 7],
    [4, 9, 2]
]

for fila in matriz:
    maximo = fila[0]
    for num in fila:
        if num > maximo:
            maximo = num
    print("M√°ximo de la fila:", maximo)
</code></pre>
  <p><strong>Observaci√≥n:</strong> Uso de bucles anidados (<code>for</code> dentro de <code>for</code>). Se analizan listas de listas.</p>

  <h3 style="font-size:18px; margin:8px 0;">Ejemplo 8: Juego de adivinar n√∫mero con m√°ximo 7 intentos</h3>
  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:10px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code>import random

secreto = random.randint(1, 100)
intentos = 0
adivinado = False

print(" Adivina el n√∫mero (entre 1 y 100). Tienes 7 intentos.")

while intentos < 7:
    intento = int(input(f"Intento {intentos + 1}: "))
    intentos += 1

    if intento == secreto:
        print("¬°Felicidades!  Adivinaste el n√∫mero en", intentos, "intentos.")
        adivinado = True
        break
    elif intento < secreto:
        print("El n√∫mero secreto es mayor.")
    else:
        print("El n√∫mero secreto es menor.")

if not adivinado:
    print(" Has agotado tus intentos. El n√∫mero era:", secreto)
</code></pre>
  <p><strong>Observaci√≥n:</strong> Combina <code>while</code>, <code>if</code>, <code>break</code>, contadores y condiciones m√∫ltiples. Ejercicio cl√°sico de control de flujo completo.</p>

</section>

    
    
    
    `,
   
  },

  py6: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    
      <p>   
‚úîÔ∏è Aplicar las estructuras de control y repetici√≥n en el desarrollo de programas completos en Python.<br>
‚úîÔ∏è Desarrollar sistemas simples que integren entradas, c√°lculos, decisiones y salidas <br>
‚úîÔ∏è Fomentar la l√≥gica algor√≠tmica mediante la pr√°ctica y resoluci√≥n de problemas reales. <br>
    
   </p> 
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>
    
    <section style="text-align:left; color:#ffffff; font-family: Arial, sans-serif; line-height:1.8;">

  <h2 style="font-size:14px; margin-bottom:10px;"> Aplicaci√≥n pr√°ctica de la programaci√≥n en Python</h2>

  <p>
    En este tema se integran todos los conceptos aprendidos en el curso: variables, funciones, estructuras condicionales, bucles, manejo de listas y control de flujo.
    El objetivo es crear programas funcionales que resuelvan problemas reales mediante una l√≥gica estructurada y modular.
  </p>

  <p>
    Python destaca por su claridad y simplicidad, lo que lo convierte en un lenguaje ideal para aplicar el pensamiento algor√≠tmico en proyectos pr√°cticos.
    Como menciona <strong>McKinney (2022)</strong>, el aprendizaje significativo en programaci√≥n se logra cuando el estudiante es capaz de combinar estructuras b√°sicas
    para construir soluciones completas, pasando del conocimiento te√≥rico a la implementaci√≥n efectiva.
  </p>

  <p>En esta etapa, el estudiante aprende a:</p>

  <ul style="margin-left:25px;">
    <li>Planificar un programa (entrada, proceso, salida).</li>
    <li>Aplicar estructuras de control seg√∫n las necesidades del problema.</li>
    <li>Modularizar el c√≥digo en funciones reutilizables.</li>
    <li>Validar datos y manejar errores.</li>
    <li>Mejorar la legibilidad del programa con comentarios y nombres descriptivos.</li>
  </ul>

</section>

    <section style="text-align:left; color:#ffffff; font-family: Arial, sans-serif; line-height:1.6;">

  <h2 style="font-size:18px; color:#58a6ff; margin-bottom:15px;"> Proyectos pr√°cticos en Python</h2>

  <!-- Proyecto 1 -->
  <h3 style="font-size:16px; margin-top:15px;">1. Gestor de notas</h3>
  <p><strong>Objetivo:</strong> Registrar estudiantes, calcular sus promedios y guardar los resultados en un archivo.</p>

  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:12px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code># Gestor de notas - Python
estudiantes = []

cantidad = int(input("¬øCu√°ntos estudiantes desea registrar? "))

for i in range(cantidad):
    nombre = input(f"\nIngrese el nombre del estudiante {i + 1}: ")
    notas = []
    for j in range(3):
        nota = float(input(f"Ingrese la nota {j + 1} de {nombre}: "))
        notas.append(nota)
    promedio = sum(notas) / len(notas)
    estudiantes.append((nombre, promedio))

print("\n Promedios finales:")
for est in estudiantes:
    estado = "Aprobado" if est[1] >= 11 else "Desaprobado"
    print(f"{est[0]}: {est[1]:.2f} ({estado})")

with open("promedios.txt", "w", encoding="utf-8") as archivo:
    for est in estudiantes:
        archivo.write(f"{est[0]}: {est[1]:.2f}\n")

print("\n Datos guardados en 'promedios.txt'")
</code></pre>
  <p><strong>Explicaci√≥n:</strong> Se usan listas, bucles anidados y condicionales. Se calcula el promedio con <code>sum()</code> y <code>len()</code>. Se guarda la informaci√≥n en un archivo externo con <code>open()</code> y modo <code>w</code>.</p>

  <!-- Proyecto 2 -->
  <h3 style="font-size:16px; margin-top:15px;">2. Sistema de ventas simple (Nivel: Intermedio-Avanzado)</h3>
  <p><strong>Objetivo:</strong> Registrar productos, calcular subtotales, aplicar descuentos y mostrar recibo final.</p>

  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:12px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code># Sistema de ventas simple
productos = []
precios = []

print("===  Sistema de Ventas ===")
while True:
    nombre = input("\nIngrese el nombre del producto (o 'fin' para terminar): ")
    if nombre.lower() == "fin":
        break
    precio = float(input(f"Precio de {nombre}: S/. "))
    productos.append(nombre)
    precios.append(precio)

total = sum(precios)

print("\nRECIBO DE COMPRA")
for i in range(len(productos)):
    print(f"{productos[i]} - S/. {precios[i]:.2f}")

print(f"\nSubtotal: S/. {total:.2f}")

if total > 100:
    total *= 0.9
    print("Descuento aplicado (10%)")

print(f"Total final: S/. {total:.2f}")
</code></pre>
  <p><strong>Explicaci√≥n:</strong> Usa listas paralelas (<code>productos</code>, <code>precios</code>) para almacenar pares de datos. Usa un acumulador total con <code>sum()</code>. Aplica condicional para calcular descuentos.</p>

  <!-- Proyecto 3 -->
  <h3 style="font-size:16px; margin-top:15px;">3. Calculadora mejorada (Nivel: Avanzado)</h3>
  <p><strong>Objetivo:</strong> Construir una calculadora modular con validaci√≥n de errores y men√∫ interactivo.</p>

  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:12px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code># Calculadora mejorada
def sumar(a, b): return a + b
def restar(a, b): return a - b
def multiplicar(a, b): return a * b
def dividir(a, b):
    if b == 0:
        return "Error: divisi√≥n entre cero"
    return a / b

while True:
    print("\n=== Calculadora ===")
    print("[1] Sumar")
    print("[2] Restar")
    print("[3] Multiplicar")
    print("[4] Dividir")
    print("[5] Salir")

    opcion = input("Seleccione una opci√≥n: ")

    if opcion == "5":
        print("Programa finalizado.")
        break

    try:
        x = float(input("Ingrese el primer n√∫mero: "))
        y = float(input("Ingrese el segundo n√∫mero: "))
    except ValueError:
        print("Error: debe ingresar n√∫meros v√°lidos.")
        continue

    if opcion == "1": print("Resultado:", sumar(x, y))
    elif opcion == "2": print("Resultado:", restar(x, y))
    elif opcion == "3": print("Resultado:", multiplicar(x, y))
    elif opcion == "4": print("Resultado:", dividir(x, y))
    else: print("Opci√≥n inv√°lida.")
</code></pre>
  <p><strong>Explicaci√≥n:</strong> Usa funciones para modularizar operaciones, manejo de errores con <code>try-except</code>, e integra bucles y validaciones.</p>

  <!-- Proyecto 4 -->
  <h3 style="font-size:16px; margin-top:15px;">4. Registro de empleados (Nivel: Avanzado)</h3>
  <p><strong>Objetivo:</strong> Registrar empleados con su salario, calcular el promedio salarial y mostrar qui√©n gana m√°s y menos.</p>

  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:12px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code># Registro de empleados
empleados = {}

while True:
    nombre = input("Ingrese nombre del empleado (o 'fin' para salir): ")
    if nombre.lower() == "fin":
        break
    try:
        salario = float(input(f"Ingrese el salario de {nombre}: "))
        empleados[nombre] = salario
    except ValueError:
        print("Ingrese un valor num√©rico v√°lido.")

if empleados:
    promedio = sum(empleados.values()) / len(empleados)
    max_empleado = max(empleados, key=empleados.get)
    min_empleado = min(empleados, key=empleados.get)

    print(f"\nSalario promedio: S/. {promedio:.2f}")
    print(f"Empleado con mayor salario: {max_empleado} (S/. {empleados[max_empleado]:.2f})")
    print(f"Empleado con menor salario: {min_empleado} (S/. {empleados[min_empleado]:.2f})")
else:
    print("No se ingresaron empleados.")
</code></pre>
  <p><strong>Explicaci√≥n:</strong> Uso de diccionarios (clave‚Äìvalor), c√°lculo de promedio y b√∫squeda del m√°ximo/m√≠nimo con <code>key=</code>.</p>

  <!-- Proyecto 5 -->
  <h3 style="font-size:20px; margin-top:15px;">5. Inventario con b√∫squeda (Nivel: Dif√≠cil)</h3>
  <p><strong>Objetivo:</strong> Gestionar un inventario: agregar, buscar, eliminar y mostrar productos.</p>

  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:12px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code># Inventario con b√∫squeda
inventario = {}

while True:
    print("\n=== MEN√ö DE INVENTARIO ===")
    print("1. Agregar producto")
    print("2. Buscar producto")
    print("3. Eliminar producto")
    print("4. Mostrar inventario")
    print("5. Salir")

    opcion = input("Seleccione una opci√≥n: ")

    if opcion == "1":
        nombre = input("Nombre del producto: ")
        precio = float(input("Precio: S/. "))
        inventario[nombre] = precio
    elif opcion == "2":
        buscar = input("Nombre a buscar: ")
        if buscar in inventario:
            print(f"{buscar}: S/. {inventario[buscar]:.2f}")
        else:
            print("Producto no encontrado.")
    elif opcion == "3":
        eliminar = input("Producto a eliminar: ")
        if eliminar in inventario:
            del inventario[eliminar]
            print("Eliminado.")
        else:
            print("No existe ese producto.")
    elif opcion == "4":
        if inventario:
            print("\nInventario actual:")
            for prod, precio in inventario.items():
                print(f"{prod}: S/. {precio:.2f}")
        else:
            print("Inventario vac√≠o.")
    elif opcion == "5":
        print("Fin del programa.")
        break
    else:
        print("Opci√≥n inv√°lida.")
</code></pre>
  <p><strong>Explicaci√≥n:</strong> Diccionarios din√°micos para CRUD b√°sico, men√∫ interactivo con condicionales y bucles.</p>

  <!-- Proyecto 6 -->
  <h3 style="font-size:16px; margin-top:15px;">6. Juego de adivinanza avanzada (Nivel: Muy dif√≠cil)</h3>
  <p><strong>Objetivo:</strong> Crear un juego de adivinar n√∫mero con pista, puntaje y l√≠mite de intentos.</p>

  <pre style="background-color:#0d1117; color:#e6edf3; padding:15px; border-radius:12px; font-family:'Consolas','Courier New',monospace; overflow-x:auto;">
<code># Juego de adivinanza avanzada
import random

numero_secreto = random.randint(1, 100)
intentos = 0
max_intentos = 7
puntos = 100

print("¬°Adivina el n√∫mero secreto (1 al 100)!")

while intentos < max_intentos:
    try:
        intento = int(input(f"Intento {intentos + 1}/{max_intentos}: "))
    except ValueError:
        print("Ingrese un n√∫mero v√°lido.")
        continue

    intentos += 1
    diferencia = abs(numero_secreto - intento)
    puntos -= 10

    if intento == numero_secreto:
        print(f"¬°Correcto! Lo lograste en {intentos} intentos con {puntos} puntos.")
        break
    elif intento < numero_secreto:
        print(" El n√∫mero secreto es mayor.")
    else:
        print(" El n√∫mero secreto es menor.")

else:
    print(f"Perdiste. El n√∫mero era {numero_secreto}. Puntaje final: {puntos}")
</code></pre>
  <p><strong>Explicaci√≥n:</strong> Uso del m√≥dulo <code>random</code>, control de flujo con bucles y condicionales, y c√°lculo de puntaje din√°mico.</p>

</section>

    
    
    `,
    ejemplos: `<p><strong>Ejemplos:</strong></p>
 
<section style="background-color:#0a0a0a; color:#e6e6e6; font-family:Arial, sans-serif; line-height:1.7; padding:25px; border-radius:12px; text-align:left;">



<!-- EJERCICIO 1 -->
<h3 style="color:#00bfff; font-size:20px;">1. Contador del 1 al 10</h3>
<p><strong>Planteamiento:</strong> Mostrar los n√∫meros del 1 al 10 en pantalla usando un bucle for.</p>
<p><strong>Objetivo:</strong> Comprender la estructura b√°sica de un bucle contado en Python.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
for i in range(1, 11):
    print(i)
</div>
<p><strong>Salida esperada:</strong><br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p>
<p><em>Nota:</em> <code>range(1, 11)</code> genera los n√∫meros del 1 al 10 (el 11 no se incluye).</p>

<!-- EJERCICIO 2 -->
<h3 style="color:#00bfff; font-size:20px;">2. Suma de n√∫meros naturales</h3>
<p><strong>Planteamiento:</strong> Calcular la suma de los primeros <code>n</code> n√∫meros naturales.</p>
<p><strong>Objetivo:</strong> Usar acumuladores dentro de un bucle.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
n = int(input("Ingrese un n√∫mero: "))<br>
suma = 0<br><br>
for i in range(1, n + 1):<br>
&nbsp;&nbsp;&nbsp;&nbsp;suma += i<br><br>
print(f"La suma de los primeros {n} n√∫meros es: {suma}")
</div>
<p><strong>Ejemplo de salida:</strong><br>Ingrese un n√∫mero: 5<br>La suma de los primeros 5 n√∫meros es: 15</p>
<p><em>Nota:</em> Ejemplo de acumulador (<code>suma += i</code>). F√≥rmula: <code>S = n(n+1)/2</code></p>

<!-- EJERCICIO 3 -->
<h3 style="color:#00bfff; font-size:20px;">3. Mostrar solo los pares</h3>
<p><strong>Planteamiento:</strong> Pedir al usuario un n√∫mero n y mostrar solo los n√∫meros pares entre 1 y n.</p>
<p><strong>Objetivo:</strong> Aplicar condicionales dentro de un bucle.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
n = int(input("Ingrese un n√∫mero: "))<br><br>
print(f"N√∫meros pares del 1 al {n}:")<br>
for i in range(1, n + 1):<br>
&nbsp;&nbsp;&nbsp;&nbsp;if i % 2 == 0:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(i)
</div>
<p><em>Nota:</em> El operador m√≥dulo <code>%</code> permite identificar si un n√∫mero es par.</p>

<!-- EJERCICIO 4 -->
<h3 style="color:#00bfff; font-size:20px;">4. Contador de vocales</h3>
<p><strong>Planteamiento:</strong> Solicitar una palabra o frase y contar cu√°ntas vocales contiene.</p>
<p><strong>Objetivo:</strong> Practicar el recorrido de cadenas y condiciones l√≥gicas m√∫ltiples.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
texto = input("Ingrese una frase: ")<br>
contador = 0<br><br>
for letra in texto:<br>
&nbsp;&nbsp;&nbsp;&nbsp;if letra.lower() in "aeiou":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contador += 1<br><br>
print(f"La frase contiene {contador} vocales.")
</div>
<p><em>Nota:</em> <code>letra.lower()</code> evita distinguir may√∫sculas/min√∫sculas.</p>

<!-- EJERCICIO 5 -->
<h3 style="color:#00bfff; font-size:20px;">5. Promedio de notas</h3>
<p><strong>Planteamiento:</strong> Solicitar 5 notas, calcular el promedio y mostrar si el alumno aprueba (‚â•11).</p>
<p><strong>Objetivo:</strong> Practicar listas, promedio y condicionales.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
notas = []<br><br>
for i in range(5):<br>
&nbsp;&nbsp;&nbsp;&nbsp;nota = float(input(f"Ingrese la nota {i + 1}: "))<br>
&nbsp;&nbsp;&nbsp;&nbsp;notas.append(nota)<br><br>
promedio = sum(notas) / len(notas)<br><br>
if promedio >= 11:<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(f"Promedio: {promedio:.2f} ‚úÖ Aprobado")<br>
else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(f"Promedio: {promedio:.2f} ‚ùå Desaprobado")
</div>
<p><em>Nota:</em> Usa <code>sum()</code> y <code>len()</code>. Muy √∫til para el proyecto ‚ÄúGestor de notas‚Äù.</p>

<!-- EJERCICIO 6 -->
<h3 style="color:#00bfff; font-size:20px;">6. M√∫ltiplos de un n√∫mero</h3>
<p><strong>Planteamiento:</strong> Pedir un n√∫mero e imprimir sus primeros 10 m√∫ltiplos.</p>
<p><strong>Objetivo:</strong> Reforzar aritm√©tica e iteraci√≥n controlada.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
num = int(input("Ingrese un n√∫mero: "))<br><br>
print(f"Los 10 primeros m√∫ltiplos de {num} son:")<br>
for i in range(1, 11):<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num} x {i} = {num * i}")
</div>
<p><em>Nota:</em> Ideal para afianzar bucles con <code>range()</code>.</p>

<!-- EJERCICIO 7 -->
<h3 style="color:#00bfff; font-size:20px;">7. Lista de precios: mayor, menor y promedio</h3>
<p><strong>Planteamiento:</strong> Ingresar varios precios hasta escribir ‚Äúfin‚Äù. Calcular el mayor, el menor y el promedio.</p>
<p><strong>Objetivo:</strong> Aplicar listas, control de flujo y funciones integradas.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
precios = []<br><br>
while True:<br>
&nbsp;&nbsp;&nbsp;&nbsp;entrada = input("Ingrese precio (o 'fin' para terminar): ")<br>
&nbsp;&nbsp;&nbsp;&nbsp;if entrada.lower() == "fin":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>
&nbsp;&nbsp;&nbsp;&nbsp;precios.append(float(entrada))<br><br>
if precios:<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(f"Precio mayor: {max(precios)}")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(f"Precio menor: {min(precios)}")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(f"Precio promedio: {sum(precios)/len(precios):.2f}")<br>
else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("No se ingresaron precios.")
</div>
<p><em>Nota:</em> Demuestra validaciones, acumuladores y control de flujo <code>while</code>.</p>

<!-- EJERCICIO 8 -->
<h3 style="color:#00bfff; font-size:20px;">8. Generador de contrase√±as aleatorias</h3>
<p><strong>Planteamiento:</strong> Crear una contrase√±a con letras, n√∫meros y s√≠mbolos.</p>
<p><strong>Objetivo:</strong> Introducir el m√≥dulo <code>random</code> y manipulaci√≥n de cadenas.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
import random<br>
import string<br><br>
longitud = int(input("Longitud de la contrase√±a: "))<br>
caracteres = string.ascii_letters + string.digits + "!@#$%^&*()"<br><br>
contrase√±a = "".join(random.choice(caracteres) for _ in range(longitud))<br>
print("Contrase√±a generada:", contrase√±a)
</div>
<p><em>Nota:</em> Integra m√≥dulos externos, comprensi√≥n de listas y aleatoriedad.</p>

<!-- EJERCICIO 9 -->
<h3 style="color:#00bfff; font-size:20px;">9. N√∫meros primos en un rango</h3>
<p><strong>Planteamiento:</strong> Mostrar todos los n√∫meros primos entre 1 y 100.</p>
<p><strong>Objetivo:</strong> Aplicar funciones y bucles anidados.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
def es_primo(num):<br>
&nbsp;&nbsp;&nbsp;&nbsp;if num &lt; 2:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br>
&nbsp;&nbsp;&nbsp;&nbsp;for i in range(2, int(num**0.5) + 1):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if num % i == 0:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br>
&nbsp;&nbsp;&nbsp;&nbsp;return True<br><br>
print("N√∫meros primos del 1 al 100:")<br>
for n in range(1, 101):<br>
&nbsp;&nbsp;&nbsp;&nbsp;if es_primo(n):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(n, end=" ")
</div>
<p><em>Nota:</em> Ejemplo de funciones personalizadas y eficiencia algor√≠tmica.</p>

<!-- EJERCICIO 10 -->
<h3 style="color:#00bfff; font-size:20px;">10. Simulaci√≥n de cajero autom√°tico</h3>
<p><strong>Planteamiento:</strong> Crear un programa que simule un cajero autom√°tico con saldo, dep√≥sitos y retiros.</p>
<p><strong>Objetivo:</strong> Integrar todas las estructuras: bucles, condicionales, funciones y validaciones.</p>
<div style="background-color:#161b22; color:#e0e0e0; padding:12px; border-radius:8px; font-family:'Consolas','Courier New',monospace;">
saldo = 1000.0<br><br>
while True:<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("\n=== Cajero Autom√°tico ===")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("1. Consultar saldo")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("2. Depositar dinero")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("3. Retirar dinero")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("4. Salir")<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;opcion = input("Seleccione una opci√≥n: ")<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;if opcion == "1":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"Su saldo actual es: S/. {saldo:.2f}")<br>
&nbsp;&nbsp;&nbsp;&nbsp;elif opcion == "2":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;monto = float(input("Ingrese monto a depositar: "))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saldo += monto<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Dep√≥sito realizado con √©xito.")<br>
&nbsp;&nbsp;&nbsp;&nbsp;elif opcion == "3":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;monto = float(input("Ingrese monto a retirar: "))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if monto &lt;= saldo:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saldo -= monto<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Retiro exitoso.")<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Saldo insuficiente.")<br>
&nbsp;&nbsp;&nbsp;&nbsp;elif opcion == "4":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Gracias por usar el cajero.")<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Opci√≥n inv√°lida.")
</div>
<p><em>Nota:</em> Simula un sistema real con control de flujo y validaciones.</p>

</section>



    `,
    quiz: `<p><strong>Quiz:</strong> </p>
    
    
    
    
    
    
    
    `
  },

  // Curso 4 ‚Äì Modular
  mod1: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
    
   <p>   
‚úîÔ∏è Comprender qu√© es la modularizaci√≥n y sus principales ventajas.<br>
‚úîÔ∏è Aprender a usar subprocesos y funciones en PSeInt y Python.<br>
‚úîÔ∏è Aplicar funciones modulares en un programa pr√°ctico y reutilizable. <br>
    
   </p>  
    
    
    
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>

<section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.6; padding:20px; text-align:left;">


  <p>En este minicurso aprender√°s los fundamentos esenciales de la programaci√≥n modular, una t√©cnica que te ayudar√° a organizar mejor tu c√≥digo dividi√©ndolo en partes m√°s peque√±as llamadas funciones.</p>

  <p>La idea principal es separar un programa grande en m√≥dulos, donde cada uno cumple una tarea espec√≠fica. Esto facilita la lectura, el mantenimiento y la reutilizaci√≥n del c√≥digo.</p>

  <p>Durante el curso aprender√°s:</p>
  <ul>
    <li>Qu√© es la modularizaci√≥n y por qu√© es importante.</li>
    <li>C√≥mo definir y usar funciones en pseudoc√≥digo y Python.</li>
    <li>Aplicar lo aprendido en un mini reto final, desarrollando un programa sencillo usando funciones.</li>
  </ul>

  <p>Este minicurso est√° dise√±ado para principiantes, por lo que no necesitas experiencia avanzada, solo ganas de aprender paso a paso c√≥mo crear programas m√°s ordenados y eficientes.</p>

  <p>¬°Empecemos a modularizar y a pensar como verdaderos programadores!</p>

</section>


<section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.6; padding:20px; text-align:left;">

  <h3 style="font-size:16px;">1. Definici√≥n de Modularizaci√≥n</h3>

  <p>La modularizaci√≥n es uno de los principios m√°s importantes dentro de la programaci√≥n estructurada y la ingenier√≠a del software moderna. Consiste en dividir un programa en partes m√°s peque√±as e independientes, llamadas m√≥dulos o funciones, que cumplen tareas espec√≠ficas y colaboran entre s√≠ para resolver un problema completo.</p>

  <p>En otras palabras, modularizar significa organizar el c√≥digo en bloques l√≥gicos y reutilizables, lo que favorece la claridad, el mantenimiento y la escalabilidad de los programas.</p>

  <p>Seg√∫n Lutz (2021), la modularidad permite ‚Äúorganizar el c√≥digo de manera que cada parte del programa sea independiente y reutilizable, reduciendo la complejidad general del sistema‚Äù. Esto significa que un programa modular no es una secuencia continua de instrucciones, sino un conjunto de componentes bien definidos que cooperan de forma ordenada.</p>

  <p>Por su parte, Python Software Foundation (2024), las funciones como forma de modularizaci√≥n son ‚Äúbloques de c√≥digo que se pueden reutilizar, llamados mediante su nombre, y que permiten recibir datos de entrada y devolver resultados de salida‚Äù. Este principio est√° en la base de todo lenguaje de programaci√≥n moderno, incluyendo Python, C, Java o incluso el pseudoc√≥digo educativo de PSeInt.</p>

  <p>La modularizaci√≥n tambi√©n se relaciona con el concepto de abstracci√≥n, ya que permite centrarse en qu√© hace cada m√≥dulo, sin preocuparse por c√≥mo lo hace internamente. Este enfoque fue introducido por los pioneros de la programaci√≥n estructurada es un programa bien dise√±ado deb√≠a ser ‚Äúuna composici√≥n jer√°rquica de m√≥dulos claramente definidos y comprensibles‚Äù ( Zelle, 2022).</p>

  <p>En t√©rminos pr√°cticos, un programa modular:</p>
  <ul>
    <li>Divide las tareas en bloques funcionales independientes.</li>
    <li>Permite reutilizar c√≥digo en distintos contextos.</li>
    <li>Facilita la colaboraci√≥n en equipo, asignando m√≥dulos diferentes a distintos programadores.</li>
    <li>Mejora la legibilidad, el mantenimiento y la prueba de errores (debugging).</li>
    <li>Hace posible la evoluci√≥n del software, a√±adiendo o reemplazando m√≥dulos sin reescribir todo el sistema.</li>
  </ul>

  <p>Por tal motivo, la modularizaci√≥n no solo es una t√©cnica de dise√±o, sino tambi√©n una filosof√≠a de desarrollo que promueve la claridad, la reutilizaci√≥n y la escalabilidad. Tal como afirma Zelle (2022), ‚Äúel dise√±o modular permite que los programas crezcan en tama√±o y complejidad sin perder su estructura l√≥gica ni su comprensibilidad‚Äù.</p>

</section>

 <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.6; padding:20px; text-align:left;">

  <h3 style="font-size:16px; font-weight:bold;">2. Ventajas de la modularizaci√≥n</h3>

  <p>La modularizaci√≥n en la programaci√≥n ofrece diversos beneficios que contribuyen a mejorar la calidad, la eficiencia y la organizaci√≥n del c√≥digo. A continuaci√≥n, se presentan las principales ventajas:</p>

  <p><strong> - Facilita la lectura y el mantenimiento del c√≥digo.</strong><br>
  Dividir un programa en secciones o m√≥dulos m√°s peque√±os permite que el desarrollador comprenda de forma m√°s clara el funcionamiento de cada parte. Esto hace posible realizar modificaciones o actualizaciones sin afectar el resto del sistema. Seg√∫n Moreno, Robles y Rom√°n (2020), la estructura modular simplifica la comprensi√≥n del programa y mejora la capacidad de mantenimiento del software.</p>

  <p><strong> - Promueve la reutilizaci√≥n del c√≥digo.</strong><br>
  Uno de los beneficios m√°s destacados de la modularizaci√≥n es la posibilidad de reutilizar las funciones o procedimientos en diferentes programas o proyectos. Esta pr√°ctica evita la duplicaci√≥n de c√≥digo y fomenta la eficiencia en el desarrollo. De acuerdo con Zelle (2022), el uso de funciones reutilizables reduce el tiempo de programaci√≥n y garantiza mayor consistencia en los resultados.</p>

  <p><strong> - Permite el trabajo en equipo.</strong><br>
  Al dividir un programa en m√≥dulos independientes, es posible asignar cada parte a distintos miembros del equipo de desarrollo. Esto facilita el trabajo colaborativo y acelera el proceso de creaci√≥n del software. Moreno et al. (2020) destacan que la modularizaci√≥n favorece la distribuci√≥n de tareas y el desarrollo simult√°neo de componentes del sistema.</p>

  <p><strong> - Reduce errores y mejora las pruebas.</strong><br>
  Cada m√≥dulo puede ser analizado y probado de forma independiente, lo que facilita la detecci√≥n y correcci√≥n de errores. Este enfoque modular incrementa la confiabilidad del programa y reduce los costos asociados a la depuraci√≥n. Seg√∫n Zelle (2022), las pruebas unitarias en m√≥dulos individuales permiten identificar r√°pidamente los fallos y mejorar la calidad del producto final.</p>

</section>


    
    <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.6; padding:20px; text-align:left;">

  <h3 style="font-size:16px; font-weight:bold;">3. Conceptos clave de la modularizaci√≥n</h3>

  <p>La modularizaci√≥n se basa en dividir un programa en partes m√°s peque√±as llamadas funciones o m√≥dulos, cada una con una tarea espec√≠fica. Este enfoque permite organizar mejor el c√≥digo, hacerlo m√°s comprensible y facilitar su mantenimiento.</p>

  <p>Comprender los conceptos fundamentales relacionados con las funciones es esencial para desarrollar programas eficientes y bien estructurados. A continuaci√≥n, se presentan los principales t√©rminos vinculados a la modularizaci√≥n:</p>

  <table style="width:100%; border-collapse:collapse; color:#ffffff; margin-top:10px;">
    <thead>
      <tr style="border-bottom:1px solid #ffffff;">
        <th style="text-align:left; padding:6px;">Concepto</th>
        <th style="text-align:left; padding:6px;">Descripci√≥n</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="padding:6px;">Funci√≥n o m√≥dulo</td>
        <td style="padding:6px;">Bloque de c√≥digo que realiza una tarea espec√≠fica.</td>
      </tr>
      <tr>
        <td style="padding:6px;">Entrada</td>
        <td style="padding:6px;">Datos que la funci√≥n recibe para procesar.</td>
      </tr>
      <tr>
        <td style="padding:6px;">Salida</td>
        <td style="padding:6px;">Resultado o acci√≥n que genera la funci√≥n.</td>
      </tr>
      <tr>
        <td style="padding:6px;">Par√°metros</td>
        <td style="padding:6px;">Variables que se pasan a la funci√≥n al ser llamada.</td>
      </tr>
      <tr>
        <td style="padding:6px;">Retorno</td>
        <td style="padding:6px;">Valor que la funci√≥n devuelve al terminar su ejecuci√≥n.</td>
      </tr>
    </tbody>
  </table>

  <p>Seg√∫n la Python Software Foundation (2024), las funciones son ‚Äúuno de los mecanismos m√°s potentes para estructurar programas, permitiendo definir comportamientos reutilizables y reducir la duplicaci√≥n de c√≥digo‚Äù.</p>

</section>

  <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">

<h4 style="font-size:14px; font-weight:bold;">Referencias</h4>

<p>Introducci√≥n a la programaci√≥n modular con Python. Programaci√≥n F√°cil. (2024, 3 de julio). <em>Introducci√≥n a la programaci√≥n modular con Python</em> [Video]. YouTube. <a href="https://www.youtube.com/watch?v=qfNCH9ajjOA" style="color:#00ffff;">https://www.youtube.com/watch?v=qfNCH9ajjOA</a></p>

<p>C√≥mo Crear e Importar M√≥dulos en Python. Guti√©rrez-Garc√≠a, J. O. [C√≥digo M√°quina]. (2021, 6 de junio). <em>C√≥mo Crear e Importar M√≥dulos en Python</em> [Video]. YouTube. <a href="https://www.youtube.com/watch?v=bf_698bfPDU" style="color:#00ffff;">https://www.youtube.com/watch?v=bf_698bfPDU</a></p>

<p>M√ìDULOS en Python üêç Reutilizar FUNCIONES como un PRO. Charly Cimino. (2024, 23 de marzo). <em>M√ìDULOS en Python üêç Reutilizar FUNCIONES como un PRO üòâ</em> [Video]. YouTube. <a href="https://www.youtube.com/watch?v=kay0DfqVRb0" style="color:#00ffff;">https://www.youtube.com/watch?v=kay0DfqVRb0</a></p>

</section>
  
    
    
    `,
    ejemplos: `<p><strong>Ejemplos:</strong></p>
    
    
    <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.6; padding:20px; text-align:left;">

  <h3 style="font-size:16px; font-weight:bold;">Ejercicios: Funciones y modularizaci√≥n</h3>

  <p>La pr√°ctica es esencial para comprender la utilidad de la modularizaci√≥n. Los ejercicios est√°n organizados de menor a mayor dificultad, guiando desde funciones simples hasta el uso de par√°metros, retornos y estructuras de control dentro de m√≥dulos funcionales.</p>

  <!-- Ejercicio 1 -->
  <h4 style="font-size:14px; font-weight:bold;">Ejercicio 1: Saludar</h4>
  <p><strong>Planteamiento:</strong> Crear una funci√≥n llamada <code>saludar</code> que reciba un nombre y muestre un saludo personalizado.</p>
  <div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace;">
def saludar(nombre):<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("Hola,", nombre)<br><br>
saludar("Ana")
  </div>
  <p><strong>Salida esperada:</strong> Hola, Ana</p>
  <p><em>Explicaci√≥n:</em> Ejercicio b√°sico para comprender c√≥mo se define y llama una funci√≥n.</p>

  <!-- Ejercicio 2 -->
  <h4 style="font-size:14px; font-weight:bold;">Ejercicio 2: Mostrar men√∫</h4>
  <p><strong>Planteamiento:</strong> Dise√±ar una funci√≥n <code>mostrar_menu</code> que imprima tres opciones del programa.</p>
  <div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace;">
def mostrar_menu():<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("=== MEN√ö PRINCIPAL ===")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("1. Registrar usuario")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("2. Consultar datos")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("3. Salir")<br><br>
mostrar_menu()
  </div>
  <p><strong>Salida esperada:</strong><br>=== MEN√ö PRINCIPAL ===<br>1. Registrar usuario<br>2. Consultar datos<br>3. Salir</p>

  <!-- Ejercicio 3 -->
  <h4 style="font-size:14px; font-weight:bold;">Ejercicio 3: Doble de un n√∫mero</h4>
  <p><strong>Planteamiento:</strong> Crear una funci√≥n <code>doble(numero)</code> que devuelva el doble del valor ingresado.</p>
  <div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace;">
def doble(numero):<br>
&nbsp;&nbsp;&nbsp;&nbsp;return numero * 2<br><br>
print("El doble de 5 es:", doble(5))
  </div>
  <p><strong>Salida esperada:</strong> El doble de 5 es: 10</p>

  <!-- Ejercicio 4 -->
  <h4 style="font-size:14px; font-weight:bold;">Ejercicio 4: √Årea de un rect√°ngulo</h4>
  <p><strong>Planteamiento:</strong> Definir una funci√≥n <code>area_rectangulo(base, altura)</code> que calcule y retorne el √°rea.</p>
  <div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace;">
def area_rectangulo(base, altura):<br>
&nbsp;&nbsp;&nbsp;&nbsp;return base * altura<br><br>
print("√Årea:", area_rectangulo(5, 3))
  </div>
  <p><strong>Salida esperada:</strong> √Årea: 15</p>

  <!-- Ejercicio 5 -->
  <h4 style="font-size:14px; font-weight:bold;">Ejercicio 5: N√∫mero par o impar</h4>
  <p><strong>Planteamiento:</strong> Construir una funci√≥n <code>es_par(numero)</code> que retorne True si el n√∫mero es par y False en caso contrario.</p>
  <div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace;">
def es_par(numero):<br>
&nbsp;&nbsp;&nbsp;&nbsp;return numero % 2 == 0<br><br>
print(es_par(4))   # True<br>
print(es_par(7))   # False
  </div>

  <!-- Ejercicio 6 -->
  <h4 style="font-size:14px; font-weight:bold;">Ejercicio 6: Promedio de tres notas</h4>
  <p><strong>Planteamiento:</strong> Dise√±ar una funci√≥n <code>promedio(n1, n2, n3)</code> que calcule y devuelva el promedio de tres calificaciones.</p>
  <div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace;">
def promedio(n1, n2, n3):<br>
&nbsp;&nbsp;&nbsp;&nbsp;return (n1 + n2 + n3) / 3<br><br>
print("Promedio:", promedio(15, 18, 20))
  </div>
  <p><strong>Salida esperada:</strong> Promedio: 17.6666666667</p>

  <!-- Ejercicio 7 -->
  <h4 style="font-size:14px; font-weight:bold;">Ejercicio 7: Conversi√≥n de temperatura</h4>
  <p><strong>Planteamiento:</strong> Crear una funci√≥n <code>celsius_a_fahrenheit(c)</code> que convierta grados Celsius a Fahrenheit usando <code>F = (C * 9/5) + 32</code>.</p>
  <div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace;">
def celsius_a_fahrenheit(c):<br>
&nbsp;&nbsp;&nbsp;&nbsp;return (c * 9/5) + 32<br><br>
print("35 ¬∞C =", celsius_a_fahrenheit(35), "¬∞F")
  </div>
  <p><strong>Salida esperada:</strong> 35 ¬∞C = 95.0 ¬∞F</p>

  <!-- Ejercicio 8 -->
  <h4 style="font-size:14px; font-weight:bold;">Ejercicio 8: Men√∫ interactivo modular</h4>
  <p><strong>Planteamiento:</strong> Elaborar un peque√±o sistema modular con tres funciones: <code>mostrar_menu()</code>, <code>opcion1()</code> y <code>opcion2()</code>.</p>
  <div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace;">
def mostrar_menu():<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("=== MEN√ö PRINCIPAL ===")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("1. Registrar usuario")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("2. Consultar datos")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("3. Salir")<br><br>
def opcion1():<br>
&nbsp;&nbsp;&nbsp;&nbsp;nombre = input("Ingrese nombre de usuario: ")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("Usuario registrado:", nombre)<br><br>
def opcion2():<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("Consultando datos...")<br><br>
# Programa principal<br>
mostrar_menu()<br>
opcion = input("Seleccione una opci√≥n: ")<br><br>
if opcion == "1":<br>
&nbsp;&nbsp;&nbsp;&nbsp;opcion1()<br>
elif opcion == "2":<br>
&nbsp;&nbsp;&nbsp;&nbsp;opcion2()<br>
else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("Saliendo del programa...")
  </div>

  <p>Estos ejercicios permiten al estudiante pasar de funciones simples a programas estructurados, fortaleciendo su pensamiento l√≥gico y comprensi√≥n del flujo de ejecuci√≥n.</p>

<!-- Ejercicio 9 -->
<h4 style="font-size:14px; font-weight:bold;">Ejercicio 9: Calculadora modular</h4>
<p><strong>Planteamiento:</strong> Crear un programa que use funciones para realizar operaciones matem√°ticas b√°sicas (suma, resta, multiplicaci√≥n y divisi√≥n). 
El men√∫ principal debe permitir al usuario elegir la operaci√≥n que desea ejecutar.</p>

<div style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px; font-family:'Consolas','Courier New',monospace; text-align:left;">
def sumar(a, b):<br>
&nbsp;&nbsp;&nbsp;&nbsp;return a + b<br><br>

def restar(a, b):<br>
&nbsp;&nbsp;&nbsp;&nbsp;return a - b<br><br>

def multiplicar(a, b):<br>
&nbsp;&nbsp;&nbsp;&nbsp;return a * b<br><br>

def dividir(a, b):<br>
&nbsp;&nbsp;&nbsp;&nbsp;if b != 0:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return a / b<br>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "Error: divisi√≥n entre cero"<br><br>

def mostrar_menu():<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("=== CALCULADORA MODULAR ===")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("1. Sumar")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("2. Restar")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("3. Multiplicar")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("4. Dividir")<br>
&nbsp;&nbsp;&nbsp;&nbsp;print("5. Salir")<br><br>

# Programa principal<br>
while True:<br>
&nbsp;&nbsp;&nbsp;&nbsp;mostrar_menu()<br>
&nbsp;&nbsp;&nbsp;&nbsp;opcion = input("Seleccione una opci√≥n: ")<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;if opcion == "5":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Programa finalizado.")<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;a = float(input("Ingrese el primer n√∫mero: "))<br>
&nbsp;&nbsp;&nbsp;&nbsp;b = float(input("Ingrese el segundo n√∫mero: "))<br><br>
&nbsp;&nbsp;&nbsp;&nbsp;if opcion == "1":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Resultado:", sumar(a, b))<br>
&nbsp;&nbsp;&nbsp;&nbsp;elif opcion == "2":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Resultado:", restar(a, b))<br>
&nbsp;&nbsp;&nbsp;&nbsp;elif opcion == "3":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Resultado:", multiplicar(a, b))<br>
&nbsp;&nbsp;&nbsp;&nbsp;elif opcion == "4":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Resultado:", dividir(a, b))<br>
&nbsp;&nbsp;&nbsp;&nbsp;else:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Opci√≥n no v√°lida. Intente nuevamente.")
</div>

<p><strong>Salida esperada (ejemplo):</strong><br>
=== CALCULADORA MODULAR ===<br>
1. Sumar<br>
2. Restar<br>
3. Multiplicar<br>
4. Dividir<br>
5. Salir<br>
Seleccione una opci√≥n: 1<br>
Ingrese el primer n√∫mero: 8<br>
Ingrese el segundo n√∫mero: 4<br>
Resultado: 12</p>

<p><em>Explicaci√≥n:</em> Este ejercicio integra todo lo aprendido: funciones con retorno, manejo de errores, bucles y estructuras condicionales. 
Representa un ejemplo realista de c√≥mo modularizar un programa completo.</p>

    
    
    
    
    
    
    `,
    quiz: `<p><strong>Quiz:</strong> Preguntas de modularizaci√≥n.</p>`
  },
  mod2: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
    
    <p>   
‚úîÔ∏è Entender el concepto de modularizaci√≥n y reconocer sus ventajas principales. <br>
‚úîÔ∏è Aprender a definir y utilizar subprocesos y funciones en PSeInt y Python, identificando cu√°ndo usar cada uno.<br>
‚úîÔ∏è Crear programas sencillo modularizado usando funciones, verificando su reutilizaci√≥n y facilidad de mantenimiento. <br>
    
   </p>  
    
    
    
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong> </p>


    <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">

<h4 style="font-size:14px; font-weight:bold;">1. Contenido te√≥rico: Funciones y Subprocesos</h4>
<p>Las funciones y subprocesos constituyen los pilares de la programaci√≥n modular, ya que permiten dividir un programa en partes m√°s peque√±as, organizadas y reutilizables. Este enfoque facilita la comprensi√≥n, el mantenimiento y la depuraci√≥n del c√≥digo, adem√°s de fomentar el desarrollo colaborativo y la reutilizaci√≥n de componentes.</p>

<p>Como explican Zelle (2022) y Severance (2016), la modularizaci√≥n es una pr√°ctica esencial que ayuda a los programadores a estructurar sus ideas en piezas de c√≥digo independientes, claras y f√°ciles de probar. En otras palabras, un programa modular est√° formado por distintos bloques que cooperan para resolver un problema mayor.</p>

<p>Cada bloque (funci√≥n o subproceso) tiene un objetivo espec√≠fico, lo que mejora la claridad y promueve la eficiencia en el dise√±o de programas. De esta forma, el desarrollador puede concentrarse en resolver tareas peque√±as y luego integrarlas en un sistema funcional completo.</p>

<h4 style="font-size:14px; font-weight:bold;">Tipos de m√≥dulos</h4>

<p><strong>Subproceso:</strong> Un subproceso es un bloque de c√≥digo que no devuelve un valor, pero realiza una acci√≥n concreta dentro del programa. Su prop√≥sito principal es ejecutar instrucciones como mostrar mensajes, imprimir resultados o modificar variables globales.</p>

<p>De acuerdo con Moreno, Robles y Rom√°n (2020), los subprocesos facilitan la segmentaci√≥n de tareas y mejoran la legibilidad del c√≥digo, ya que cada acci√≥n se encapsula en una porci√≥n independiente.</p>

<p>Ejemplo (PSeInt):</p>
<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
SubProceso MostrarSaludo(nombre)
    Escribir "¬°Hola ", nombre, ", bienvenido al sistema!"
FinSubProceso

MostrarSaludo("Ana")
</pre>

<p>Ejemplo (Python):</p>
<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
def mostrar_saludo(nombre):
    print("¬°Hola", nombre, ", bienvenido al sistema!")

mostrar_saludo("Ana")
</pre>

<p>Este subproceso imprime un mensaje en pantalla, pero no devuelve un valor.</p>

<p><strong>Funci√≥n:</strong> Una funci√≥n es un bloque de c√≥digo que devuelve un valor despu√©s de ejecutar sus instrucciones. Se utiliza cuando es necesario calcular un resultado que ser√° usado m√°s adelante, como un promedio o una operaci√≥n matem√°tica.</p>

<p>La Python Software Foundation (2024) define las funciones como ‚Äúmecanismos que permiten agrupar instrucciones bajo un nombre y devolver un resultado reutilizable dentro de un programa‚Äù.</p>

<p>Ejemplo (PSeInt):</p>
<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
Funcion area <- CalcularArea(base, altura)
    area <- base * altura
FinFuncion

Escribir "El √°rea del rect√°ngulo es: ", CalcularArea(5, 3)
</pre>

<p>Ejemplo (Python):</p>
<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
def calcular_area(base, altura):
    return base * altura

print("El √°rea del rect√°ngulo es:", calcular_area(5, 3))
</pre>

<p>En este caso, la funci√≥n devuelve un valor que puede ser utilizado o mostrado.</p>

<h4 style="font-size:14px; font-weight:bold;">Ventajas de usar m√≥dulos</h4>

<p>Diversos autores coinciden en que la modularizaci√≥n es una pr√°ctica clave del pensamiento computacional (Zelle, 2022; Severance, 2016). Entre sus principales ventajas se destacan:</p>
<ul>
<li>Reutilizaci√≥n: permite emplear el mismo c√≥digo en diferentes programas.</li>
<li>Mantenimiento sencillo: facilita localizar y corregir errores.</li>
<li>Claridad: cada bloque tiene un prop√≥sito definido.</li>
<li>Trabajo colaborativo: distintos miembros pueden desarrollar m√≥dulos por separado.</li>
<li>Escalabilidad: facilita ampliar programas sin modificar todo el c√≥digo.</li>
</ul>

<p>Las funciones y subprocesos son esenciales para crear programas estructurados, escalables y comprensibles. El subproceso se usa para acciones directas, mientras que la funci√≥n se emplea para retornar resultados. Adoptar este enfoque modular fomenta la eficiencia, la legibilidad y la colaboraci√≥n en el desarrollo de software.</p>

</section>

    
 <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">

<h4 style="font-size:14px; font-weight:bold;">2. Estructura general de funciones y subprocesos</h4>

<p>Comprender la estructura sint√°ctica de las funciones y subprocesos es esencial para escribir programas claros y bien organizados. Tanto en PSeInt como en Python, estas estructuras representan el coraz√≥n de la programaci√≥n modular, ya que permiten dividir un problema grande en unidades peque√±as y manejables. Cada m√≥dulo tiene un prop√≥sito definido y puede recibir datos, procesarlos y, si es necesario, devolver un resultado al programa principal.</p>

<h4 style="font-size:14px; font-weight:bold;">Estructura general en PSeInt</h4>

<p>PSeInt, al ser una herramienta de pseudoc√≥digo educativo, ofrece una sintaxis sencilla y f√°cil de leer para representar funciones y subprocesos.</p>

<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
SubProceso Nombre(parametros)
    // Instrucciones
FinSubProceso

Funcion resultado <- Nombre(parametros)
    // Instrucciones
    resultado <- ...
FinFuncion
</pre>

<h4 style="font-size:14px; font-weight:bold;">Explicaci√≥n</h4>

<p><strong>SubProceso:</strong> Se utiliza cuando el bloque de c√≥digo no necesita devolver un valor. Sirve principalmente para ejecutar una serie de instrucciones, como mostrar datos, realizar c√°lculos intermedios o imprimir mensajes en pantalla.</p>

<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
SubProceso MostrarSaludo(nombre)
    Escribir "Hola ", nombre
FinSubProceso
</pre>

<p>En este caso, el subproceso realiza una acci√≥n (mostrar un saludo), pero no retorna un valor.</p>

<p><strong>Funci√≥n:</strong> Se emplea cuando el bloque debe devolver un resultado al programa principal. Es √∫til para operaciones matem√°ticas, c√°lculos o transformaciones de datos.</p>

<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
Funcion resultado <- Sumar(a, b)
    resultado <- a + b
FinFuncion
</pre>

<p>En este ejemplo, la funci√≥n procesa los datos de entrada (a y b) y devuelve la suma como resultado.</p>

<p><strong>Par√°metros:</strong> Son variables que permiten enviar informaci√≥n a una funci√≥n o subproceso desde el programa principal. De esta forma, un mismo bloque puede ser reutilizado con distintos valores de entrada, evitando la duplicaci√≥n de c√≥digo.</p>

<h4 style="font-size:14px; font-weight:bold;">Estructura general en Python</h4>

<p>Python utiliza una sintaxis m√°s compacta, basada en la palabra clave <code>def</code> para definir funciones. Su estructura b√°sica es la siguiente:</p>

<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
def nombre(parametros):
    # Instrucciones
    return resultado
</pre>

<h4 style="font-size:14px; font-weight:bold;">Explicaci√≥n</h4>

<ul>
<li>La palabra clave <code>def</code> indica el inicio de una funci√≥n.</li>
<li>Los par√°metros se escriben entre par√©ntesis y pueden ser opcionales.</li>
<li>Las instrucciones dentro de la funci√≥n deben estar indentadas (sangradas), indicando su pertenencia al bloque.</li>
<li>La instrucci√≥n <code>return</code> se utiliza cuando se desea devolver un valor al lugar desde donde se llam√≥ la funci√≥n. Si no se usa, la funci√≥n simplemente ejecuta acciones, similar a un SubProceso en PSeInt.</li>
</ul>

<p>Ejemplo 1 (funci√≥n con retorno):</p>

<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
def sumar(a, b):
    return a + b

print("La suma es:", sumar(4, 3))
</pre>

<p>Ejemplo 2 (funci√≥n sin retorno):</p>

<pre style="background-color:#1a1a1a; color:#ffffff; padding:10px; border-radius:5px;">
def mostrar_saludo(nombre):
    print("Hola,", nombre)

mostrar_saludo("Ana")
</pre>

<p>En el primer caso, la funci√≥n devuelve un valor (resultado de la suma). En el segundo, solo ejecuta una acci√≥n (mostrar un saludo).</p>

<h4 style="font-size:14px; font-weight:bold;">Relaci√≥n entre PSeInt y Python</h4>

<table style="border-collapse: collapse; width: 100%; color:#ffffff;">
<tr>
<th style="border: 1px solid #ffffff; padding:5px; text-align:left;">Concepto</th>
<th style="border: 1px solid #ffffff; padding:5px; text-align:left;">PSeInt</th>
<th style="border: 1px solid #ffffff; padding:5px; text-align:left;">Python</th>
</tr>
<tr>
<td style="border: 1px solid #ffffff; padding:5px;">Palabra clave para definir</td>
<td style="border: 1px solid #ffffff; padding:5px;">SubProceso / Funcion</td>
<td style="border: 1px solid #ffffff; padding:5px;">def</td>
</tr>
<tr>
<td style="border: 1px solid #ffffff; padding:5px;">Par√°metros</td>
<td style="border: 1px solid #ffffff; padding:5px;">Entre par√©ntesis ( )</td>
<td style="border: 1px solid #ffffff; padding:5px;">Entre par√©ntesis ( )</td>
</tr>
<tr>
<td style="border: 1px solid #ffffff; padding:5px;">Retorno de valor</td>
<td style="border: 1px solid #ffffff; padding:5px;">Con el s√≠mbolo &lt;-</td>
<td style="border: 1px solid #ffffff; padding:5px;">Con return</td>
</tr>
<tr>
<td style="border: 1px solid #ffffff; padding:5px;">Finalizaci√≥n del bloque</td>
<td style="border: 1px solid #ffffff; padding:5px;">FinSubProceso / FinFuncion</td>
<td style="border: 1px solid #ffffff; padding:5px;">Por indentaci√≥n</td>
</tr>
<tr>
<td style="border: 1px solid #ffffff; padding:5px;">Acci√≥n sin retorno</td>
<td style="border: 1px solid #ffffff; padding:5px;">SubProceso</td>
<td style="border: 1px solid #ffffff; padding:5px;">def sin return</td>
</tr>
<tr>
<td style="border: 1px solid #ffffff; padding:5px;">Acci√≥n con retorno</td>
<td style="border: 1px solid #ffffff; padding:5px;">Funcion</td>
<td style="border: 1px solid #ffffff; padding:5px;">def con return</td>
</tr>
</table>

<h4 style="font-size:14px; font-weight:bold;">Buenas pr√°cticas al definir funciones</h4>

<ul>
<li>Usar nombres descriptivos: el nombre debe reflejar claramente lo que hace la funci√≥n (por ejemplo, <code>calcular_promedio()</code> en lugar de <code>func1()</code>).</li>
<li>Evitar repeticiones: si un fragmento de c√≥digo se repite varias veces, convi√©rtelo en una funci√≥n o subproceso.</li>
<li>Mantener la simplicidad: cada funci√≥n debe tener un solo prop√≥sito.</li>
<li>Documentar con comentarios: indica qu√© hace la funci√≥n, qu√© par√°metros recibe y qu√© devuelve.</li>
<li>Probar por separado: cada m√≥dulo debe poder probarse de forma independiente antes de integrarse.</li>
</ul>

<p>Tanto en PSeInt como en Python, la estructura modular de funciones y subprocesos constituye una herramienta clave para dise√±ar programas claros, mantenibles y escalables. El dominio de estas estructuras permite a los programadores pensar de manera l√≥gica y resolver problemas complejos dividi√©ndolos en partes simples.</p>

<p>Como afirma Severance (2016), ‚Äúla modularizaci√≥n transforma el aprendizaje de la programaci√≥n, pasando de escribir instrucciones lineales a construir sistemas organizados y reutilizables‚Äù. Dominar la estructura de las funciones es el paso previo indispensable antes de abordar ejercicios pr√°cticos y proyectos m√°s amplios.</p>

</section>
   
    <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">

<h4 style="font-size:14px; font-weight:bold;">Videos y contenidos adicionales: </h4>

<p>Charly Cimino. (2022, agosto). <em>PROGRAMACI√ìN MODULAR ‚Äì Te lo explico JUGANDO</em> [Video]. YouTube. <a href="https://www.youtube.com/watch?v=zBIG4D8KhJM" style="color:#00ffff;">https://www.youtube.com/watch?v=zBIG4D8KhJM</a></p>

<p>Programaci√≥n F√°cil. (2023). <em>[PYTHON] Introducci√≥n a la programaci√≥n modular con Python</em> [Video]. YouTube. <a href="https://www.youtube.com/watch?v=qfNCH9ajjOA" style="color:#00ffff;">https://www.youtube.com/watch?v=qfNCH9ajjOA</a></p>

<p>W. Madrigal Chaves. (2020). <em>Procedimientos y funciones: la base de la programaci√≥n modular</em> [Lectura]. Universidad de San Mar√≠a. <a href="https://repositorio.usam.ac.cr/xmlui/handle/11506/2043" style="color:#00ffff;">https://repositorio.usam.ac.cr/xmlui/handle/11506/2043</a></p>

</section>

    
    
    
    `,
    ejemplos: `<p><strong>Ejemplos: </strong> </p>

 <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">

<h4 style="font-size:14px; font-weight:bold;">Ejercicio 1 ‚Äì Saludo personalizado</h4>
<p><strong>Objetivo:</strong> Comprender la estructura b√°sica de un subproceso sin retorno.</p>

<p><strong>PSeInt</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
SubProceso MostrarSaludo(nombre)
    Escribir "¬°Hola ", nombre, ", bienvenido al sistema!"
FinSubProceso

MostrarSaludo("Ana")
MostrarSaludo("Luis")
</pre>

<p><strong>Python</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
def mostrar_saludo(nombre):
    print(f"¬°Hola {nombre}, bienvenido al sistema!")

mostrar_saludo("Ana")
mostrar_saludo("Luis")
</pre>

<p><strong>Concepto:</strong> Subproceso simple, sin retorno, que ejecuta una acci√≥n.</p>

<h4 style="font-size:14px; font-weight:bold;">Ejercicio 2 ‚Äì Calcular el promedio de tres notas</h4>
<p><strong>Objetivo:</strong> Practicar el uso de funciones con par√°metros y retorno.</p>

<p><strong>PSeInt</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
Funcion promedio <- CalcularPromedio(n1, n2, n3)
    promedio <- (n1 + n2 + n3) / 3
FinFuncion

Escribir "El promedio es: ", CalcularPromedio(15, 18, 20)
</pre>

<p><strong>Python</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
def calcular_promedio(n1, n2, n3):
    return (n1 + n2 + n3) / 3

print("El promedio es:", calcular_promedio(15, 18, 20))
</pre>

<p><strong>Concepto:</strong> Funci√≥n con retorno, recibe varios par√°metros.</p>

<h4 style="font-size:14px; font-weight:bold;">Ejercicio 3 ‚Äì Determinar si un n√∫mero es par o impar</h4>
<p><strong>Objetivo:</strong> Combinar estructura condicional dentro de una funci√≥n.</p>

<p><strong>PSeInt</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
Funcion mensaje <- EsPar(numero)
    Si numero MOD 2 = 0 Entonces
        mensaje <- "El n√∫mero es par"
    Sino
        mensaje <- "El n√∫mero es impar"
    FinSi
FinFuncion

Escribir EsPar(8)
Escribir EsPar(7)
</pre>

<p><strong>Python</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
def es_par(numero):
    if numero % 2 == 0:
        return "El n√∫mero es par"
    else:
        return "El n√∫mero es impar"

print(es_par(8))
print(es_par(7))
</pre>

<p><strong>Concepto:</strong> Funci√≥n con decisi√≥n condicional y retorno de texto.</p>

<h4 style="font-size:14px; font-weight:bold;">Ejercicio 4 ‚Äì Calcular el √°rea y per√≠metro de un rect√°ngulo</h4>
<p><strong>Objetivo:</strong> Crear dos funciones distintas que colaboran entre s√≠.</p>

<p><strong>PSeInt</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
Funcion area <- CalcularArea(base, altura)
    area <- base * altura
FinFuncion

Funcion perimetro <- CalcularPerimetro(base, altura)
    perimetro <- 2 * (base + altura)
FinFuncion

Escribir "√Årea: ", CalcularArea(5, 3)
Escribir "Per√≠metro: ", CalcularPerimetro(5, 3)
</pre>

<p><strong>Python</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
def calcular_area(base, altura):
    return base * altura

def calcular_perimetro(base, altura):
    return 2 * (base + altura)

print("√Årea:", calcular_area(5, 3))
print("Per√≠metro:", calcular_perimetro(5, 3))
</pre>

<p><strong>Concepto:</strong> Uso combinado de funciones que resuelven distintas tareas.</p>

<h4 style="font-size:14px; font-weight:bold;">Ejercicio 5 ‚Äì Calculadora b√°sica modular</h4>
<p><strong>Objetivo:</strong> Implementar un men√∫ con m√∫ltiples funciones independientes.</p>

<p><strong>PSeInt</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
SubProceso MostrarMenu()
    Escribir "1. Sumar"
    Escribir "2. Restar"
    Escribir "3. Multiplicar"
    Escribir "4. Dividir"
FinSubProceso

Funcion resultado <- Sumar(a, b)
    resultado <- a + b
FinFuncion

Funcion resultado <- Restar(a, b)
    resultado <- a - b
FinFuncion

Funcion resultado <- Multiplicar(a, b)
    resultado <- a * b
FinFuncion

Funcion resultado <- Dividir(a, b)
    Si b <> 0 Entonces
        resultado <- a / b
    Sino
        resultado <- "Error: divisi√≥n por cero"
    FinSi
FinFuncion

MostrarMenu()
Leer opcion, x, y

Segun opcion Hacer
    1: Escribir "Resultado: ", Sumar(x, y)
    2: Escribir "Resultado: ", Restar(x, y)
    3: Escribir "Resultado: ", Multiplicar(x, y)
    4: Escribir "Resultado: ", Dividir(x, y)
FinSegun
</pre>

<p><strong>Python</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
def sumar(a, b): return a + b
def restar(a, b): return a - b
def multiplicar(a, b): return a * b
def dividir(a, b): return a / b if b != 0 else "Error: divisi√≥n por cero"

def mostrar_menu():
    print("1. Sumar\n2. Restar\n3. Multiplicar\n4. Dividir")

mostrar_menu()
op = int(input("Elige una opci√≥n: "))
x = float(input("Ingresa el primer n√∫mero: "))
y = float(input("Ingresa el segundo n√∫mero: "))

if op == 1: print("Resultado:", sumar(x, y))
elif op == 2: print("Resultado:", restar(x, y))
elif op == 3: print("Resultado:", multiplicar(x, y))
elif op == 4: print("Resultado:", dividir(x, y))
else: print("Opci√≥n no v√°lida.")
</pre>

<p><strong>Concepto:</strong> Modularizaci√≥n completa ‚Äî men√∫, funciones y flujo principal.</p>

<h4 style="font-size:14px; font-weight:bold;">Ejercicio 6 ‚Äì Sistema de calificaciones</h4>
<p><strong>Objetivo:</strong> Aplicar m√∫ltiples funciones con llamadas encadenadas y l√≥gica compuesta.</p>

<p><strong>PSeInt</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
Funcion promedio <- CalcularPromedio(n1, n2, n3)
    promedio <- (n1 + n2 + n3) / 3
FinFuncion

Funcion estado <- EvaluarDesempeno(promedio)
    Si promedio >= 14 Entonces
        estado <- "Aprobado"
    Sino
        estado <- "Desaprobado"
    FinSi
FinFuncion

SubProceso MostrarResultado(nombre, n1, n2, n3)
    Definir prom Como Real
    prom <- CalcularPromedio(n1, n2, n3)
    Escribir nombre, ": Promedio = ", prom, " -> ", EvaluarDesempeno(prom)
FinSubProceso

MostrarResultado("Carlos", 18, 12, 15)
MostrarResultado("Ana", 11, 10, 13)
</pre>

<p><strong>Python</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
def calcular_promedio(n1, n2, n3):
    return (n1 + n2 + n3) / 3

def evaluar_desempeno(promedio):
    return "Aprobado" if promedio >= 14 else "Desaprobado"

def mostrar_resultado(nombre, n1, n2, n3):
    prom = calcular_promedio(n1, n2, n3)
    print(f"{nombre}: Promedio = {prom:.2f} ‚Üí {evaluar_desempeno(prom)}")

mostrar_resultado("Carlos", 18, 12, 15)
mostrar_resultado("Ana", 11, 10, 13)
</pre>

<p><strong>Concepto:</strong> Uso avanzado de modularizaci√≥n, funciones que interact√∫an entre s√≠, l√≥gica condicional y formato de salida.</p>

</section>

   

    
    
    `,
    quiz: `<p><strong>Quiz:</strong></p>
    
    
    
    
    
    `
  },
  mod3: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
    
    <p>   
‚úîÔ∏è Identificar la diferencia entre paso por valor y paso por referencia en funciones y subprocesos, tanto en PSeInt como en Python.<br>
‚úîÔ∏è Aplicar correctamente el tipo de par√°metro seg√∫n la necesidad del programa (solo lectura o modificaci√≥n de datos).<br>
‚úîÔ∏è Desarrollar programas modulares complejos que utilicen par√°metros para comunicar y procesar informaci√≥n entre diferentes funciones. <br>
    
   </p>  
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>
 <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">

<h4 style="font-size:14px; font-weight:bold;">1. Contenido te√≥rico</h4>

<p>Los par√°metros son variables que permiten transferir informaci√≥n a una funci√≥n o subproceso desde el programa principal o desde otro m√≥dulo. Gracias a ellos, el c√≥digo se vuelve m√°s flexible, reutilizable y modular, evitando repetir las mismas instrucciones con diferentes valores.</p>

<p>De acuerdo con Zelle (2022), los par√°metros son la base de la comunicaci√≥n entre m√≥dulos, ya que permiten aislar responsabilidades y mantener el principio de ‚Äúuna funci√≥n, una tarea‚Äù.</p>

<p>Existen dos formas principales de pasar par√°metros: por valor y por referencia. Cada una define c√≥mo se transmite la informaci√≥n y c√≥mo afectan los cambios realizados dentro del m√≥dulo.</p>

<h4 style="font-size:14px; font-weight:bold;">Paso por valor</h4>

<p>El paso por valor consiste en enviar una copia del contenido de una variable a la funci√≥n. Esto significa que cualquier cambio realizado dentro del m√≥dulo no altera el valor original. Es √∫til cuando se desea proteger los datos originales o garantizar que una funci√≥n trabaje de forma aislada.</p>

<p>En PSeInt, esta es la forma predeterminada de pasar par√°metros. Seg√∫n Guttag (2016), este enfoque ‚Äúfavorece la predictibilidad del comportamiento del programa, evitando efectos secundarios indeseados‚Äù.</p>

<p><strong>Ejemplo en PSeInt</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
SubProceso DuplicarValor(num)
    num <- num * 2
FinSubProceso

Proceso Principal
    Definir x Como Entero
    x <- 5
    DuplicarValor(x)
    Escribir "x vale: ", x
FinProceso
</pre>
<p><strong>Salida:</strong> x vale: 5</p>

<p><strong>Ejemplo en Python</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
def duplicar_valor(num):
    num = num * 2

x = 5
duplicar_valor(x)
print("x vale:", x)
</pre>
<p><strong>Salida:</strong> x vale: 5</p>

<p>En Python, las variables de tipo entero, flotante o cadena se comportan por valor porque son inmutables. Los cambios dentro de la funci√≥n no afectan la variable externa (Downey, 2015).</p>

<h4 style="font-size:14px; font-weight:bold;">Paso por referencia</h4>

<p>El paso por referencia consiste en enviar la direcci√≥n de memoria de la variable, no una copia. Esto significa que cualquier modificaci√≥n dentro de la funci√≥n s√≠ afecta el valor original. Este tipo de paso se usa cuando se busca actualizar datos directamente o optimizar memoria, especialmente con listas o estructuras grandes (Moreno, Robles & Rom√°n, 2020).</p>

<p><strong>Ejemplo en PSeInt</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
SubProceso DuplicarValor(Por Referencia num)
    num <- num * 2
FinSubProceso

Proceso Principal
    Definir x Como Entero
    x <- 5
    DuplicarValor(x)
    Escribir "x vale: ", x
FinProceso
</pre>
<p><strong>Salida:</strong> x vale: 10</p>

<p><strong>Ejemplo en Python</strong></p>
<pre style="background-color:#f5f5f5; color:#000000; padding:8px;">
def duplicar_lista(lista):
    for i in range(len(lista)):
        lista[i] = lista[i] * 2

numeros = [1, 2, 3]
duplicar_lista(numeros)
print("Lista actualizada:", numeros)
</pre>
<p><strong>Salida:</strong> Lista actualizada: [2, 4, 6]</p>

<p>En Python, las listas y diccionarios son mutables, por lo que se comportan por referencia. Los cambios dentro de la funci√≥n afectan directamente la variable externa (Zelle, 2022).</p>

<h4 style="font-size:14px; font-weight:bold;"> 2. Importancia</h4>

<p>Comprender la diferencia entre paso por valor y paso por referencia permite dise√±ar programas m√°s seguros y eficientes. Cuando un m√≥dulo necesita solo usar los datos, se usa el paso por valor; cuando debe modificarlos o compartir resultados, se usa el paso por referencia.</p>

<p>Esta distinci√≥n tambi√©n favorece la depuraci√≥n, ya que ayuda a controlar qu√© partes del c√≥digo pueden alterar los valores globales y cu√°les no (Downey, 2015).</p>

<p>En programaci√≥n modular, el manejo adecuado de par√°metros asegura una comunicaci√≥n clara entre funciones, mejora la reutilizaci√≥n de componentes y facilita la colaboraci√≥n en proyectos grandes (Moreno et al., 2020).</p>

<h4 style="font-size:14px; font-weight:bold;">3. S√≠ntesis </h4>

<table border="1" cellpadding="5" cellspacing="0" style="border-collapse:collapse; width:100%; text-align:left; color:#ffffff;">
<tr style="background-color:#f0f0f0; color:#000000;">
<th>Concepto</th>
<th>PSeInt</th>
<th>Python</th>
</tr>
<tr>
<td>Palabra clave</td>
<td>Por Referencia</td>
<td>Impl√≠cito (seg√∫n tipo de dato)</td>
</tr>
<tr>
<td>Por defecto</td>
<td>Paso por valor</td>
<td>Paso por referencia (en objetos mutables)</td>
</tr>
<tr>
<td>Afecta variable original</td>
<td>S√≥lo si se usa Por Referencia</td>
<td>S√≠, si es un objeto mutable</td>
</tr>
<tr>
<td>Retorno de valores</td>
<td>Con &lt;-</td>
<td>Con return</td>
</tr>
<tr>
<td>Ejemplo t√≠pico</td>
<td>DuplicarValor(Por Referencia x)</td>
<td>def modificar(lista): lista.append(x)</td>
</tr>
</table>

<h4 style="font-size:14px; font-weight:bold;">4. Buenas pr√°cticas</h4>
<ul>
<li>Usar paso por valor para proteger los datos y evitar efectos colaterales.</li>
<li>Usar paso por referencia solo cuando sea necesario actualizar estructuras o devolver resultados m√∫ltiples.</li>
<li>En Python, para evitar modificar una lista original, se puede enviar una copia: <code style="color:#000000; background-color:#f5f5f5;">procesar(lista.copy())</code></li>
<li>Documentar claramente en los comentarios si una funci√≥n altera los datos recibidos.</li>
<li>Mantener los par√°metros limitados y significativos, para mejorar la legibilidad y el mantenimiento del c√≥digo.</li>
</ul>

<p>Como concluye Severance (2016), ‚Äúcomprender c√≥mo viajan los datos entre funciones es un paso esencial para dominar la programaci√≥n estructurada y construir sistemas confiables y reutilizables‚Äù.</p>

</section>

    <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">

<h4 style="font-size:14px; font-weight:bold;">üé• Videos y materiales recomendados</h4>

<ul>
<li>
<strong>Par√°metros y funciones en Python ‚Äì P√≠ldoras Inform√°ticas</strong><br>
Explicaci√≥n clara sobre c√≥mo funcionan los par√°metros y el paso por valor y referencia.<br>
<a href="https://www.youtube.com/watch?v=_DLhUBWsRtw" style="color:#00ffff;">https://www.youtube.com/watch?v=_DLhUBWsRtw</a>
</li><br>

<li>
<strong>Subprocesos y funciones en PSeInt ‚Äì Aprende F√°cil</strong><br>
Ejemplos pr√°cticos paso a paso sobre c√≥mo usar ‚ÄúPor Referencia‚Äù y ‚ÄúPor Valor‚Äù en PSeInt.<br>
<a href="https://www.youtube.com/watch?v=Z7QWqE1xX2I" style="color:#00ffff;">https://www.youtube.com/watch?v=Z7QWqE1xX2I</a>
</li><br>

<li>
<strong>Paso por valor y paso por referencia explicado ‚Äì Programaci√≥n ATS</strong><br>
Explicaci√≥n general aplicable a PSeInt, C y Python, con ejemplos visuales.<br>
<a href="https://www.youtube.com/watch?v=EvZ9fLhA9hQ" style="color:#00ffff;">https://www.youtube.com/watch?v=EvZ9fLhA9hQ</a>
</li><br>

<li>
<strong>Curso Python desde cero ‚Äì C√≥digoFacilito (M√≥dulo de funciones)</strong><br>
Secci√≥n donde se muestra c√≥mo manipular listas, tuplas y diccionarios por referencia.<br>
<a href="https://www.youtube.com/watch?v=xWEOkz6TXmM" style="color:#00ffff;">https://www.youtube.com/watch?v=xWEOkz6TXmM</a>
</li>
</ul>

</section>

    `,
    ejemplos: `<p><strong>Ejemplos:</strong> </p>
    
  <section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">

<h4 style="font-size:14px; font-weight:bold;">Intercambio de variables</h4>
<p><strong>Objetivo:</strong> Aplicar el paso por referencia para modificar variables directamente.</p>

<pre style="background-color:#2d2d2d; color:#ffffff; padding:8px;">
SubProceso Intercambiar(Por Referencia a, Por Referencia b)
    Definir temp Como Entero
    temp <- a
    a <- b
    b <- temp
FinSubProceso

Proceso Principal
    Definir x, y Como Entero
    x <- 3
    y <- 7
    Escribir "Antes del intercambio: x=", x, " y=", y
    Intercambiar(x, y)
    Escribir "Despu√©s del intercambio: x=", x, " y=", y
FinProceso
</pre>

<p><strong>Salida esperada:</strong> Antes del intercambio: x=3 y=7<br>Despu√©s del intercambio: x=7 y=3</p>

<h4 style="font-size:14px; font-weight:bold;">C√°lculo de estad√≠sticas</h4>
<p><strong>Objetivo:</strong> Retornar m√∫ltiples valores (promedio, m√°ximo, m√≠nimo) con return.</p>

<pre style="background-color:#2d2d2d; color:#ffffff; padding:8px;">
def calcular_estadisticas(lista):
    promedio = sum(lista) / len(lista)
    maximo = max(lista)
    minimo = min(lista)
    return promedio, maximo, minimo

datos = [15, 22, 8, 19, 31]
prom, maximo, minimo = calcular_estadisticas(datos)

print(f"Promedio: {prom:.2f}")
print("M√°ximo:", maximo)
print("M√≠nimo:", minimo)
</pre>

<p><strong>Salida esperada:</strong><br>Promedio: 19.00<br>M√°ximo: 31<br>M√≠nimo: 8</p>

<h4 style="font-size:14px; font-weight:bold;">Gesti√≥n de inventario</h4>
<p><strong>Objetivo:</strong> Usar paso por referencia para actualizar valores de stock.</p>

<pre style="background-color:#2d2d2d; color:#ffffff; padding:8px;">
SubProceso ActualizarStock(Por Referencia stock, cantidad)
    stock <- stock - cantidad
FinSubProceso

Proceso Principal
    Definir stock, vendido Como Entero
    stock <- 50
    vendido <- 8
    Escribir "Stock inicial: ", stock
    ActualizarStock(stock, vendido)
    Escribir "Stock actualizado: ", stock
FinProceso
</pre>

<p><strong>Salida esperada:</strong><br>Stock inicial: 50<br>Stock actualizado: 42</p>

<h4 style="font-size:14px; font-weight:bold;">Duplicar elementos mutables</h4>
<p><strong>Objetivo:</strong> Aplicar paso por referencia con estructuras mutables (listas).</p>

<pre style="background-color:#2d2d2d; color:#ffffff; padding:8px;">
def duplicar_elementos(lista):
    for i in range(len(lista)):
        lista[i] = lista[i] * 2

numeros = [1, 3, 5, 7]
print("Lista original:", numeros)
duplicar_elementos(numeros)
print("Lista duplicada:", numeros)
</pre>

<p><strong>Salida esperada:</strong><br>Lista original: [1, 3, 5, 7]<br>Lista duplicada: [2, 6, 10, 14]</p>

<h4 style="font-size:14px; font-weight:bold;">Sumar listas</h4>
<p><strong>Objetivo:</strong> Usar paso por valor, retornando una nueva lista sin modificar las originales.</p>

<pre style="background-color:#2d2d2d; color:#ffffff; padding:8px;">
def sumar_listas(lista1, lista2):
    if len(lista1) != len(lista2):
        return "Error: Las listas deben tener el mismo tama√±o."
    nueva = []
    for i in range(len(lista1)):
        nueva.append(lista1[i] + lista2[i])
    return nueva

a = [2, 4, 6]
b = [1, 3, 5]
resultado = sumar_listas(a, b)

print("Lista 1:", a)
print("Lista 2:", b)
print("Suma:", resultado)
</pre>

<p><strong>Salida esperada:</strong><br>Lista 1: [2, 4, 6]<br>Lista 2: [1, 3, 5]<br>Suma: [3, 7, 11]</p>

<h4 style="font-size:14px; font-weight:bold;">Calcular notas finales</h4>
<p><strong>Objetivo:</strong> Calcular un promedio y devolverlo usando paso por referencia.</p>

<pre style="background-color:#2d2d2d; color:#ffffff; padding:8px;">
SubProceso CalcularPromedio(Por Referencia notaFinal, n1, n2, n3)
    notaFinal <- (n1 + n2 + n3) / 3
FinSubProceso

Proceso Principal
    Definir n1, n2, n3, promedio Como Real
    n1 <- 15
    n2 <- 12
    n3 <- 18
    CalcularPromedio(promedio, n1, n2, n3)
    Escribir "El promedio final es: ", promedio
FinProceso
</pre>

<p><strong>Salida esperada:</strong><br>El promedio final es: 15</p>

<h4 style="font-size:14px; font-weight:bold;">Sistema de reservas</h4>
<p><strong>Objetivo:</strong> Aplicar par√°metros por referencia con listas y validaciones.</p>

<pre style="background-color:#2d2d2d; color:#ffffff; padding:8px;">
def reservar_asiento(asientos, numero):
    if numero < 0 or numero >= len(asientos):
        return "N√∫mero de asiento inv√°lido."
    if not asientos[numero]:
        return "El asiento ya est√° ocupado."
    asientos[numero] = False
    return f"Asiento {numero + 1} reservado correctamente."

asientos = [True, True, False, True]
print(reservar_asiento(asientos, 1))
print("Estado actual:", asientos)
</pre>

<p><strong>Salida esperada:</strong><br>Asiento 2 reservado correctamente.<br>Estado actual: [True, False, False, True]</p>

<h4 style="font-size:14px; font-weight:bold;">Control de inventario modular</h4>
<p><strong>Objetivo:</strong> Integrar todo lo aprendido: modularidad, par√°metros, retorno y referencia.</p>

<pre style="background-color:#2d2d2d; color:#ffffff; padding:8px;">
def agregar_producto(inventario, nombre, cantidad):
    if nombre in inventario:
        return "El producto ya existe."
    inventario[nombre] = cantidad
    return f"Producto '{nombre}' agregado con √©xito."

def actualizar_producto(inventario, nombre, cantidad):
    if nombre not in inventario:
        return "El producto no existe."
    inventario[nombre] += cantidad
    return f"Stock de '{nombre}' actualizado a {inventario[nombre]} unidades."

def mostrar_inventario(inventario):
    print("\nInventario actual:")
    for producto, cantidad in inventario.items():
        print(f"- {producto}: {cantidad} unidades")

inventario = {}
print(agregar_producto(inventario, "L√°piz", 20))
print(agregar_producto(inventario, "Cuaderno", 15))
print(actualizar_producto(inventario, "L√°piz", 10))
mostrar_inventario(inventario)
</pre>

<p><strong>Salida esperada:</strong><br>Producto 'L√°piz' agregado con √©xito.<br>Producto 'Cuaderno' agregado con √©xito.<br>Stock de 'L√°piz' actualizado a 30 unidades.<br><br>Inventario actual:<br>- L√°piz: 30 unidades<br>- Cuaderno: 15 unidades</p>

</section>
  
    
    `,
    quiz: `<p><strong>Quiz:</strong> </p>
    
    
    
    
    
    
    
    `
  }
};

// === Datos de los cursos ===
const cursos = {
  1: {
    titulo: "Minicurso 1: L√≥gica de Programaci√≥n",
    descripcion: "Desarrolla el pensamiento computacional y aprende a representar algoritmos paso a paso.",
    imagen: "assets/img/C+.png",
    modulos: [
      { nombre: "üß© Tema 1 ‚Äì Pensamiento computacional y algoritmos ", id: "dia1", recursos: ["Teor√≠a", "Ejemplos", "Prueba diagn√≥stica"] },
      { nombre: "üîÑ Tema 2 ‚Äì Diagramas de flujo ", id: "dia2", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "üî¢ Tema 3 ‚Äì Variables y tipos de datos ", id: "dia3", recursos: ["Teor√≠a", "Ejemplos", "Quiz intermedio"] },
      { nombre: "‚öôÔ∏è Tema 4 ‚Äì Estructuras secuenciales y condicionales ", id: "dia4", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "üíª Tema 5 ‚Äì Pseudoc√≥digo ", id: "dia5", recursos: ["Teor√≠a", "Ejemplos", "Quiz final"] }
    ]
  },
  2: {
   titulo: "Minicurso 2: Introducci√≥n a PSeInt",
    descripcion: "Aprende los fundamentos de la programaci√≥n usando PSeInt.",
    imagen: "assets/img/sub.jpg",
    modulos: [
      { nombre: "Tema 1 ‚Äì Sintaxis b√°sica en PSeInt", id: "pseint1", recursos: ["Teor√≠a", "Ejemplos", "Quiz de entrada"] },
      { nombre: "Tema 2 ‚Äì Estructuras b√°sicas de programaci√≥n en PSeInt", id: "pseint2", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "Tema 3 ‚Äì Control de flujo: estructuras condicionales en PSeInt.", id: "pseint3", recursos: ["Teor√≠a", "Ejemplos", "Quiz intermedio"] },
      { nombre: "Tema 4 ‚Äì Control de flujo: estructuras repetitivas en PSeInt.", id: "pseint4", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "Tema 5 ‚Äì  Implementar funciones y procedimientos en PSeInt.", id: "pseint5", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "Tema 6 ‚Äì  Aplicaci√≥n pr√°ctica: creaci√≥n de programas simples", id: "pseint6", recursos: ["Teor√≠a", "Ejemplos", "Quiz final"] }
    ]
  },
  3: {
    titulo: "Minicurso 3: Fundamentos de Python",
    descripcion: "Aprende a programar con Python desde cero con un mini-proyecto final.",
    imagen: "assets/img/python1.png",
    modulos: [
      { nombre: "Tema 1‚Äì Introducci√≥n a Python y su entorno", id: "py1", recursos: ["Teor√≠a", "Ejemplos", "Quiz de entrada "] },
      { nombre: "Tema 2 ‚Äì Variables, operadores y estructuras de control en Python", id: "py2", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "Tema 3 ‚Äì Estructuras de datos b√°sicas en Python ", id: "py3", recursos: ["Teor√≠a", "Ejemplos", "Quiz Intermedio"] },
      { nombre: "Tema 4 ‚Äì Funciones y modularidad en Python", id: "py4", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "Tema 5 ‚Äì  Entrada, salida y manejo de errores en Python", id: "py5", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "Tema 6 ‚Äì  Aplicaci√≥n pr√°ctica", id: "py6", recursos: ["Teor√≠a", "Ejemplos", "Quiz final"] }
    ]
  },
  4: {
    titulo: "Minicurso 4: Programaci√≥n Modular",
    descripcion: "Organiza tus programas en funciones reutilizables y desarrolla un mini-reto.",
    imagen: "assets/img/prograMod.png",
    modulos: [
      { nombre: "Tema 1 ‚Äì Concepto de modularizaci√≥n", id: "mod1", recursos: ["Teor√≠a", "Ejemplos", "Quiz de entrada"] },
      { nombre: "Tema 2 ‚Äì Funciones en pseudoc√≥digo", id: "mod2", recursos: ["Teor√≠a", "Ejemplos", "Quiz Intermedio"] },
      { nombre: "Tema 3 ‚Äì Par√°metros en funciones y subprocesos", id: "mod3", recursos: ["Teor√≠a", "Ejemplos", "Quiz final"] }
    ]
  }
};

// === Funci√≥n principal ===
function cargarCurso() {
  const curso = cursos[cursoSeleccionado];

  if (!curso) {
    document.getElementById("titulo-curso").textContent = "Curso no encontrado";
    document.getElementById("descripcion-curso").textContent = "Verifica el enlace o selecciona un curso v√°lido.";
    return;
  }

  // Hero
  const hero = document.querySelector(".hero-curso");
  document.getElementById("titulo-curso").textContent = curso.titulo;
  document.getElementById("descripcion-curso").textContent = curso.descripcion;

  if (curso.imagen) {
    hero.style.backgroundImage = `linear-gradient(rgba(5,11,18,0.85), rgba(5,11,18,0.9)), url('${curso.imagen}')`;
    hero.style.backgroundSize = "cover";
    hero.style.backgroundPosition = "center";
    hero.style.backgroundRepeat = "no-repeat";
    hero.style.backgroundAttachment = "fixed";
  }

  // Contenedor de m√≥dulos
  const contenedor = document.getElementById("contenido-curso");
  contenedor.innerHTML = "";

  curso.modulos.forEach(mod => {
    const moduloHTML = `
      <section class="modulo">
        <h2>${mod.nombre}</h2>
        <div class="recursos">
          ${mod.recursos.map(r => `<button class="btn-recurso" data-target="${r.toLowerCase().replace(/\s/g,'-')}-${mod.id}">${r}</button>`).join("")}
        </div>
        ${mod.recursos.map(r => {
          const key = r.toLowerCase()
                        .normalize("NFD")
                        .replace(/[\u0300-\u036f]/g, "") // quitar tildes
                        .replace(/\s/g, "_");

          const contenido = contenidoModulos[mod.id]?.[key] || `<p>Aqu√≠ puedes colocar el contenido de "${r}".</p>`;
          const objetivoHTML = (key === "teoria" && contenidoModulos[mod.id]?.objetivo)
            ? contenidoModulos[mod.id].objetivo
            : "";

          return `
            <div id="${r.toLowerCase().replace(/\s/g,'-')}-${mod.id}" class="subseccion">
              <h3>${r}</h3>
              ${objetivoHTML}
              ${contenido}
            </div>
          `;
        }).join("")}
      </section>
    `;
    contenedor.insertAdjacentHTML("beforeend", moduloHTML);
  });

  // Scroll suave
  document.querySelectorAll(".btn-recurso").forEach(btn => {
    btn.addEventListener("click", () => {
      const target = document.getElementById(btn.dataset.target);
      if (target) {
        target.scrollIntoView({ behavior: "smooth", block: "start" });
      }
    });
  });
}

// === Agregar referencias bibliogr√°ficas por curso ===
function agregarReferencias(cursoId) {
  const contenedor = document.getElementById("contenido-curso");
  if (!contenedor) return;

  const referenciasPorCurso = {
    1: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
    <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 17px; line-height: 1.6;">
  <h2 style="margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
 <p style="margin-top: 25px;">
  <p>Asana. (2025). ¬øQu√© es un diagrama de flujo y c√≥mo hacerlo? Recuperado de <a href="https://asana.com/es/resources/what-is-a-flowchart" style="color: #9cd3ff;">https://asana.com/es/resources/what-is-a-flowchart</a></p>

  <p>Brookshear, J. G., & Brylow, D. (2023). <i>Computer Science: An Overview</i> (14th ed.). Pearson Education.</p>

  <p>Cede√±o, D., & Cede√±o, F. (2021). <i>Algoritmos y estructuras de datos.</i> Editorial Universitaria.</p>

  <p>Cervera-Manjarrez, D., et al. (2023). Principios y estrategias para el desarrollo del pensamiento computacional. SciELO Venezuela.</p>

  <p>Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). <i>Introduction to Algorithms</i> (4th ed.). MIT Press.</p>

  <p>Creately. (2025). Aprende qu√© es un diagrama de flujo y c√≥mo crearlo. Recuperado de <a href="https://creately.com/es/guides/diagramas/diagrama-de-flujo-guia/" style="color: #9cd3ff;">https://creately.com/es/guides/diagramas/diagrama-de-flujo-guia/</a></p>

  <p>Dale, N., & Weems, C. (2023). <i>Programming and Problem Solving with Python</i> (2nd ed.). Jones & Bartlett Learning.</p>

  <p>Dale, N., & Weems, C. (2023). <i>Programming Logic and Design: Comprehensive</i> (10¬™ ed.). Cengage Learning.</p>

  <p>De Rivero Manrique, E. R. (2022). <i>Desarrollo de un sistema de recomendaci√≥n basado en inteligencia artificial.</i> Universidad Cat√≥lica de Santa Mar√≠a. Recuperado de <a href="https://repositorio.ucsm.edu.pe/bitstream/20.500.12920/11825/1/71.0678.IS.pdf" style="color: #9cd3ff;">https://repositorio.ucsm.edu.pe/bitstream/20.500.12920/11825/1/71.0678.IS.pdf</a></p>

  <p>Deitel, P., & Associates, Inc. (2004). Control structures in programming: Sequence, selection, & iteration (pp. 5‚Äì7).</p>

  <p>Deitel, P., & Deitel, H. (2019). <i>Introduction to Programming Using Python</i> (3¬™ ed., pp. 100‚Äì103). Pearson Education.</p>

  <p>Gaddis, T. (2022). <i>Starting Out with Programming Logic and Design</i> (6th ed.). Pearson Education.</p>

  <p>Gaddis, T. (2022). <i>Introducci√≥n a la programaci√≥n con Python</i> (6¬™ ed., pp. 110‚Äì115). Pearson Educaci√≥n.</p>

  <p>Garc√≠a, H. M. (2024). Pensamiento computacional y resoluci√≥n de problemas en matem√°ticas. Universidad Nacional de Educaci√≥n. Recuperado de <a href="https://repositorio.une.edu.pe/server/api/core/bitstreams/5ff824af-837a-4cc4-89c8-dd2a00da34d4/content" style="color: #9cd3ff;">https://repositorio.une.edu.pe/server/api/core/bitstreams/5ff824af-837a-4cc4-89c8-dd2a00da34d4/content</a></p>

  <p>Garc√≠a-Molina, M., & Valverde, J. (2019). <i>Introducci√≥n a la l√≥gica computacional.</i> Universidad Polit√©cnica de Madrid.</p>

  <p>Gonz√°lez, A., & Mart√≠nez, R. (2022). El pensamiento computacional como herramienta transversal en la educaci√≥n b√°sica. <i>Revista Iberoamericana de Educaci√≥n a Distancia.</i></p>

  <p>Herrera, A. (2020). <i>Diagrama de flujo.</i> Universidad Aut√≥noma de Nuevo Le√≥n. Recuperado de <a href="https://www.uanl.mx/utilerias/chip/descarga/diagrama_de_flujo.pdf" style="color: #9cd3ff;">https://www.uanl.mx/utilerias/chip/descarga/diagrama_de_flujo.pdf</a></p>

  <p>Joyanes Aguilar, L. (2022). <i>Fundamentos de programaci√≥n: Algoritmos, estructuras de datos y objetos</i> (4¬™ ed., pp. 236‚Äì240). McGraw-Hill.</p>

  <p>Joyanes Aguilar, L. (2022). <i>Fundamentos de programaci√≥n: Algoritmos, estructuras de datos y objetos</i> (4¬™ ed., pp. 250‚Äì252). McGraw-Hill.</p>

  <p>Lambert, K. (2022). <i>Fundamentos de Python: Primeros programas</i> (3¬™ ed., pp. 127‚Äì130). Cengage Learning.</p>

  <p>Liang, Y. D. (2022). <i>Introduction to Programming Using Python</i> (2nd ed.). Pearson Education.</p>

  <p>Malvino, A. P. (2021). <i>Principios de electr√≥nica</i> (8¬™ ed.). McGraw-Hill. (Referencia a√±adida por contexto de condicionales, si fue usada en texto)</p>

  <p>Mendiolaza Cornejo, E. D. (2022). Estrategia metodol√≥gica para el desarrollo del pensamiento computacional en estudiantes de programaci√≥n de computadoras. Universidad de San Ignacio de Loyola. Recuperado de <a href="https://repositorio.usil.edu.pe/bitstreams/f1a7a53f-a445-4aae-be94-0cb2735b3a2c/download" style="color: #9cd3ff;">https://repositorio.usil.edu.pe/bitstreams/f1a7a53f-a445-4aae-be94-0cb2735b3a2c/download</a></p>

  <p>Nulab. (2024). Diagrama de procesos de negocio. Recuperado de <a href="https://nulab.com/es/cacoo/templates/business-process-diagram/" style="color: #9cd3ff;">https://nulab.com/es/cacoo/templates/business-process-diagram/</a></p>

  <p>Rodr√≠guez Canfranc, P. (2023). Pensamiento computacional, una competencia m√°s all√° de la programaci√≥n. Fundaci√≥n Telef√≥nica. Recuperado de <a href="https://www.fundaciontelefonica.com" style="color: #9cd3ff;">https://www.fundaciontelefonica.com</a></p>

  <p>Savitch, W. J. (2021). <i>Absolute C++</i> (7th ed.). Pearson Education.</p>

  <p>Valacich, J. S., & Schneider, C. (2023). <i>Information Systems Today: Managing the Digital World</i> (10th ed.). Pearson Education.</p>

  <p>Valacich, J., & Schneider, C. (2023). <i>Information Systems Today: Managing in the Digital World</i> (10¬™ ed., pp. 88‚Äì90). Pearson Education.</p>

  <p>Wing, J. M. (2006). Computational thinking. <i>Communications of the ACM, 49</i>(3), 33‚Äì35.</p>
</section>

    `,
    2: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
       <section style="color: white; text-align: left; margin-left: 40px; margin-right: 40px; font-size: 15px; line-height: 1.7;">


  <p style="text-indent: -25px; margin-left: 25px;">
  Almaguer, A. B. (2023). <em>Importancia de la disciplina Lenguajes y T√©cnicas de Programaci√≥n</em> [PDF]. Recuperado de  
  <a href="https://dialnet.unirioja.es/descarga/articulo/9304810.pdf" target="_blank" style="color:#00ffff;">https://dialnet.unirioja.es/descarga/articulo/9304810.pdf</a>
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Brackmann, C., Rom√°n-Gonz√°lez, M., & Moreno-Le√≥n, J. (2021). Pensamiento computacional y ense√±anza de la programaci√≥n en entornos educativos.  
  <em>Revista Latinoamericana de Tecnolog√≠a Educativa, 20</em>(1), 45‚Äì63.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Cervera-Manjarrez, N. (2023). Principios y estrategias para el desarrollo del pensamiento computacional.  
  <em>Revista de Tecnolog√≠a Educativa, 2</em>(1), 1‚Äì15. Recuperado de  
  <a href="https://ve.scielo.org/scielo.php?pid=S2542-" target="_blank" style="color:#00ffff;">https://ve.scielo.org/scielo.php?pid=S2542-</a>
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Dahl, O. J., Dijkstra, E. W., & Hoare, C. A. R. (2021). <em>Structured programming.</em> Academic Press.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  G√≥mez, A., & Paredes, D. (2023). Errores frecuentes en el aprendizaje de estructuras repetitivas en PSeInt.  
  <em>Revista de Educaci√≥n Tecnol√≥gica, 15</em>(2), 58‚Äì74.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Instituto de Educaci√≥n Superior Privado Newman. (2022). <em>¬øQu√© es un algoritmo? Definici√≥n, tipos y ejemplos.</em>  
  Recuperado de  
  <a href="https://www.epnewman.edu.pe/revista/ingenieria/que-es-algoritmo/" target="_blank" style="color:#00ffff;">https://www.epnewman.edu.pe/revista/ingenieria/que-es-algoritmo/</a>
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Joyanes Aguilar, L. (2022). <em>Programaci√≥n estructurada y modular: fundamentos y aplicaciones.</em> Alfaomega Grupo Editor.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Mart√≠nez, P., & L√≥pez, G. (2022). <em>Did√°ctica de la programaci√≥n en pseudoc√≥digo: estrategias para el desarrollo del pensamiento computacional.</em>  
  Editorial Acad√©mica Espa√±ola.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Osorio, Y. E. C. (2023). <em>Modelos mentales y algoritmos</em> [PDF]. Recuperado de  
  <a href="https://dialnet.unirioja.es/descarga/articulo/10222892.pdf" target="_blank" style="color:#00ffff;">https://dialnet.unirioja.es/descarga/articulo/10222892.pdf</a>
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Pressman, R. S., & Maxim, B. R. (2020). <em>Ingenier√≠a del software: un enfoque pr√°ctico</em> (9.¬™ ed.). McGraw-Hill Education.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  PSeInt. (2025). <em>Manual oficial de referencia de subprocesos y funciones.</em> Recuperado de  
  <a href="https://pseint.sourceforge.net" target="_blank" style="color:#00ffff;">https://pseint.sourceforge.net</a>
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Rodr√≠guez, P., & Torres, M. (2023). Aprendizaje modular y funciones en entornos educativos de pseudoc√≥digo.  
  <em>Revista Iberoamericana de Tecnolog√≠a Educativa, 12</em>(3), 45‚Äì59.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Rodr√≠guez, M., & Torres, J. (2023). <em>Did√°ctica de la programaci√≥n: pensamiento computacional y algoritmos.</em>  
  Editorial Acad√©mica Espa√±ola.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Rojas, L. (2022). <em>Did√°ctica de la programaci√≥n estructurada: enfoques activos con PSeInt y Scratch.</em>  
  Universidad Nacional de Educaci√≥n a Distancia.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Saa-Saltos, J. (2024). Incidencia de fundamentos de programaci√≥n en el desarrollo del pensamiento abstracto de estudiantes.  
  <em>REMCA, Revista de Matem√°tica, Computaci√≥n y Algoritmos, 8</em>(1). Recuperado de  
  <a href="https://remca.umet.edu.ec/index.php/REMCA/article/view/713" target="_blank" style="color:#00ffff;">https://remca.umet.edu.ec/index.php/REMCA/article/view/713</a>
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Sierra, C. (2021). <em>Aprendizaje de algoritmos y pseudoc√≥digo con PSeInt.</em> Universidad Nacional Abierta y a Distancia (UNAD).
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Sierra, J. (2021). <em>Fundamentos de programaci√≥n estructurada.</em> Alfaomega.
  </p>

  <p style="text-indent: -25px; margin-left: 25px;">
  Universidad de C√≥rdoba. (2024). <em>Gu√≠a de laboratorio: estructuras condicionales y repetitivas en PSeInt.</em>  
  Facultad de Ingenier√≠a Inform√°tica. Recuperado de  
  <a href="https://pseint.sourceforge.net" target="_blank" style="color:#00ffff;">https://pseint.sourceforge.net</a>
  </p>

</section>

      </section>
    `,
    3: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
       
<section style="background-color:#0a0a0a; color:#e6e6e6; font-family:Arial, sans-serif; line-height:1.8; padding:25px; border-radius:12px;">
  <h2 style="color:#00bfff; font-size:26px; text-align:left; margin-bottom:20px;">üìö Referencias</h2>

  <p>Almaguer, A. B. (2023). <em>Importancia de la disciplina Lenguajes y T√©cnicas de Programaci√≥n.</em> Dialnet. Recuperado de 
  <a href="https://dialnet.unirioja.es/descarga/articulo/9304810.pdf" style="color:#66ccff;">https://dialnet.unirioja.es/descarga/articulo/9304810.pdf</a></p>

  <p>Codefinity. (2023). <em>The History of Python Programming Language.</em> Recuperado de 
  <a href="https://codefinity.com" style="color:#66ccff;">https://codefinity.com</a></p>

  <p>Downey, A. (2020). <em>Think Python: How to Think Like a Computer Scientist</em> (2.¬™ ed.). Green Tea Press.</p>

  <p>Downey, A. (2020). <em>Think Python: How to Think Like a Computer Scientist</em> (3.¬™ ed.). Green Tea Press.</p>

  <p>Fazt. (2021, noviembre 15). <em>Bucles y condiciones en JavaScript | for, while, if, break, continue</em> [Video]. YouTube. 
  <a href="https://www.youtube.com/watch?v=J8lQH9I7jVc" style="color:#66ccff;">https://www.youtube.com/watch?v=J8lQH9I7jVc</a></p>

  <p>GeeksforGeeks. (2023). <em>Python Booleans.</em> Recuperado de 
  <a href="https://www.geeksforgeeks.org/python-booleans" style="color:#66ccff;">https://www.geeksforgeeks.org/python-booleans</a></p>

  <p>Lutz, M. (2021). <em>Learning Python</em> (5.¬™ ed.). O‚ÄôReilly Media.</p>

  <p>Moreno, J., Robles, G., & Rom√°n, M. (2020). On the role of Python in programming-related courses for computer science and engineering academic education. <em>Education and Information Technologies, 25</em>(2), 927‚Äì940. 
  <a href="https://doi.org/10.1007/s10639-019-09992-4" style="color:#66ccff;">https://doi.org/10.1007/s10639-019-09992-4</a></p>

  <p>Moreno, R., Robles, J., & Rom√°n, A. (2020). <em>Introducci√≥n al pensamiento computacional con Python.</em> Universidad Nacional de Educaci√≥n a Distancia (UNED).</p>

  <p>Pylint Guidelines. (2023). <em>Python variable naming conventions and best practices.</em> Recuperado de 
  <a href="https://pylint.pycqa.org/" style="color:#66ccff;">https://pylint.pycqa.org/</a></p>

  <p>Python Software Foundation. (2024). <em>History and Features of Python.</em> Recuperado de 
  <a href="https://www.python.org" style="color:#66ccff;">https://www.python.org</a></p>

  <p>Python Software Foundation. (2024). <em>Python documentation: Data types and variables.</em> Recuperado de 
  <a href="https://docs.python.org/3/" style="color:#66ccff;">https://docs.python.org/3/</a></p>

  <p>Python Software Foundation. (2024). <em>Python documentation: Expressions and operators.</em> Recuperado de 
  <a href="https://docs.python.org/3/reference/expressions.html" style="color:#66ccff;">https://docs.python.org/3/reference/expressions.html</a></p>

  <p>Python Software Foundation. (2024). <em>Python documentation: for and while statements.</em> Recuperado de 
  <a href="https://docs.python.org/3/tutorial/controlflow.html" style="color:#66ccff;">https://docs.python.org/3/tutorial/controlflow.html</a></p>

  <p>Python Software Foundation. (2024). <em>Python documentation: The if statement.</em> Recuperado de 
  <a href="https://docs.python.org/3/tutorial/controlflow.html" style="color:#66ccff;">https://docs.python.org/3/tutorial/controlflow.html</a></p>

  <p>Real Python. (2024). <em>Python Data Types (Numbers, Strings, and Booleans).</em> Recuperado de 
  <a href="https://realpython.com/python-data-types" style="color:#66ccff;">https://realpython.com/python-data-types</a></p>

  <p>Severance, C. (2016). <em>Python for Everybody: Exploring Data in Python 3.</em> CreateSpace Independent Publishing.</p>

  <p>Sweigart, A. (2023). <em>Automate the Boring Stuff with Python</em> (2.¬™ ed.). No Starch Press.</p>

  <p>Zelle, J. (2022). <em>Python Programming: An Introduction to Computer Science</em> (4.¬™ ed.). Franklin, Beedle & Associates.</p>
</section>

        
      </section>
    `,
    4: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          

<section style="font-family: Arial, sans-serif; color:#ffffff; line-height:1.7; text-align:left; padding:15px;">



<p>Lutz, M. (2021) Learning Python (5th ed.) O‚ÄôReilly Media</p>

<p>Moreno, A., Robles, J., & Rom√°n, F. (2020) Programaci√≥n estructurada y modular Editorial UOC</p>

<p>Moreno, J., Robles, M., & Rom√°n, C. (2020) Fundamentos de programaci√≥n estructurada Editorial Alfaomega</p>

<p>Python Software Foundation. (2024) Python documentation: Control flow <a href="https://docs.python.org/3/tutorial/controlflow.html" style="color:#ffffff;">https://docs.python.org/3/tutorial/controlflow.html</a></p>

<p>Python Software Foundation. (2024) Python documentation <a href="https://docs.python.org/3/" style="color:#ffffff;">https://docs.python.org/3/</a></p>

<p>Severance, C. (2016) Python for Everybody: Exploring Data Using Python 3 CreateSpace Independent Publishing</p>

<p>Zelle, J. (2022) Python programming: An introduction to computer science (4th ed.) Franklin, Beedle & Associates Inc</p>

</section>



      </section>
    `
  };

  if (referenciasPorCurso[cursoId]) {
    contenedor.insertAdjacentHTML("beforeend", referenciasPorCurso[cursoId]);
  }
}

// === Inicializaci√≥n ===
document.addEventListener("DOMContentLoaded", () => {
  cargarCurso();
  agregarReferencias(cursoSeleccionado);
});