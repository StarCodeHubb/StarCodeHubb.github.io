console.log("Curso din√°mico cargado correctamente üöÄ");

// Obtener el n√∫mero de curso desde la URL
const params = new URLSearchParams(window.location.search);
const cursoSeleccionado = params.get("curso") || "1";

// === Contenido de los m√≥dulos por recurso ===
const contenidoModulos = {
  // Curso 1 ‚Äì L√≥gica de programaci√≥n
  dia1: {
    objetivo: `<p><strong>Objetivos:</strong></p> 
    <p>
    ‚úîÔ∏è Comprender el significado y la utilidad del pensamiento computacional.<br>
    ‚úîÔ∏è Identificar sus pilares principales y su funci√≥n.<br>
    ‚úîÔ∏è Aplicar estas ideas tanto en el aula como en la vida diaria.
     </p>`,
    teoria: `
      <p><strong>Temas:</strong></p>
      <ul>
        <p><strong>¬øQu√© es el pensamiento computacional?</strong></p>
        <p>En este primer tema se abordar√° el pensamiento computacional, una de las habilidades m√°s importantes en la sociedad actual. No se trata √∫nicamente de aprender a programar, sino de razonar y enfrentar los problemas de forma l√≥gica, creativa y estructurada, de manera similar a como lo har√≠a una computadora, pero aplicado a situaciones reales de la vida cotidiana.</p>
        <p>El pensamiento computacional es un proceso cognitivo que permite analizar un problema complejo, comprenderlo y dise√±ar soluciones efectivas. Para ello, requiere de una secuencia ordenada de acciones que ayudan a simplificar la situaci√≥n, identificar lo esencial y organizar los pasos necesarios para resolverla. En otras palabras, implica pensar con precisi√≥n, planificar estrategias y tomar decisiones basadas en el an√°lisis de la informaci√≥n disponible.</p>
        <p>Esta forma de pensamiento no se limita al √°mbito de la tecnolog√≠a o la inform√°tica. Por el contrario, puede aplicarse en cualquier contexto, desde planificar un viaje o un evento hasta resolver desaf√≠os en el aula o en el trabajo. Por ejemplo, al decidir c√≥mo llegar de un punto a otro en la ciudad, el pensamiento computacional nos ayuda a evaluar variables como la distancia, el tiempo, el tr√°fico o el clima, para luego elegir la mejor alternativa. Si alguna condici√≥n cambia, tambi√©n somos capaces de replantear el proceso o ajustar la estrategia, tal como se hace en la programaci√≥n al modificar un algoritmo.  <p>
        <p>De acuerdo con Cervera-Manjarrez et al. (2023), ‚Äúel pensamiento computacional permite que el ser humano se adentre en un mundo rico y vasto de habilidades de abstracci√≥n y pragmatismo que le posibilitan un uso m√°s consciente y adecuado de la tecnolog√≠a‚Äù. Esta idea refuerza que el pensamiento computacional es una competencia clave en la formaci√≥n moderna, pues impulsa el razonamiento l√≥gico, la creatividad, la capacidad de an√°lisis y la resoluci√≥n efectiva de problemas.<p>
        <p>Asimismo, Gonz√°lez y Mart√≠nez (2022) destacan que este tipo de pensamiento fomenta la autonom√≠a, la reflexi√≥n y la transferencia del conocimiento, ya que al enfrentarse a una situaci√≥n problem√°tica, el estudiante aprende a formular hip√≥tesis, analizar opciones y optimizar soluciones. En conjunto, ambas perspectivas subrayan que el desarrollo del pensamiento computacional no solo fortalece habilidades t√©cnicas, sino tambi√©n cognitivas y sociales, promoviendo un aprendizaje m√°s cr√≠tico, colaborativo y adaptable a los retos del mundo digital. <p>
        <p>En s√≠ntesis, el pensamiento computacional no consiste en programar, sino en entender y estructurar el razonamiento humano de manera l√≥gica y eficiente. Es una herramienta poderosa que permite transformar problemas complejos en soluciones claras, fomentando la creatividad, el pensamiento cr√≠tico y el trabajo en equipo. <p>
        <p> Antes de profundizar en sus componentes principales, es importante reconocer algunas ideas equivocadas y concepciones correctas que suelen presentarse al hablar de este concepto. A continuaci√≥n, se muestra un cuadro comparativo que busca diferenciar los mitos y realidades sobre el pensamiento computacional, con el fin de comprender su verdadero alcance y relevancia. <p>
        <p style="margin-top: 25px;">
        <p style="margin-top: 25px;">
        <img src="assets/img/tema1siyno.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>  <p>
        <p><strong>Los cuatro pilares del pensamiento computacional:</strong></p>
        <p>  Descomposici√≥n, reconocimiento de patrones , abstracci√≥n y dise√±o de algoritmos<p>
        <img src="assets/img/Pcompu.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p>El pensamiento computacional se apoya en cuatro habilidades fundamentales que permiten comprender, analizar y resolver problemas de manera estructurada. Estas competencias no solo se aplican en el √°mbito de la inform√°tica, sino tambi√©n en la vida cotidiana, el trabajo y la educaci√≥n, ayudando a desarrollar una mente anal√≠tica, creativa y l√≥gica.  <p>
        <p>Seg√∫n Rodr√≠guez Canfranc (2023), el pensamiento computacional es una competencia clave en la era digital, pues permite adaptarse a un mundo cada vez m√°s tecnol√≥gico. Esta afirmaci√≥n resalta la importancia de desarrollar habilidades cognitivas que vayan m√°s all√° de la programaci√≥n. Pensar de manera computacional implica analizar los problemas con l√≥gica, creatividad y organizaci√≥n, cualidades indispensables para desenvolverse con √©xito en entornos acad√©micos, laborales y cotidianos cada vez m√°s influenciados por la tecnolog√≠a.  <p>
        <p>A diferencia de lo que muchos piensan, el pensamiento computacional no se limita al uso de ordenadores o la escritura de c√≥digo; m√°s bien, es un proceso mental que permite formular problemas y dise√±ar soluciones claras y efectivas, aplicables en cualquier √°mbito. Como se√±ala Jeannette Wing, una de las pioneras del concepto, esta disciplina consiste en ‚Äúresolver problemas, dise√±ar sistemas y comprender el comportamiento humano utilizando los principios fundamentales de la inform√°tica‚Äù.  <p>
        <p>De esta forma, el pensamiento computacional se construye sobre cuatro pilares esenciales que orientan el an√°lisis y la resoluci√≥n de problemas: la descomposici√≥n, el reconocimiento de patrones, la abstracci√≥n y el dise√±o de algoritmos. Cada uno de ellos cumple un rol clave en la formaci√≥n del razonamiento l√≥gico y en la aplicaci√≥n de estrategias eficientes tanto en contextos educativos como en situaciones reales de la vida diaria.  <p>
        <p>A continuaci√≥n, se explican cada una de estas habilidades con m√°s detalle:  <p>
        <p>üìä1. Descomposici√≥n: <p>
        <p>La descomposici√≥n consiste en dividir un problema complejo en partes m√°s peque√±as y manejables, lo que facilita su an√°lisis y soluci√≥n. Esta habilidad ayuda a comprender mejor la estructura del problema, identificar sus componentes principales y abordar cada parte de forma organizada. Al resolver paso a paso, se evita la confusi√≥n y se mejora la eficiencia del trabajo.  <p>
        <p>Ejemplo: Si queremos organizar una feria escolar, podemos dividir el proyecto en subtareas: elegir el lugar, definir los stands, asignar responsables y planificar la difusi√≥n. Cada etapa puede resolverse de manera independiente, logrando una gesti√≥n m√°s clara y efectiva.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/descomponer.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>‚è∫Ô∏è2. Reconocimiento de patrones: <p>
        <p>El reconocimiento de patrones permite detectar similitudes, tendencias o repeticiones entre distintos problemas o situaciones. Esta habilidad es fundamental para reutilizar soluciones previas y optimizar el tiempo, ya que muchos desaf√≠os comparten estructuras comunes. Reconocer patrones tambi√©n fomenta la capacidad de predecir resultados y tomar decisiones m√°s acertadas.  <p>
        <p>Ejemplo: Si un docente nota que sus estudiantes aprenden mejor con actividades visuales, puede aplicar esa misma estrategia en diferentes materias o temas, aprovechando un patr√≥n de aprendizaje efectivo.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/profe.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üßä 3. Abstracci√≥n: <p>
        <p>La abstracci√≥n consiste en identificar los aspectos m√°s importantes de un problema y eliminar los detalles que no son relevantes para su soluci√≥n. De esta forma, se logra simplificar la informaci√≥n, concentrarse en lo esencial y dise√±ar modelos m√°s claros y funcionales. Es una habilidad clave para priorizar, sintetizar y comprender la esencia de cualquier situaci√≥n.  <p>
        <p>Ejemplo: Al dise√±ar una aplicaci√≥n de recetas, no es necesario detallar el color o la textura de los ingredientes; lo esencial es definir los pasos del proceso de preparaci√≥n, las cantidades y el tiempo de cocci√≥n.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/recetaPro.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üíª 4. Dise√±o de algoritmos:  <p>
        <p>El dise√±o de algoritmos implica establecer una secuencia l√≥gica y ordenada de pasos que conducen a la soluci√≥n de un problema. Es la base de la programaci√≥n, pero tambi√©n se aplica en la organizaci√≥n de tareas diarias. Un buen algoritmo debe ser claro, preciso y repetible, de modo que cualquier persona pueda seguirlo y obtener el mismo resultado.  <p>
        <p>Ejemplo: Para preparar un s√°ndwich, el algoritmo ser√≠a: tomar pan, colocar los ingredientes en orden, cerrar y servir. Este m√©todo garantiza coherencia y evita errores en el proceso.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/prepararSand.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>Finalmente, estos cuatro pilares fortalecen el razonamiento l√≥gico, la creatividad, la autonom√≠a y la colaboraci√≥n. Desarrollar el pensamiento computacional no solo prepara para comprender la tecnolog√≠a, sino que tambi√©n mejora la forma en que se analizan y resuelven los problemas cotidianos. En un mundo cada vez m√°s digital, estas habilidades se convierten en herramientas esenciales para el aprendizaje significativo y la adaptaci√≥n a los desaf√≠os del siglo XXI.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/esquemap.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        
        <p><strong>Qu√© es un algoritmo y sus caracter√≠sticas:</strong></p>
        <p style="margin-top: 25px;">
        <img src="assets/img/Algotmos.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        
        <p><strong>¬øQu√© es un algoritmo?</strong></p>
        <p style="margin-top: 30px;">
        <p style="text-align: center; font-style: italic; font-weight: bold;">
        "Un algoritmo es un conjunto de pasos que define c√≥mo hay que realizar una tarea. 
        Para que una m√°quina como una computadora pueda llevar a cabo una tarea, 
        es preciso dise√±ar y representar un algoritmo en una forma que sea compatible con la m√°quina."
        </p>
        <p style="text-align: center; font-style: italic; font-weight: bold;">
        Brookshear, G. (2012), Introducci√≥n a la Computaci√≥n (11a ed.). Pearson.
        </p>
        <p style="margin-top: 30px;">
        <p>En el √°mbito del pensamiento computacional, un algoritmo se entiende como una secuencia finita y ordenada de pasos l√≥gicos que permiten resolver un problema o realizar una tarea de manera sistem√°tica. Seg√∫n Cede√±o y Cede√±o (2021), los algoritmos representan ‚Äúun conjunto de instrucciones bien definidas que, al ejecutarse paso a paso, conducen a la obtenci√≥n de un resultado esperado.‚Äù
         Esto implica que su aplicaci√≥n no se limita al campo de la programaci√≥n, sino que puede observarse tambi√©n en la vida cotidiana, como al seguir una receta, resolver una operaci√≥n matem√°tica o planificar una actividad. <p>
        <p>El pensamiento computacional utiliza los algoritmos como una herramienta esencial para estructurar el razonamiento y organizar las ideas de forma l√≥gica, secuencial y coherente. En esta l√≠nea, Wing (2006) se√±ala que el pensamiento computacional consiste en ‚Äúla formulaci√≥n de problemas y la representaci√≥n de sus soluciones de manera que puedan ser ejecutadas eficazmente por un agente procesador de informaci√≥n.‚Äù Es decir, un algoritmo no solo define qu√© se debe hacer, sino tambi√©n c√≥mo debe hacerse. <p>
        <p style="margin-top: 25px;">
        <p>‚öôÔ∏è Caracter√≠sticas de un algoritmo : <p>
        <p>De acuerdo con Garc√≠a-Molina y Valverde (2019), un algoritmo debe cumplir con una serie de caracter√≠sticas fundamentales que garantizan su eficacia y aplicabilidad. Estas propiedades permiten que un procedimiento sea comprendido, ejecutado y optimizado tanto por personas como por computadoras. <p>
        
        <p style="margin-top: 30px;">
        <img src="assets/img/finito.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p> 1. Finito: <p>
        <p>Un algoritmo debe estar compuesto por un n√∫mero limitado de pasos. Esto significa que el proceso debe tener un punto de inicio y un final claramente definidos. Si las instrucciones se ejecutaran de forma infinita, el problema nunca llegar√≠a a resolverse.<p>
         <p>Ejemplo: Un algoritmo para calcular el promedio de notas termina una vez que obtiene el resultado final, no contin√∫a calculando indefinidamente. <p>
         <p>2. Claridad: <p>
        <p> Cada paso o instrucci√≥n debe expresarse de forma precisa, sin ambig√ºedades o interpretaciones m√∫ltiples. La claridad garantiza que cualquier persona o m√°quina pueda seguir las instrucciones sin cometer errores por confusi√≥n.<p>
         <p> Ejemplo: En lugar de decir ‚Äúprocesar los datos‚Äù, una instrucci√≥n clara ser√≠a ‚Äúsumar los valores num√©ricos de la columna A‚Äù.<p>
        <p>3. Secuencialidad: <p>
        <p>Las instrucciones de un algoritmo deben seguir un orden l√≥gico y coherente. Cada paso depende del anterior y prepara el contexto para el siguiente, lo cual asegura que el resultado sea correcto.<p>
         <p> Ejemplo: Para preparar una receta, primero se re√∫nen los ingredientes, luego se mezclan y finalmente se cocinan; alterar el orden puede arruinar el resultado. <p>
        <p>4. Eficiencia: <p>
        <p>Un algoritmo debe poder aplicarse a una amplia variedad de casos similares, no √∫nicamente a uno espec√≠fico. Esta caracter√≠stica le otorga flexibilidad y reutilizaci√≥n.<p>
        <p>Ejemplo: Un algoritmo que calcula el promedio puede aplicarse tanto a notas escolares como a temperaturas o ingresos, siempre que los datos sean num√©ricos. <p>
        <p>Estas caracter√≠sticas aseguran que los algoritmos sean comprensibles, precisos y adaptables, permitiendo que cualquier proceso ya sea inform√°tico o cotidiano pueda ejecutarse de forma ordenada y eficiente. <p>
        <p style="margin-top: 30px;">
        <img src="assets/img/caraAlg.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üß© Estructura de un algoritmo: <p>
        <p>   Todo algoritmo se compone de tres partes fundamentales que determinan su funcionamiento: <p>
        <p>    - Entrada (input): <p>
        <p>      Corresponde a los datos iniciales o informaci√≥n necesaria para iniciar el proceso. <p>
        <p>      Ejemplo: los ingredientes de una receta o los n√∫meros que se desean sumar. <p>
        <p>    - Proceso (processing): <p>
        <p>      Es el conjunto de pasos, operaciones o transformaciones que se realizan con los datos de entrada para llegar al resultado final.<p>
        <p>      Ejemplo: mezclar los ingredientes, realizar un c√°lculo o seguir un conjunto de reglas l√≥gicas.<p>
        <p>    - Salida (output):<p>
        <p>      Es el resultado final que se obtiene despu√©s de ejecutar correctamente todos los pasos del proceso.<p>
        <p>      Ejemplo: el plato preparado, el resultado de una operaci√≥n matem√°tica o la generaci√≥n de un reporte.<p>
        <p style="margin-top: 30px;">
        <img src="assets/img/eps.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
      
      </ul>
    `,
    ejemplos: `
      <p><strong>Ejemplos:</strong></p>
        <p>Para comprender mejor c√≥mo aplicar el pensamiento computacional en distintas situaciones, a continuaci√≥n exploraremos algunos ejemplos cotidianos.
        Cada uno de ellos mostrar√° c√≥mo se ponen en pr√°ctica sus principales pilares: descomposici√≥n, reconocimiento de patrones, abstracci√≥n y dise√±o de algoritmos as√≠ como la estructura entrada, proceso y salida, que nos ayuda a entender c√≥mo transformamos una idea o informaci√≥n en un resultado concreto. <p>
        <p><strong>üß© Ejemplos del Pensamiento Computacional </strong></p>
        <p style="margin-top: 30px;">
        <p><strong>üß† Ejemplo 1: Reuni√≥n con los amigos en un lugar nuevo</strong></p>
        <p>Situaci√≥n: <p>
        <p>Queremos organizar una salida con amigos, pero cada uno tiene gustos, presupuestos y horarios diferentes. <p>
        <p>Aplicaci√≥n del pensamiento computacional: <p>
        <img src="assets/img/reua.png" alt="Algoritmo" 
        style="float: right; width: 280px; margin: 10px 0 10px 15px; border-radius: 10px;">
        <p> - Descomposici√≥n: Dividimos el problema en partes: elegir actividad, decidir lugar, calcular gastos y coordinar horarios.<p>
        <p> - Reconocimiento de patrones: Analizamos experiencias anteriores para ver qu√© actividades funcionaron bien.<p>
        <p> - Abstracci√≥n: Dejamos de lado detalles irrelevantes (como el color de las sillas del restaurante) y nos enfocamos en lo esencial: disponibilidad, precio y transporte.<p>
        <p> - Algoritmo: <p>
        <p>   Paso a paso: crear una lista de opciones ‚Üí verificar disponibilidad ‚Üí calcular costos ‚Üí confirmar el plan.<p>
        <p>Resultado: <p>
        <p>Se obtiene una planificaci√≥n m√°s clara y r√°pida, donde todos pueden participar y decidir con base en informaci√≥n concreta. <p>
        <p style="margin-top: 30px;">
        <p><strong>üç≥ Ejemplo 2: Cocinemos</strong></p>
        <p>Descomposici√≥n: <p>
        <p>Dividir la tarea en pasos: seleccionar ingredientes, preparar utensilios, cocinar, servir. <p>
        <p>Ejemplo: <p>
        <p> - Entrada ‚Üí lista de ingredientes.<p>
        <p> - Proceso ‚Üí mezclar, batir, cocinar.<p>
        <p> - Salida ‚Üí plato terminado.<p>
        <p> Referencia visual sugerida: Cooking and Decomposition of Food. (2023, marzo 14). YouTube. https://www.youtube.com/watch?v=SR9SWaN-cOY<p>
        <p style="margin-top: 30px;">
        <p><strong>üéÆ Ejemplo 3: Videojuegos </strong></p>
        <p>Situaci√≥n: <p>
        <p>En un videojuego, el jugador debe completar un nivel recolectando objetos, evitando enemigos y encontrando la salida antes de que acabe el tiempo. <p>
         <img src="assets/img/mario.png" alt="Algoritmo" 
        style="float: right; width: 280px; margin: 10px 0 10px 15px; border-radius: 10px;">
        <p>Aplicaci√≥n del pensamiento computacional: <p>
        <p> - Descomposici√≥n: Identificar subproblemas: qu√© objetos recolectar, c√≥mo evitarlos enemigos, c√≥mo salir del nivel. <p>
        <p> - Reconocimiento de patrones: Usar estrategias que funcionaron en niveles anteriores.<p>
        <p> - Abstracci√≥n: Ignorar los elementos decorativos del entorno y centrarse solo en los objetivos necesarios para ganar.<p>
        <p> - Algoritmo:<p>
        <p>   Planificacion de secuencia de acciones: recolectar objetos ‚Üí evitar obst√°culos ‚Üí dirigirse a la salida ‚Üí completar el nivel.<p>
        <p>   Resultado: <p>
        <p>   El jugador optimiza sus decisiones, mejora su desempe√±o y puede aplicar estrategias similares en otros niveles.<p>
        <p style="margin-top: 30px;">
        <p><strong>üìø Ejemplo 4: El collar</strong></p>
        <p>Situaci√≥n: <p>
        <p> Construir un collar de 24 cm. <p>
        <img src="assets/img/collar.png" alt="Algoritmo" 
        style="float: right; width: 280px; margin: 10px 0 10px 15px; border-radius: 10px;">
        <p>Preguntas clave: <p>
        <p> - ¬øCu√°l ser√° el costo total? <p>
        <p> - ¬øQu√© materiales necesito? <p>
        <p> - ¬øQu√© materiales necesito? <p>
        <p> - ¬øCu√°ntas piezas debe tener?<p>
        <p>Pensamiento computacional aplicado: <p>
        <p> - Descomponer el problema (materiales, medidas, costo).<p>
        <p> - Reconocer patrones (si cada cuenta mide 2 cm, se necesitan 12 piezas).<p>
        <p> - Abstraer detalles irrelevantes (colores o formas no afectan el c√°lculo).<p>
        <p> - Dise√±ar un algoritmo:<p>
        <p>   calcular cantidad de piezas √ó costo por unidad = costo total.<p>
        <p style="margin-top: 30px;">
        <p><strong>‚öôÔ∏è Algoritmos</strong></p>
        <p style="margin-top: 30px;">
        <p><strong>ü™• Ejemplo 5: Lavarnos los dientess </strong></p>
        <p> Descomposici√≥n:<p>
        <p> - Elegir el cepillo y la pasta de dientes.<p>
        <p> - Colocar la pasta.<p>
        <p> - Cepillar los dientes por al menos 2 minutos.<p>
        <p> - Enjuagar.<p>
        <p>   Algoritmo:<p>
        <p>   1Ô∏è‚É£ Tomar el cepillo.<p>
        <p>   2Ô∏è‚É£ Aplicar la pasta.<p>
        <p>   3Ô∏è‚É£ Cepillar los dientes en movimientos circulares.<p>
        <p>   4Ô∏è‚É£ Enjuagar con agua.<p>
        <p>   5Ô∏è‚É£ Guardar el cepillo.<p>
        <p style="margin-top: 30px;">
        <p><strong>üß© Ejemplo 6: Hacer un s√°ndwich</strong></p>
        <p>Entrada: Pan, jam√≥n, queso, lechuga, tomate. <p>
        <p>Proceso: <p>
        <p>1Ô∏è‚É£ Tomar una rebanada de pan.
           2Ô∏è‚É£ Colocar los ingredientes en orden.
           3Ô∏è‚É£ Tapar con la otra rebanada. <p>
        <p>Salida: Un s√°ndwich listo para comer. <p>
        <p>Este ejemplo muestra la estructura Entrada ‚Üí Proceso ‚Üí Salida, que representa el funcionamiento b√°sico de cualquier algoritmo. <p>
        <p style="margin-top: 30px;">
        <p><strong>üß© Ejemplo 7: Encendido de una computadora</strong></p>
        <p>Entrada: Presionar el bot√≥n de encendido. <p>
        <img src="assets/img/encecompu.png" alt="Algoritmo" 
        style="float: right; width: 280px; margin: 10px 0 10px 15px; border-radius: 10px;">
        <p>Proceso: <p>
        <p>El sistema verifica los componentes, carga el sistema operativo y prepara el entorno de trabajo.<p>
        <p>Salida: Computadora lista para usar.<p>
        <p>Este ejemplo muestra la estructura Entrada ‚Üí Proceso ‚Üí Salida, que representa el funcionamiento b√°sico de cualquier algoritmo. <p>
        <p style="margin-top: 30px;">
        <p><strong>üß© Ejemplo 8: C√°lculo del promedio de notas</strong></p>
        <p>Entrada: Conjunto de notas (por ejemplo, 15, 17, 19).<p>
        <p>Proceso: <p>
        <p>Sumar las notas y dividir entre la cantidad de valores.<p>
        <p>Salida: Promedio final del estudiante (por ejemplo, 17). <p>
        <p style="margin-top: 30px;">

    `,
    prueba_diagnostica: `
      <p><strong>Prueba diagn√≥stica:</strong> </p>
      <p><strong>üëã ¬°Bienvenido(a) a la Evaluaci√≥n Diagn√≥stica del Tema 1: Pensamiento Computacional y Algoritmos!</strong></p>
        <p>Esta evaluaci√≥n tiene como prop√≥sito conocer tu comprensi√≥n sobre los temas abordados: pensamiento computacional, sus pilares (descomposici√≥n, reconocimiento de patrones, abstracci√≥n y dise√±o de algoritmos), as√≠ como el concepto, la estructura y las caracter√≠sticas de un algoritmo. <p>
        <p> üìä Importante:
        Esta evaluaci√≥n forma parte de la entrada del minicurso y equivale al 25 % de la nota total de este primer minicurso<p>
        <p>üïí Instrucciones:<p>
        <p> - Lee cuidadosamente cada pregunta antes de responder.<p>
        <p> - Marca la alternativa correcta o desarrolla tu respuesta seg√∫n se indique.<p>
        <p> - Solo se permite una respuesta por pregunta.<p>
        <p> - Dispones de 30 minutos para completar la evaluaci√≥n.<p>
        <p> - La nota m√≠nima para aprobar este cuestionario es 11.<p>
        <p>‚ú® ¬°√âxitos! Recuerda que esta es una oportunidad para reflexionar sobre tu forma de pensar, analizar y resolver problemas.<p>
        <div style="text-align: center; margin: 30px 0;">
            <a href="https://form-timer.com/start/92fc7bfb" target="_blank" 
             style="display: inline-block; background-color: #007bff; color: white; 
            padding: 12px 24px; text-decoration: none; border-radius: 8px; 
            font-weight: bold; font-size: 16px; transition: 0.3s;">
           üìù Ir al cuestionario
            </a>
           </div>

    `   
  },
  dia2: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    <p>
    ‚úîÔ∏è Comprender el concepto y la utilidad de los diagramas de flujo.<br>
    ‚úîÔ∏è Aplicar correctamente los elementos y reglas de construcci√≥n de diagramas de flujo.<br>
    ‚úîÔ∏è Desarrollar habilidades de an√°lisis, planificaci√≥n y comunicaci√≥n de procesos mediante diagramas de flujo.<br>
     </p>
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong> Diagramas de flujo, s√≠mbolos y reglas de construcci√≥n.</p>
    <p> <p>
  <p style="margin-top: 25px;">
        <img src="assets/img/esquemap.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
         <p><strong>Los cuatro pilares del pensamiento computacional:</strong></p>
      <p style="margin-top: 25px;">
    <p><strong>¬øQu√© es un diagrama de flujo?</strong></p>
    <p>Los diagramas de flujo son herramientas visuales fundamentales en el √°mbito del pensamiento computacional, ya que permiten representar de manera gr√°fica y ordenada los pasos de un proceso o algoritmo. Estos diagramas utilizan s√≠mbolos estandarizados, como rect√°ngulos para procesos, rombos para decisiones, √≥valos para inicio y fin, y flechas para indicar la secuencia de ejecuci√≥n. Su principal ventaja es que facilitan la comprensi√≥n y an√°lisis de soluciones a problemas complejos, haciendo visible la l√≥gica que subyace en un proceso o algoritmo (Mendiolaza, 2022). <p>
    <p>En el contexto educativo, los diagramas de flujo cumplen un papel esencial para desarrollar habilidades de resoluci√≥n de problemas. Los estudiantes pueden descomponer situaciones complejas en pasos m√°s simples y manejables, promoviendo un enfoque l√≥gico y estructurado. Adem√°s, les permite planificar soluciones antes de ejecutarlas, identificando posibles errores o redundancias, lo que fortalece el pensamiento anal√≠tico y la capacidad de tomar decisiones de manera ordenada (Garc√≠a, 2024). <p>
    <p>El uso de diagramas de flujo en la ense√±anza de la programaci√≥n aporta ventajas adicionales, ya que los estudiantes pueden visualizar la l√≥gica de un algoritmo antes de implementarlo en c√≥digo. Esta visualizaci√≥n previa ayuda a anticipar problemas, optimizar los pasos del proceso y mejorar la eficiencia en la resoluci√≥n de tareas. Tambi√©n facilita la comunicaci√≥n de ideas, permitiendo que otras personas comprendan el algoritmo de manera r√°pida y precisa, independientemente de su experiencia previa en programaci√≥n (De Rivero Manrique, 2022). <p>
    <p>En s√≠ntesis, los diagramas de flujo no solo son representaciones gr√°ficas de algoritmos o procesos, sino que fomentan competencias cr√≠ticas en los estudiantes, como la descomposici√≥n de problemas, el pensamiento l√≥gico y la capacidad de analizar y optimizar soluciones. Su uso continuo contribuye a la formaci√≥n de un pensamiento computacional s√≥lido, aplicable no solo en programaci√≥n, sino tambi√©n en la vida cotidiana y en diversas disciplinas acad√©micas (Mendiolaza et al., 2022). <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/diagram.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Para qu√© sirve:</strong></p>
    <p>Los diagramas de flujo son herramientas fundamentales para representar procesos de manera clara y ordenada. Permiten visualizar cada paso de un procedimiento, decisi√≥n o actividad, mostrando c√≥mo se relacionan entre s√≠ y en qu√© secuencia ocurren. Esto facilita la comprensi√≥n de procesos complejos, ya que convierte informaci√≥n abstracta o extensa en un formato gr√°fico f√°cil de interpretar. Al observar un diagrama de flujo, cualquier persona puede entender r√°pidamente c√≥mo se desarrolla un proceso completo, desde el inicio hasta el final, sin necesidad de leer largos textos o instrucciones confusas.<p>
    <p>Otra funci√≥n importante de los diagramas de flujo es planificar soluciones antes de implementarlas. Antes de ejecutar un procedimiento, los diagramas permiten identificar pasos innecesarios, posibles errores o redundancias en el proceso. Esto es especialmente √∫til en la programaci√≥n, la gesti√≥n de proyectos o en cualquier actividad que requiera varios pasos coordinados. Planificar mediante un diagrama ayuda a ahorrar tiempo, recursos y esfuerzo, ya que se pueden realizar ajustes y mejoras antes de que el proceso real comience. <p>
    <p>Adem√°s, los diagramas de flujo sirven para comunicar ideas de manera efectiva. Cuando se trabaja en equipo, un diagrama gr√°fico es mucho m√°s claro que explicaciones verbales o instrucciones escritas largas. Todos los miembros del equipo pueden entender el procedimiento, las decisiones y la secuencia de acciones de forma r√°pida y uniforme. Esto reduce errores de interpretaci√≥n y mejora la coordinaci√≥n entre las personas que participan en un proyecto, facilitando la colaboraci√≥n y la toma de decisiones. <p>
    <p>Finalmente, los diagramas de flujo no solo son √∫tiles en entornos t√©cnicos o educativos, sino que tambi√©n se aplican en la vida cotidiana. Por ejemplo, se pueden usar para planificar tareas diarias, organizar proyectos personales o describir cualquier proceso que requiera pasos secuenciales. Gracias a su capacidad de simplificar la informaci√≥n y hacerla visual, los diagramas de flujo se convierten en una herramienta vers√°til para analizar, optimizar y comunicar procesos en cualquier √°mbito. <p>
      <p style="margin-top: 25px;">
    <img src="assets/img/digram.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Elementos b√°sicos de un diagrama de flujo</strong></p>
    <p>Los diagramas de flujo son herramientas visuales fundamentales que permiten representar de manera gr√°fica los pasos de un proceso o algoritmo. Utilizan s√≠mbolos estandarizados, como √≥valos, rect√°ngulos, rombos y paralelogramos, para ilustrar acciones, decisiones y flujos de informaci√≥n. Esta estandarizaci√≥n facilita la interpretaci√≥n, comunicaci√≥n y an√°lisis de procesos complejos, asegurando que cualquier persona pueda comprender la secuencia de acciones sin ambig√ºedades (Herrera, 2020).<p>
    <p>Adem√°s, los diagramas de flujo no solo ayudan a comprender los procesos existentes, sino que tambi√©n sirven como herramienta de planificaci√≥n y optimizaci√≥n. Al construir un diagrama, se pueden identificar errores, redundancias o pasos innecesarios antes de implementar el proceso en la pr√°ctica. Esto es especialmente √∫til en programaci√≥n, administraci√≥n de proyectos y dise√±o de sistemas, ya que permite mejorar la eficiencia y claridad del procedimiento. <p>
    <p><strong>√ìvalo (Inicio/Fin): </strong></p>
    <p>El √≥valo marca los l√≠mites de un proceso, se√±alando el punto de partida y el final de la secuencia. Adem√°s de indicar d√≥nde comienza y termina, este s√≠mbolo ayuda a diferenciar el flujo principal de subprocesos o bucles dentro del diagrama. En procesos m√°s complejos, puede utilizarse para representar eventos externos que inician o concluyen un procedimiento, asegurando que los lectores del diagrama identifiquen claramente los puntos cr√≠ticos del proceso. <p>
     <p style="margin-top: 25px;">
    <img src="assets/img/oval.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Rect√°ngulo (Proceso): </strong></p>
    <p>El rect√°ngulo representa cualquier acci√≥n, tarea o actividad dentro de la secuencia. M√°s all√° de ser un simple paso, este s√≠mbolo permite identificar transformaciones de datos, operaciones de c√°lculo o tareas espec√≠ficas que modifican la informaci√≥n. Cada rect√°ngulo debe ser breve, descriptivo y contener instrucciones claras para que el flujo sea comprensible, incluso para personas que no est√©n familiarizadas con el proceso. Adem√°s, los rect√°ngulos se pueden combinar con otros s√≠mbolos para mostrar subprocesos o rutinas repetitivas. <p>
        <p style="margin-top: 25px;">
    <img src="assets/img/rectangulo.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Rombo (Decisi√≥n): </strong></p>
    <p>El rombo indica un punto de decisi√≥n en el proceso, donde se eval√∫a una condici√≥n o se elige entre varias alternativas. Este s√≠mbolo no solo representa bifurcaciones ‚Äús√≠/no‚Äù, sino que tambi√©n puede emplearse para decisiones m√∫ltiples o condiciones l√≥gicas m√°s complejas. Su correcta utilizaci√≥n permite visualizar c√≥mo los resultados de una decisi√≥n afectan el flujo del proceso y facilita la identificaci√≥n de caminos cr√≠ticos o posibles errores en la secuencia. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/des.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Paralelogramo (Entrada/Salida):</strong></p>
    <p>El paralelogramo se utiliza para representar la entrada o salida de datos. Esto incluye informaci√≥n recibida del usuario, de sistemas externos o de sensores, as√≠ como resultados que deben mostrarse o registrarse. Su funci√≥n es destacar los puntos donde el proceso interact√∫a con el entorno, permitiendo diferenciar entre operaciones internas y comunicaci√≥n con factores externos. Es esencial para procesos que requieren interacci√≥n constante con el usuario o sistemas externos. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/paralelogramo .jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Conector: </strong></p>
    <p>El conector, representado como un c√≠rculo peque√±o con una letra o n√∫mero dentro, se utiliza en los diagramas de flujo para unir diferentes partes del proceso cuando el flujo es demasiado largo o se distribuye en varias p√°ginas. Su funci√≥n principal es evitar que las flechas crucen todo el diagrama, manteniendo el esquema m√°s limpio y f√°cil de seguir. A diferencia del √≥valo de inicio o fin, este c√≠rculo no indica el comienzo ni la conclusi√≥n del proceso, sino que act√∫a √∫nicamente como un punto de enlace entre pasos que est√°n separados visualmente, facilitando la lectura y organizaci√≥n del diagrama. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/circulo.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Flechas (Conexi√≥n/Flujo):</strong></p>
    <p>Las flechas indican la direcci√≥n en que se ejecutan los pasos del diagrama, conectando s√≠mbolos y mostrando la secuencia l√≥gica de acciones. Adem√°s de guiar al lector, permiten visualizar ramificaciones, bucles y rutas alternativas dentro del proceso. Su correcta orientaci√≥n asegura que el diagrama sea f√°cil de seguir y que no se pierda la coherencia entre los distintos pasos, facilitando la comprensi√≥n del flujo completo del proceso. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/flecha.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Reglas y buenas pr√°cticas: </strong></p>
     <p>Antes de profundizar en las reglas espec√≠ficas, es importante se√±alar que existen diversas buenas pr√°cticas para la elaboraci√≥n de diagramas de flujo, cada una dise√±ada para mejorar la claridad, comprensi√≥n y eficiencia de los procesos representados. Aunque hay muchas recomendaciones posibles, las que se presentan a continuaci√≥n son consideradas las m√°s comunes y esenciales, ya que su aplicaci√≥n garantiza que el diagrama sea comprensible para cualquier persona, facilite el an√°lisis de los procesos y permita una correcta comunicaci√≥n de la informaci√≥n. Aplicar estas reglas b√°sicas ayuda no solo a representar procesos de manera ordenada, sino tambi√©n a identificar errores, optimizar procedimientos y mantener la coherencia visual en diagramas de flujo complejos, especialmente en entornos educativos y profesionales. <p>
    <p style="margin-top: 25px;">
    <img src="assets/img/diasa.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>1. Orden l√≥gico y coherente: </strong></p>
    <p>Es fundamental que los diagramas de flujo sigan una secuencia l√≥gica y coherente, generalmente de arriba hacia abajo o de izquierda a derecha, dependiendo del formato que se utilice. Mantener un orden claro permite que cualquier persona que observe el diagrama pueda seguir los pasos sin confundirse ni perder informaci√≥n importante. Un flujo ordenado facilita identificar r√°pidamente los procesos cr√≠ticos, los puntos de decisi√≥n y las entradas o salidas de informaci√≥n, evitando errores en la interpretaci√≥n. Adem√°s, un diagrama bien estructurado ayuda a planificar y optimizar procesos, ya que permite visualizar de manera clara la relaci√≥n entre cada acci√≥n y su consecuencia, haciendo m√°s sencillo detectar redundancias o pasos innecesarios dentro del proceso general. <p>
    <p>Seg√∫n Asana (2025), "poner las tareas en orden cronol√≥gico es esencial para crear diagramas de flujo efectivos", ya que este orden permite representar los procesos de manera clara y estructurada, facilitando su an√°lisis y comprensi√≥n. Esto es particularmente importante en entornos educativos y profesionales, donde los diagramas se utilizan no solo para mostrar c√≥mo se realizan los pasos, sino tambi√©n para ense√±ar la l√≥gica detr√°s de un proceso o para comunicarla a un equipo de trabajo, asegurando que todos los involucrados comprendan la secuencia completa de manera uniforme. <p>
    <p style="margin-top: 25px;">
    <p><strong>2. Evitar cruces de flechas innecesarios: </strong></p>
    <p>Los cruces de flechas pueden generar confusi√≥n y dificultar la lectura del diagrama de flujo, sobre todo cuando el diagrama es extenso o incluye m√∫ltiples decisiones y procesos paralelos. Mantener un dise√±o limpio es esencial para que el diagrama sea funcional y est√©ticamente claro. Para lograrlo, se recomienda organizar los s√≠mbolos de manera estrat√©gica y, si es necesario, dividir el diagrama en secciones o utilizar conectores que unan partes separadas, evitando que las flechas se crucen o se superpongan. Un diagrama con flechas claras y sin cruces innecesarios no solo mejora la comprensi√≥n, sino que tambi√©n permite detectar errores de manera m√°s r√°pida, facilita la revisi√≥n de procesos y ayuda a mantener la consistencia en la documentaci√≥n de procedimientos. <p>
    <p>Creately (2025) sugiere que se debe "evitar cruzar o superponer l√≠neas", ya que "si las flechas se cruzan o se enredan, el diagrama se ver√° desordenado y ser√° dif√≠cil de seguir". Esta recomendaci√≥n resalta la importancia de mantener un flujo visualmente claro y ordenado, lo que es esencial tanto en la ense√±anza de programaci√≥n y procesos administrativos, como en la documentaci√≥n de sistemas complejos, ya que facilita que cualquier observador pueda comprender r√°pidamente la l√≥gica del procedimiento representado. <p>
    <p style="margin-top: 25px;">
    <p><strong>3. Claridad en nombres y pasos: </strong></p>
    <p>La claridad en los nombres y pasos de un diagrama de flujo es esencial para garantizar que cualquier persona pueda entender f√°cilmente el proceso, incluso si no tiene experiencia previa con √©l. Cada s√≠mbolo debe contener descripciones precisas, cortas y directas que indiquen exactamente qu√© acci√≥n, decisi√≥n o entrada/salida representa. Evitar t√©rminos ambiguos o abreviaciones poco claras ayuda a reducir la confusi√≥n y asegura que los diagramas cumplan su funci√≥n como herramientas de comunicaci√≥n y an√°lisis. Adem√°s, un etiquetado claro permite que los diagramas sean reutilizables, sirviendo como gu√≠a de procesos estandarizados, material educativo o documentaci√≥n para equipos de trabajo en diferentes contextos. <p>
    <p>Nulab (2024) enfatiza la importancia de "etiquetar claramente cada s√≠mbolo y conector para indicar su prop√≥sito o funci√≥n dentro del diagrama de flujo". Esta pr√°ctica asegura que la informaci√≥n se comunique de manera efectiva y sin ambig√ºedades, lo que contribuye a mejorar la comprensi√≥n, la eficiencia en la ejecuci√≥n de los procesos y la capacidad de an√°lisis cr√≠tico. Una correcta nomenclatura tambi√©n facilita la identificaci√≥n de problemas o la implementaci√≥n de mejoras en los procesos, haciendo que los diagramas sean herramientas din√°micas y funcionales en cualquier entorno acad√©mico o profesional. <p>
    <p style="margin-top: 25px;">

    <p><strong>Relaci√≥n con los algoritmos </strong></p> 
    <p>Los algoritmos son secuencias de pasos definidos que permiten resolver un problema o realizar una tarea espec√≠fica. Sin embargo, comprender estos pasos √∫nicamente de manera textual puede resultar complicado, especialmente en procesos extensos o con decisiones m√∫ltiples. En este contexto, los diagramas de flujo se convierten en una representaci√≥n gr√°fica fundamental, ya que muestran visualmente la l√≥gica del algoritmo y la conexi√≥n entre sus diferentes etapas. Cada s√≠mbolo dentro del diagrama representa una acci√≥n o decisi√≥n, lo que facilita seguir la secuencia de operaciones y detectar posibles errores o redundancias. <p>
    <p>Seg√∫n Cormen et al. (2022), ‚Äúalgorithmic representations provide a structured way to model computational processes, ensuring clarity before implementation‚Äù (p. 45). Esto significa que los diagramas de flujo act√∫an como un puente entre la idea abstracta del algoritmo y su implementaci√≥n pr√°ctica, ayudando a los programadores y estudiantes a visualizar el razonamiento detr√°s de cada instrucci√≥n y a construir soluciones m√°s eficientes y comprensibles. <p>
        <p style="margin-top: 25px;">
    <img src="assets/img/algrtimo.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>C√≥mo los diagramas de flujo representan gr√°ficamente los pasos de un algoritmo </strong></p> 
    <p>Los diagramas de flujo representan los pasos de un algoritmo mediante una combinaci√≥n de s√≠mbolos gr√°ficos estandarizados y flechas que indican la direcci√≥n del flujo de control. Cada s√≠mbolo tiene una funci√≥n espec√≠fica: los √≥valos se√±alan el inicio y el fin del proceso, los rect√°ngulos representan operaciones o c√°lculos, los rombos indican decisiones y los paralelogramos muestran las entradas o salidas de datos. Esta estructura facilita la lectura y el an√°lisis del algoritmo, permitiendo entender su funcionamiento sin necesidad de interpretar c√≥digo. <p>
     <p style="margin-top: 25px;">
    <img src="assets/img/paqued.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong>Conceptos de entrada, proceso y salida aplicados a diagramas de flujo </strong></p> 
    <p>En el dise√±o de diagramas de flujo, los conceptos de entrada, proceso y salida (E-P-S) representan la estructura b√°sica de cualquier algoritmo. La entrada hace referencia a los datos o informaci√≥n inicial que se introduce en el sistema; el proceso comprende las operaciones que transforman o manipulan esa informaci√≥n; y la salida corresponde a los resultados finales generados por el algoritmo. Esta secuencia asegura que el flujo l√≥gico de la informaci√≥n sea coherente y ordenado. <p>
    <p>Brookshear y Brylow (2023) se√±alan que ‚Äúthe input-process-output model remains a cornerstone of computational systems, providing a conceptual foundation for data transformation and algorithmic logic‚Äù (p. 78). As√≠, los diagramas de flujo permiten visualizar c√≥mo los datos ingresan, se procesan y finalmente se convierten en resultados √∫tiles, facilitando la comprensi√≥n y el an√°lisis de sistemas inform√°ticos y procesos administrativos. <p>
    <p style="margin-top: 25px;">

    <p><strong>Tipos de diagramas de flujo:</strong></p> 
    <p><strong> - Lineales:</strong></p> 
    <p>Los diagramas de flujo lineales muestran procesos que siguen una secuencia estrictamente ordenada, sin ramificaciones ni decisiones condicionales. Cada paso se ejecuta de manera consecutiva, lo que los hace ideales para representar algoritmos simples o deterministas, como c√°lculos matem√°ticos o transformaciones directas de datos. Su estructura clara y directa permite comprender f√°cilmente el flujo de ejecuci√≥n. <p>
         <p style="margin-top: 25px;">
    <img src="assets/img/lineales.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong> - Con decisiones:</strong></p> 
    <p>Los diagramas de flujo con decisiones incorporan bifurcaciones l√≥gicas que permiten elegir entre diferentes caminos dentro del proceso, dependiendo del resultado de una condici√≥n. Estas decisiones, representadas mediante el rombo, posibilitan que el algoritmo sea adaptable y responda a distintas circunstancias. Este tipo de diagrama es com√∫n en procesos donde se deben evaluar opciones o verificar condiciones antes de continuar con una acci√≥n determinada. <p>
         <p style="margin-top: 25px;">
    <img src="assets/img/bucles.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    <p><strong> - Con bucles o ciclos:</strong></p> 
    <p>Los diagramas de flujo con bucles o ciclos representan procesos que se repiten hasta que se cumple una determinada condici√≥n. Estos bucles son esenciales para modelar algoritmos iterativos, como aquellos que procesan listas, realizan c√°lculos repetitivos o eval√∫an condiciones en forma continua. La representaci√≥n gr√°fica de los ciclos ayuda a visualizar la naturaleza repetitiva de muchas tareas computacionales y a comprender la l√≥gica de la iteraci√≥n. <p>
         <p style="margin-top: 25px;">
    <img src="assets/img/bucless.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">

    <p><strong> Videos a Conultar: :</strong></p> 
    <p>‚Ä¢Video de diagrma de flujo: Astraway. (2022, marzo 10). El diagrama de flujo explicado: para qu√© sirve, c√≥mo se hace, tipos, ejemplos, caracter√≠sticas [Video]. YouTube. https://www.youtube.com/watch?v=pWVFKfTUeYQ.</p>
    <p><strong> Programas que te pueden servir para practicar :</strong></p> 
    <p>‚Ä¢ Raptor: RAPTOR es un programa educativo que permite crear y ejecutar algoritmos mediante diagramas de flujo.</p>
    <p>‚Ä¢ Miro: Miro es una pizarra digital en l√≠nea que permite crear diagramas de flujo, mapas mentales y esquemas colaborativos.</p>
    <p>‚Ä¢ Flowgorithm: Flowgorithm es una herramienta gratuita dise√±ada para aprender algoritmos de manera visual.</p>
           <p style="margin-top: 25px;">
    <img src="assets/img/Raptor.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
    
    `,

    ejemplos: `<p><strong>Ejemplos:</strong> </p>
    
      <p><strong> Caso 1: Determinar si una empresa obtiene ganancias o p√©rdidas</strong></p> 
      <p>En una empresa, es fundamental conocer si las operaciones realizadas durante un periodo generan ganancias o p√©rdidas. Para ello, se necesita un procedimiento l√≥gico que permita comparar los ingresos totales con los costos totales.  </p> 
            <p style="margin-top: 25px;">
    <img src="assets/img/digrameje1.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p>Fuente: Jorge Cogollo. (2020, abril 15). ¬øQu√© es un diagrama de flujo? C√≥mo hacer diagramas de flujo paso a paso + ejemplos [Video]. YouTube. https://www.youtube.com/watch?v=Kucgc6NpGwc  </p>
    <p style="margin-top: 25px;">  
      <p>El siguiente caso plantea un algoritmo de decisi√≥n que eval√∫a la situaci√≥n econ√≥mica de la empresa: primero se ingresan los valores correspondientes a los ingresos y los costos. Luego, mediante una condici√≥n, se determina si los ingresos son mayores o iguales a los costos. Si esta condici√≥n se cumple, el sistema calcula la ganancia, restando los costos de los ingresos. En caso contrario, calcula la p√©rdida, restando los ingresos de los costos.  </p> 
          <p>Este proceso permite representar de manera clara y estructurada la l√≥gica de decisi√≥n financiera, siendo √∫til para cualquier organizaci√≥n que desee automatizar la evaluaci√≥n de sus resultados econ√≥micos. Adem√°s, el diagrama de flujo facilita la comprensi√≥n del procedimiento, mostrando visualmente las posibles rutas seg√∫n la condici√≥n establecida.  </p> 
            <p><strong> Caso 2: roceso de solicitud y recepci√≥n de compra en una empresa</strong></p> 
          <p>Toda organizaci√≥n necesita un procedimiento ordenado para realizar compras y gestionar proveedores, garantizando que los productos o servicios adquiridos cumplan con los est√°ndares de calidad. Este caso describe un algoritmo con decisi√≥n que representa el flujo del proceso de solicitud de compra dentro de una empresa.  </p> 
               <p style="margin-top: 25px;">
    <img src="assets/img/digrmamej2.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p>LIZARD. (2023, agosto 15). Gu√≠a para realizar diagramas de flujo y ejemplos [Video]. YouTube. https://www.youtube.com/watch?v=HsMgOuOwnFs </p>
    <p style="margin-top: 25px;">     
          <p>El proceso se inicia con la solicitud de compra, que da paso a la b√∫squeda y evaluaci√≥n del proveedor m√°s adecuado. Una vez identificado, se establece la comunicaci√≥n para negociar condiciones, precios y plazos de entrega. Posteriormente, se emite la orden de compra y se procede con la recepci√≥n del producto solicitado.  </p> 
            <p>En este punto, el algoritmo incluye una decisi√≥n clave: verificar si el producto recibido cumple con las especificaciones y est√°ndares requeridos (¬øConforme?).  </p> 
            <p>‚Ä¢ Si la respuesta es ‚ÄúS√≠‚Äù, el producto es aceptado e ingresado a las instalaciones, completando el proceso.  </p> 
            <p>‚Ä¢ Si la respuesta es ‚ÄúNo‚Äù, se activa la gesti√≥n de garant√≠a o devoluci√≥n, hasta que se resuelva la no conformidad.</p> 
            <p>Finalmente, el proceso concluye con el registro del ingreso del producto conforme y el fin del procedimiento. </p> 

    
    `

  },
  dia3: {
    objetivo: `<p><strong>Objetivo:</strong> </p>
    <p>
    ‚úîÔ∏è Comprender el concepto y la funci√≥n de las variables y los tipos de datos en la construcci√≥n de algoritmos<br>
    ‚úîÔ∏è Aplicar correctamente las reglas de declaraci√≥n, asignaci√≥n y uso de variables en ejercicios pr√°cticos de pseudoc√≥digo<br>
    ‚úîÔ∏è Reconocer y diferenciar los principales tipos de datos (num√©ricos, l√≥gicos y de texto)<br>
     </p>
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong> </p>
    
    <p><strong> 1. Concepto de variable </strong></p> 
    <p>Una variable es un elemento fundamental en la programaci√≥n y en el dise√±o de algoritmos. Se define como un espacio de memoria identificado por un nombre, que permite almacenar, modificar y recuperar datos durante la ejecuci√≥n de un programa. Su principal funci√≥n es guardar valores que pueden cambiar seg√∫n las condiciones o las operaciones realizadas dentro del proceso. Gracias a las variables, los algoritmos pueden adaptarse a diferentes situaciones, recibir datos externos, procesarlos y generar resultados din√°micos. <p>
    <p>En t√©rminos pr√°cticos, las variables funcionan como ‚Äúcontenedores‚Äù de informaci√≥n. Por ejemplo, en un algoritmo que calcula el √°rea de un tri√°ngulo, se pueden usar tres variables: base, altura y √°rea. Estas almacenan los valores necesarios y permiten realizar el c√°lculo correspondiente. De esta forma, las variables son esenciales para representar datos temporales, facilitar el manejo de la informaci√≥n y hacer que los algoritmos sean reutilizables y flexibles en diferentes contextos. </p>
    <p>Seg√∫n Valacich y Schneider (2023), ‚Äúlas variables son nombres simb√≥licos que representan valores de datos en la memoria, lo que permite que los programas manipulen y reutilicen la informaci√≥n de manera eficiente‚Äù, lo que evidencia su papel como herramientas clave en el razonamiento l√≥gico y la resoluci√≥n de problemas mediante programaci√≥n. En consecuencia, comprender el concepto de variable es un paso esencial para desarrollar habilidades en pensamiento computacional, ya que constituye la base sobre la cual se construyen estructuras m√°s complejas como las condicionales, los bucles y las funciones. </p>
    <p style="margin-top: 25px;">
    <img src="assets/img/concep.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">

    <p><strong> 2. Reglas para nombrar variables:  </strong></p> 
      <p>Nombrar adecuadamente las variables es un aspecto esencial dentro de la programaci√≥n y del dise√±o de algoritmos, ya que influye directamente en la claridad, comprensi√≥n y mantenimiento del c√≥digo. Una variable debe tener un nombre que describa claramente el tipo de dato o funci√≥n que representa, permitiendo que tanto el programador como otras personas que revisen el c√≥digo comprendan su prop√≥sito de manera inmediata. </p>
      <p> Las reglas para nombrar variables suelen ser comunes en la mayor√≠a de los lenguajes de programaci√≥n. Estas normas aseguran que el c√≥digo sea claro, legible y libre de errores. A continuaci√≥n, se presentan las principales: </p>
      <p> ‚Ä¢ No usar espacios en los nombres de las variables: </p>
      <p> En lugar de espacios, se deben emplear guiones bajos (_) o el formato camelCase.</p>
      <p> Ejemplos: </p>
    <p style="margin-top: 25px;">
    <img src="assets/img/coryI.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">

      <p> ‚Ä¢ No comenzar el nombre con n√∫meros: </p>
      <p>   Los nombres de variables deben iniciar con una letra o un guion bajo</p>
      <p> Ejemplos: </p>
       <p style="margin-top: 25px;">
    <img src="assets/img/c2.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
      <p> ‚Ä¢ Evitar el uso de palabras reservadas del lenguaje: </p>
      <p> Las palabras clave del lenguaje (como if, for, while, print, entre otras) no pueden usarse como nombres de variables, ya que tienen un significado especial dentro de la sintaxis del programa.</p>
      <p> Ejemplos: </p>
        <p style="margin-top: 25px;">
    <img src="assets/img/c3.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
      <p> ‚Ä¢ Usar nombres descriptivos y coherentes.</p>
      <p> Es recomendable emplear nombres que representen con claridad el prop√≥sito de la variable. Esto mejora la comprensi√≥n del c√≥digo, especialmente cuando se trabaja en equipo o se revisa un programa con el tiempo.</p>
      <p> Ejemplos: </p>
        <p style="margin-top: 25px;">
    <img src="assets/img/c4.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
     <p><strong> 3. Tipos de datos: </strong></p> 
      <p>Los tipos de datos primitivos constituyen la base de la programaci√≥n, ya que permiten definir el tipo de informaci√≥n que una variable puede almacenar. Cada tipo de dato tiene caracter√≠sticas propias y se utiliza seg√∫n la naturaleza de la informaci√≥n que se necesite manipular en un algoritmo. Comprender estos tipos es fundamental para escribir programas correctos y eficientes, pues determina c√≥mo se procesan, comparan y almacenan los valores en memoria. </p>
      <p>Seg√∫n Savitch (2021), ‚Äúlos tipos de datos primitivos son los bloques de construcci√≥n fundamentales de los lenguajes de programaci√≥n, ya que proporcionan las formas m√°s simples de almacenamiento y manipulaci√≥n de datos‚Äù (p. 52). Esto significa que los tipos de datos primitivos son los elementos esenciales sobre los cuales se construyen estructuras m√°s complejas, como los arreglos, las listas o los objetos. </p>
      <p>A continuaci√≥n, se describen los principales tipos de datos primitivos y su funci√≥n dentro de los algoritmos: </p>
      
      <p>‚Ä¢ <strong>Enteros (int):</strong></p>
      <p>Tama√±o aproximado: 4 bytes (32 bits)  </p>
     <p>Representan n√∫meros sin parte decimal, tanto positivos como negativos. Se utilizan para contar, iterar o realizar operaciones que no requieren precisi√≥n decimal.</p>
     <p><strong>Ejemplos:</strong></p>
        <p style="margin-top: 25px;">
    <img src="assets/img/int.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">

     <hr style="margin: 15px 0;">

     <p>‚Ä¢ <strong>Reales o decimales (float):</strong></p>
     <p>Se emplean para representar n√∫meros con punto decimal o fracciones. Son √∫tiles en c√°lculos cient√≠ficos, financieros o de medici√≥n donde la precisi√≥n es importante.</p>
     <p>Tama√±o aproximado: 4 a 8 bytes  </p>
     <p><strong>Ejemplos:</strong></p>
   <p style="margin-top: 25px;">
  <img src="assets/img/float.png" alt="Pensamiento computacional" style="width: 180px; display: block; margin: 10px auto; border-radius: 8px;">
  <hr style="margin: 10px auto; width: 50%; height: 1px; background-color: #ccc; border: none;">
</p>

     <p>‚Ä¢ <strong>Car√°cter (char):</strong></p>
      <p>Representa un solo s√≠mbolo o letra, ya sea una letra, n√∫mero o signo.</p>
      <p>Tama√±o aproximado: 1 byte  </p>
     <p><strong>Ejemplo:</strong></p>
 <p style="margin-top: 25px;">
  <img src="assets/img/caracter.png" alt="Pensamiento computacional" style="width: 180px; display: block; margin: 10px auto; border-radius: 8px;">
  <hr style="margin: 10px auto; width: 50%; height: 1px; background-color: #ccc; border: none;">
</p>


     <p>‚Ä¢ <strong>Cadena (string):</strong></p>
     <p>Una cadena es una secuencia de caracteres (letras, n√∫meros o s√≠mbolos) encerrada entre comillas. Se utiliza para almacenar y procesar texto.</p>
     <p>Tama√±o aproximado: 1 byte por car√°cter </p>
     <p><strong>Ejemplos:</strong></p>
     <p style="margin-top: 25px;">
    <img src="assets/img/cadena1.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">


     <hr style="margin: 15px 0;">

     <p>‚Ä¢ <strong>Booleanos (bool):</strong></p>
    <p>Este tipo de dato representa valores verdadero o falso (True o False). Se usa principalmente en expresiones l√≥gicas y estructuras de decisi√≥n.</p>
     <p>Tama√±o aproximado: 1 byte </p>
    <p><strong>Ejemplo:</strong></p>
    <p style="margin-top: 25px;">
    <img src="assets/img/bool.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
      <hr style="margin: 15px 0;">
    <p>4. Declaraci√≥n y asignaci√≥n de variables:  </strong></p>


<p>
  La declaraci√≥n de una variable consiste en indicar su nombre y el tipo de dato que almacenar√°, 
  mientras que la asignaci√≥n implica darle un valor espec√≠fico. En t√©rminos generales, declarar una 
  variable significa reservar un espacio en la memoria del computador para guardar informaci√≥n que podr√° 
  cambiar durante la ejecuci√≥n del programa. Seg√∫n Gaddis (2022), 
  ‚Äúdeclaring and initializing variables properly is essential for writing clear and error-free programs, 
  as it defines how data will be stored and manipulated throughout execution‚Äù (p. 47). 
  Esto resalta la importancia de comprender que toda variable debe tener un prop√≥sito claro y un valor 
  que pueda modificarse conforme avanza el algoritmo.
</p>

<p>
  En pseudoc√≥digo, la declaraci√≥n y asignaci√≥n suelen escribirse de manera expl√≠cita, 
  definiendo el tipo y el valor inicial. Por ejemplo:
</p>

<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  Definir edad Como Entero <br>
  edad ‚Üê 20
</div>
<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  Definir nombre Como Cadena <br>
  nombre ‚Üê "Ana"
</div>
<p>
 En este caso, se declara la variable edad como un n√∫mero entero y la variable nombre como una cadena de texto, asign√°ndoles valores iniciales.
</p>

<p>
En cambio, en Python, la sintaxis es m√°s simple, ya que no es necesario especificar el tipo de dato al declarar una variable. El tipo se infiere autom√°ticamente seg√∫n el valor asignado:</p>
</p>
<div style="background-color: #007bff; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  
  edad = 20<br>
nombre = "Ana"
</div>
<p style="margin-top: 30px;">
<p>
Esta caracter√≠stica convierte a Python en un lenguaje de tipado din√°mico, lo que facilita el aprendizaje inicial de la programaci√≥n. Sin embargo, tambi√©n requiere que el programador sea cuidadoso al manipular los valores, ya que el tipo de dato puede cambiar durante la ejecuci√≥n si no se controla adecuadamente.
</p>

<p><strong> 5. Operaciones con variable</strong></p>
<p>
Las operaciones con variables permiten realizar c√°lculos y comparaciones dentro de un algoritmo, siendo fundamentales para el procesamiento de datos y la toma de decisiones. Estas operaciones se dividen principalmente en <strong>aritm√©ticas</strong> y <strong>l√≥gicas</strong>. 
Seg√∫n Lambert (2023), <em>‚Äúoperators act as symbols that instruct the computer to perform specific computations or evaluations on data values stored in variables‚Äù</em> (p. 65). 
Esto significa que los operadores son mecanismos mediante los cuales un programa puede transformar, combinar o analizar informaci√≥n durante su ejecuci√≥n.
</p>

<p> üîπ Operadores aritm√©ticos</p>
<p>  Se utilizan para realizar c√°lculos matem√°ticos b√°sicos:</p>

<ul style="list-style-type: none; padding-left: 0; text-align: left; margin-left: 20px;">
 <li>‚ûï <strong>Suma (+)</strong> ‚Üí combina dos valores: <em>a + b</em>.</li>
  <li>‚ûñ <strong>Resta (-)</strong> ‚Üí calcula la diferencia: <em>a - b</em>.</li>
  <li>‚úñÔ∏è <strong>Multiplicaci√≥n (*)</strong> ‚Üí obtiene el producto: <em>a * b</em>.</li>
  <li>‚ûó <strong>Divisi√≥n (/)</strong> ‚Üí devuelve el cociente: <em>a / b</em>.</li>
  <li>üî¢ <strong>M√≥dulo (%)</strong> ‚Üí obtiene el residuo de una divisi√≥n: <em>a % b</em>.</li>
<p> Antes de analizar los ejemplos pr√°cticos, es importante visualizar de manera gr√°fica los principales operadores que intervienen en el manejo de variables</p>
    <p style="margin-top: 25px;">
    <img src="assets/img/opera.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">


     <hr style="margin: 15px 0;">


</ul>

<p><strong>Por ejemplo, en pseudoc√≥digo:</strong></p>

<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  Definir a, b, suma Como Entero <br>
  a ‚Üê 10 <br>
  b ‚Üê 3 <br>
  suma ‚Üê a + b
</div>

<p><strong>Y en Python:</strong></p>

<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  a = 10 <br>
  b = 3 <br>
  suma = a + b
</div>

<p> üîπ Operadores l√≥gicos o relacionales</p>
<p>Permiten comparar valores o expresar condiciones. Los m√°s comunes son:</p>

<ul style="list-style-type: none; padding-left: 0; text-align: left; margin-left: 20px;">
  <li>‚Ä¢ <strong>&gt;</strong> (mayor que)</li>
  <li>‚Ä¢ <strong>&lt;</strong> (menor que)</li>
  <li>‚Ä¢ <strong>==</strong> (igual a)</li>
  <li>‚Ä¢ <strong>!=</strong> (distinto de)</li>
  <li>‚Ä¢ <strong>and</strong>, <strong>or</strong>, <strong>not</strong> ‚Üí combinan o niegan expresiones l√≥gicas.</li>
</ul>

<p><strong>Por ejemplo, en Python:</strong></p>

<div style="background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #00aaff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto; box-shadow: 0 0 8px rgba(0,0,0,0.4);">
  x = 5 <br>
  y = 8 <br>
  resultado = (x &lt; y) and (y != 10)
  <p style="margin-top: 30px;">
</div>

<p>
En este caso, <strong>resultado</strong> ser√° <em>True</em> porque ambas condiciones se cumplen. Estas operaciones son esenciales en estructuras de control como los condicionales (<em>if</em>) y los bucles (<em>while</em> o <em>for</em>), ya que permiten determinar el flujo l√≥gico de ejecuci√≥n del algoritmo.
</p>

<!-- === 3.6. Entrada y salida de datos === -->

<p><strong>6. Entrada y salida de datos :  </strong></p>
<p>
  En todo algoritmo o programa inform√°tico, los procesos de entrada y salida de datos son esenciales para permitir la comunicaci√≥n entre el usuario y el sistema. 
  La <strong>entrada</strong> se refiere a la informaci√≥n que el programa recibe para ejecutar sus operaciones, mientras que la <strong>salida</strong> corresponde 
  a los resultados que el programa muestra. Seg√∫n <em>Dale y Weems (2023)</em>, 
  ‚Äú<em>input and output operations enable communication between the program and the user, forming the basis of interactive computing</em>‚Äù (p. 33). 
  Esto significa que sin estos mecanismos, el algoritmo no podr√≠a interactuar con su entorno.
</p>

<p>
  En pseudoc√≥digo, la instrucci√≥n <strong>Leer</strong> permite capturar datos, mientras que <strong>Mostrar</strong> presenta los resultados:
</p>

<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #007bff; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  Leer nombre <br>
  Mostrar "Bienvenido, ", nombre
</div>

<p>
  En <strong>Python</strong>, se utilizan las funciones <strong>input()</strong> y <strong>print()</strong>:
</p>

<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #28a745; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  nombre = input("Ingresa tu nombre: ") <br>
  print("Bienvenido,", nombre)
</div>

<hr style="margin: 30px 0; border: 0; border-top: 1px solid #ccc;">


<!-- === 3.7. Conversi√≥n de tipos (Casting) === -->

<p><strong>7. Conversi√≥n de tipos :  </strong></p>
<p>
  En programaci√≥n, la conversi√≥n de tipos o <em>casting</em> permite transformar datos de un tipo a otro, como texto a n√∫mero o n√∫mero a cadena. 
  Seg√∫n <em>Liang (2022)</em>, ‚Äú<em>type casting allows programmers to control how data is interpreted and manipulated, ensuring valid results</em>‚Äù (p. 59).
</p>

<p>Ejemplo en pseudoc√≥digo:</p>
<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #ffc107; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  Definir edad Como Cadena <br>
  edad ‚Üê ConvertirAEntero("25")
</div>

<p>Y en Python:</p>
<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #ffc107; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  edad = "25" <br>
  edad = int(edad) <br>
  print(edad + 5)
</div>

<p>
  La correcta aplicaci√≥n del casting garantiza que los programas sean m√°s estables y eviten errores por incompatibilidad de tipos.
</p>

<hr style="margin: 30px 0; border: 0; border-top: 1px solid #ccc;">


<!-- === 3.8. Constantes === -->

<p><strong>8. Constantes :  </strong></p>
<p>
  Las <strong>constantes</strong> representan valores fijos que no cambian durante la ejecuci√≥n del programa. 
  Seg√∫n <em>Gaddis (2022)</em>, ‚Äú<em>constants improve program readability and reliability by preventing accidental modification</em>‚Äù (p. 72). 
  Esto mejora la claridad y estabilidad del c√≥digo.
</p>

<p>Ejemplo en pseudoc√≥digo:</p>
<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #17a2b8; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  Constante PI ‚Üê 3.1416
</div>

<p>Ejemplo en Python:</p>
<div style="background-color: #222; color: #f1f1f1; border-left: 4px solid #17a2b8; padding: 12px; border-radius: 8px; font-family: 'Courier New', monospace; width: fit-content; margin: 10px auto;">
  PI = 3.1416 <br>
  radio = 5 <br>
  area = PI * radio ** 2 <br>
  print(area)
</div>

<p>
  El uso adecuado de constantes permite mantener los programas organizados, claros y menos propensos a errores.
</p>
<!-- 3.10 Errores comunes al usar variables -->
<p><strong>9. Errores comunes al usar variables: </strong></p>
<p>
En la programaci√≥n, los errores relacionados con las variables son una de las causas m√°s frecuentes de fallos en la ejecuci√≥n de un algoritmo. Comprender su origen y saber c√≥mo prevenirlos es esencial para desarrollar programas correctos, legibles y eficientes. Estos errores suelen deberse a una mala gesti√≥n de los valores, a la confusi√≥n entre tipos de datos o al uso incorrecto de la sintaxis del lenguaje.
</p>
<p style="margin-top: 30px;">
<table style="width: 100%; border-collapse: collapse; margin-top: 20px; font-family: Arial, sans-serif; color: #f1f1f1;">
  <thead style="background-color: #00bfff;">
    <tr>
      <th style="padding: 10px; text-align: left;">Tipo de error</th>
      <th style="padding: 10px; text-align: left;">Descripci√≥n</th>
      <th style="padding: 10px; text-align: left;">Ejemplo</th>
      <th style="padding: 10px; text-align: left;">Consecuencia o efecto</th>
    </tr>
  </thead>
  <tbody style="background-color: #1e1e1e;">
    <tr>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Variable no inicializada</td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Ocurre cuando se utiliza una variable antes de asignarle un valor inicial.</td>
      <td style="padding: 10px; border-bottom: 1px solid #333; font-family: 'Courier New', monospace; background-color: #2a2a2a; color: #9cdcfe;">
        print(total)
      </td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">El programa genera un error en tiempo de ejecuci√≥n, ya que la variable no existe en memoria.</td>
    </tr>
    <tr>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Incompatibilidad de tipos</td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Se intenta operar con datos de distintos tipos sin conversi√≥n previa.</td>
      <td style="padding: 10px; border-bottom: 1px solid #333; font-family: 'Courier New', monospace; background-color: #2a2a2a; color: #9cdcfe;">
        suma = "10" + 5
      </td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Error de tipo (<em>TypeError</em>); el programa no puede sumar una cadena y un n√∫mero.</td>
    </tr>
    <tr>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Sobrescritura de valores</td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Una variable cambia de valor de forma no intencionada durante la ejecuci√≥n del programa.</td>
      <td style="padding: 10px; border-bottom: 1px solid #333; font-family: 'Courier New', monospace; background-color: #2a2a2a; color: #9cdcfe;">
        precio = 50<br>precio = 0  # Se pierde el valor anterior
      </td>
      <td style="padding: 10px; border-bottom: 1px solid #333;">Los resultados finales del algoritmo se alteran al perderse informaci√≥n previa.</td>
    </tr>
    <tr>
      <td style="padding: 10px;">Errores de sintaxis</td>
      <td style="padding: 10px;">Se emplean nombres inv√°lidos, signos incorrectos o se omiten elementos del lenguaje.</td>
      <td style="padding: 10px; font-family: 'Courier New', monospace; background-color: #2a2a2a; color: #9cdcfe;">
        1dato = 10<br>precio total = 20
      </td>
      <td style="padding: 10px;">El programa no se ejecuta; el int√©rprete muestra errores de sintaxis.</td>
    </tr>
  </tbody>
</table>
<p style="margin-top: 30px;">
<p style="margin-top: 18px; text-align: justify;">
  Identificar y prevenir estos errores permite mejorar la calidad del c√≥digo y fortalecer el pensamiento l√≥gico del programador. 
  Seg√∫n <strong>Lambert (2022)</strong>, 
  <em>‚Äútype and initialization errors are among the most frequent sources of bugs in introductory programming, as they reflect misunderstandings about how variables store and manage data‚Äù</em> 
  (p. 61). 
  Por ello, la pr√°ctica constante y la revisi√≥n sistem√°tica del c√≥digo son estrategias clave para lograr algoritmos funcionales y eficientes.
</p>

  
    `,
    ejemplos: `<p><strong>Ejemplos:</strong> </p>
    
    <p>Despu√©s de comprender los conceptos te√≥ricos sobre variables, tipos de datos, operadores, constantes y manejo de errores, es fundamental observar su aplicaci√≥n pr√°ctica dentro de algoritmos y programas. Los siguientes ejemplos ilustran c√≥mo se declaran, asignan y manipulan variables, c√≥mo se realizan operaciones aritm√©ticas y l√≥gicas, y de qu√© manera se ejecutan procesos de entrada, salida y conversi√≥n de datos. </p>
    
    <p>A trav√©s de estos ejercicios, se busca consolidar el aprendizaje te√≥rico mediante la pr√°ctica, fortaleciendo las habilidades de pensamiento l√≥gico y computacional necesarias para el dise√±o y desarrollo de programas.     </p>

<p style="text-align: justify;">
A continuaci√≥n, se presentan ejemplos que integran los conceptos vistos sobre variables, tipos de datos, operaciones, conversi√≥n, constantes y manejo de errores.
</p>

<!-- Ejemplo 1 -->

<p><strong>üîπ Ejemplo 1: Declaraci√≥n y asignaci√≥n de variables</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Definir nombre Como Cadena<br>
    Definir edad Como Entero<br><br>
    nombre ‚Üê "Luc√≠a"<br>
    edad ‚Üê 22<br><br>
    Mostrar "Nombre:", nombre<br>
    Mostrar "Edad:", edad
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    nombre = "Luc√≠a"<br>
    edad = 22<br><br>
    print("Nombre:", nombre)<br>
    print("Edad:", edad)
  </div>
</div>

<p><strong>Resultado:</strong><br>Nombre: Luc√≠a<br>Edad: 22</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 2 -->
<p><strong>üîπ Ejemplo 2: Operaciones aritm√©ticas</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Definir a, b, suma, promedio Como Real<br>
    a ‚Üê 10<br>
    b ‚Üê 8<br>
    suma ‚Üê a + b<br>
    promedio ‚Üê suma / 2<br><br>
    Mostrar "Suma:", suma<br>
    Mostrar "Promedio:", promedio
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    a = 10<br>
    b = 8<br>
    suma = a + b<br>
    promedio = suma / 2<br><br>
    print("Suma:", suma)<br>
    print("Promedio:", promedio)
  </div>
</div>

<p><strong>Resultado:</strong><br>Suma: 18<br>Promedio: 9.0</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 3 -->

<p><strong>üîπ Ejemplo 3: Operadores l√≥gicos</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Definir edad Como Entero<br>
    edad ‚Üê 17<br><br>
    Si edad >= 18 Entonces<br>
    &nbsp;&nbsp;Mostrar "Eres mayor de edad"<br>
    Sino<br>
    &nbsp;&nbsp;Mostrar "Eres menor de edad"<br>
    FinSi
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    edad = 17<br><br>
    if edad >= 18:<br>
    &nbsp;&nbsp;print("Eres mayor de edad")<br>
    else:<br>
    &nbsp;&nbsp;print("Eres menor de edad")
  </div>
</div>

<p><strong>Resultado:</strong><br>Eres menor de edad</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 4 -->

<p><strong>üîπ Ejemplo 4: Entrada y salida de datos</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Leer nombre<br>
    Leer edad<br>
    Mostrar "Hola ", nombre, ", tienes ", edad, " a√±os."
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    nombre = input("Ingresa tu nombre: ")<br>
    edad = input("Ingresa tu edad: ")<br><br>
    print("Hola", nombre + ", tienes " + edad + " a√±os.")
  </div>
</div>

<p><strong>Resultado:</strong><br>Hola Sof√≠a, tienes 21 a√±os.</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 5 -->
<p><strong>üîπ Ejemplo 5: Conversi√≥n de tipos (Casting)</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Definir texto Como Cadena<br>
    texto ‚Üê "100"<br>
    numero ‚Üê ConvertirAEntero(texto)<br>
    resultado ‚Üê numero + 20<br>
    Mostrar "Resultado:", resultado
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    texto = "100"<br>
    numero = int(texto)<br>
    resultado = numero + 20<br><br>
    print("Resultado:", resultado)
  </div>
</div>

<p><strong>Resultado:</strong><br>Resultado: 120</p>

<hr style="margin: 25px 0;">

<!-- Ejemplo 6 -->

<p><strong>üîπ Ejemplo 6: Uso de constantes</strong></p>
<p><strong> - Pseudoc√≥digo:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #007bff; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    Constante PI ‚Üê 3.1416<br>
    Definir radio, area Como Real<br>
    radio ‚Üê 5<br>
    area ‚Üê PI * radio * radio<br>
    Mostrar "El √°rea del c√≠rculo es:", area
  </div>
</div>

<p><strong> - Python:</strong></p>
<div style="text-align: center;">
  <div style="display: inline-block; background-color: #1e1e1e; color: #f5f5f5; border-left: 4px solid #28a745; padding: 10px; border-radius: 8px; font-family: 'Courier New', monospace;">
    PI = 3.1416<br>
    radio = 5<br>
    area = PI * radio ** 2<br><br>
    print("El √°rea del c√≠rculo es:", area)
  </div>
</div>

<p><strong>Resultado:</strong><br>El √°rea del c√≠rculo es: 78.54</p>


    `,
    quiz_intermedio: `<p><strong>Quiz:</strong></p>
<section id="quiz_intermedio" class="quiz-section" style="font-family: 'Segoe UI', Tahoma, sans-serif; color: #222; line-height: 1.6; margin-top: 30px;">

  <p><strong>üß© Planteamiento:</strong> Este cuestionario tiene como finalidad reforzar tu comprensi√≥n sobre el uso de variables, tipos de datos y errores comunes al programar. A trav√©s de preguntas pr√°cticas, podr√°s identificar conceptos clave y evaluar tu progreso en el manejo de la l√≥gica computacional.</p>

  <p><strong></strong> <br>
  <strong> Condici√≥n de aprobaci√≥n:</strong> Nota m√≠nima 11.<br>
  <strong> Peso en la evaluaci√≥n:</strong> 25% de la nota final.</p>

   <p><strong> Indicaciones:</strong></p>
 <ul style="margin: 12px 0 18px 20px; line-height: 1.7; text-align: left; color: #f3f4f6; font-family: 'Segoe UI', Tahoma, sans-serif;">
  <li>Lee atentamente cada pregunta antes de responder. Aseg√∫rate de comprender bien el enunciado antes de elegir una opci√≥n.</li>
  <li>Selecciona la opci√≥n que consideres correcta seg√∫n los conceptos aprendidos. Piensa en la respuesta m√°s l√≥gica basada en lo visto en clase.</li>
  <li>Verifica tus respuestas antes de enviar el formulario. Revisa consistencia y que no hayas marcado opciones por error.</li>
  <li>Recuerda que la pr√°ctica constante mejora tu razonamiento l√≥gico; intenta razonar cada ejercicio y aprende de los errores.</li>
</ul>


  <p><strong>üìä BONUS:</strong> Se incluye un peque√±o caso  opcional para aplicar los conceptos vistos. Su desarrollo no es obligatorio, pero puede otorgar puntos adicionales y fortalecer tus habilidades pr√°cticas.</p>
<p style="margin-top: 30px;">
  <div style="text-align:center; margin-top:25px;">
    <a href="https://docs.google.com/forms/d/e/1FAIpQLSeivVtuBxYdjlADkDpjTQRWxMoLGeBKrpp-YkqA1tVbIpz_tg/viewform?usp=dialog" 
       target="_blank" 
       style="background-color:#007BFF; color:white; padding:12px 26px; border-radius:8px; text-decoration:none; font-weight:bold; box-shadow: 0 3px 6px rgba(0,0,0,0.15); transition: background-color 0.3s;">
       üìã Iniciar Quiz
    </a>
  </div>

</section>

    `
  },
  dia4: {
    objetivo: `<p><strong>Objetivo:</strong> Aplicar estructuras secuenciales y condicionales para resolver problemas.</p>
    <p>
    ‚úîÔ∏è Comprender el funcionamiento de las estructuras secuenciales y condicionales en la programaci√≥n.<br>
    ‚úîÔ∏è Aplicar correctamente estructuras de control.<br>
    ‚úîÔ∏è Aplicar estas ideas tanto en el aula como en la vida diaria.
     </p>
    
    
    
    `,
    teoria: `
<section style="color: white; font-family: 'Poppins', sans-serif; line-height: 1.6; text-align: left; padding: 20px;">

  <h2 style="color: #e0edf2ff; font-size: 1.0em; margin-bottom: 8px;">1. Concepto de estructura secuencial</h2>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;"> Definici√≥n y funcionamiento</h3>
  <p>
    La estructura secuencial constituye la base de toda l√≥gica algor√≠tmica. Se refiere a la ejecuci√≥n ordenada y lineal de las instrucciones de un programa, donde cada paso se cumple exactamente en el orden en que se escribe, sin saltos, bifurcaciones ni repeticiones.
    <br><br>
    Joyanes Aguilar (2022) explica que ‚Äúuna estructura secuencial es aquella en la que las acciones se ejecutan en el mismo orden en que se definen, sin alteraciones en el flujo de control‚Äù (p. 238). 
    Esto significa que el flujo sigue un camino √∫nico desde el inicio hasta el final, garantizando un resultado predecible siempre que las entradas sean las mismas.
    <br><br>
    En otras palabras, los programas secuenciales act√∫an como una receta: se deben seguir los pasos en orden para obtener el resultado correcto. 
    Si el orden cambia, el proceso pierde sentido. Por ejemplo, no se puede mostrar un resultado antes de realizar la operaci√≥n correspondiente; esto romper√≠a la secuencia l√≥gica.
  </p>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;"> Importancia dentro del flujo de un algoritmo</h3>
  <p>
    Dominar la estructura secuencial es esencial para comprender c√≥mo piensa un programa. 
    Antes de introducir condiciones o ciclos, el estudiante debe internalizar que todo algoritmo tiene un flujo principal que avanza paso a paso.
    <br><br>
    Dale y Weems (2023) sostienen que ‚Äúlas estructuras secuenciales establecen la base l√≥gica sobre la cual se construyen las dem√°s estructuras de control‚Äù (p. 110). 
    En otras palabras, son el fundamento sobre el cual se edifica el resto de la l√≥gica algor√≠tmica.
    <br><br>
    La secuencia no solo organiza el c√≥digo, sino que tambi√©n desarrolla el pensamiento computacional, ayudando a los estudiantes a razonar de forma ordenada. 
    Cuando el flujo de un algoritmo se ejecuta secuencialmente, el programador puede predecir con facilidad el comportamiento del programa y detectar errores m√°s r√°pido.
    <br><br>
    Adem√°s, en t√©rminos de dise√±o, las secuencias aseguran que los datos fluyan correctamente entre las etapas del proceso: <strong>entrada ‚Üí procesamiento ‚Üí salida</strong>. 
    Esta cadena es el modelo b√°sico sobre el que se sustentan todos los programas inform√°ticos, desde los m√°s simples hasta los sistemas complejos.
  </p>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;"> Ejemplo pr√°ctico de estructura secuencial</h3>
  <p>
    Un ejemplo cl√°sico es el c√°lculo del √°rea de un rect√°ngulo. El algoritmo puede representarse de la siguiente manera:
  </p>

  <h4 style="color: #87cefa; font-size: 1.05em;">üß† En pseudoc√≥digo:</h4>
  <pre style="background-color: #f5f5f5; color: black; padding: 12px; border-radius: 8px; border-left: 4px solid #007bff;">
Inicio
    Definir base, altura, area Como Real
    Leer base
    Leer altura
    area ‚Üê base * altura
    Mostrar "El √°rea del rect√°ngulo es: ", area
Fin
  </pre>

  <h4 style="color: #87cefa; font-size: 1.05em;">üêç En Python:</h4>
  <pre style="background-color: #f5f5f5; color: black; padding: 12px; border-radius: 8px; border-left: 4px solid #28a745;">
base = float(input("Ingrese la base: "))
altura = float(input("Ingrese la altura: "))
area = base * altura
print("El √°rea del rect√°ngulo es:", area)
  </pre>

  <p>
    En ambos casos, las instrucciones se ejecutan de manera secuencial: primero se leen los datos, luego se calcula el resultado y finalmente se muestra en pantalla.
    <br><br>
    Si se cambiara el orden, por ejemplo, intentando imprimir el resultado antes de calcularlo, el programa generar√≠a un error o mostrar√≠a un valor incorrecto.
  </p>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;"> Relaci√≥n con los diagramas de flujo</h3>
  <p>
    En los diagramas de flujo, la estructura secuencial se representa mediante una l√≠nea continua de s√≠mbolos rectangulares (procesos) conectados por flechas que indican la direcci√≥n del flujo.
    <br><br>
    Deitel & Associates (2004) se√±alan que ‚Äúla ejecuci√≥n secuencial significa que las instrucciones se ejecutan una tras otra en el orden en que est√°n escritas, formando la estructura de control m√°s simple en la programaci√≥n‚Äù (p. 6).
    <br><br>
    Esto facilita visualizar c√≥mo los datos se transforman paso a paso, reforzando el pensamiento l√≥gico del estudiante.
  </p>

  <p>
    Por ejemplo, un diagrama de flujo para el c√°lculo del √°rea de una circunferencia incluir√≠a:
  </p>

  <p style="margin-top: 25px;">
  <img src="assets/img/arci.png" 
       alt="Pensamiento computacional" 
       style="width: 230px; display: block; margin: 15px auto; border-radius: 10px;">
</p>


  <p>Todo conectado linealmente, sin condiciones ni repeticiones.</p>

  <h3 style="color: #d8d4c2ff; font-size: 1.0em; margin-top: 15px;">Ventajas de la estructura secuencial</h3>
  <ul>
    <li><strong>Simplicidad:</strong> su flujo lineal facilita la comprensi√≥n y el aprendizaje inicial.</li>
    <li><strong>Previsibilidad:</strong> el resultado depende directamente de las entradas.</li>
    <li><strong>Depuraci√≥n sencilla:</strong> al no tener bifurcaciones, los errores se localizan f√°cilmente.</li>
    <li><strong>Base l√≥gica:</strong> sirve de punto de partida para estructuras m√°s avanzadas como condicionales o bucles.</li>
  </ul>

  <p>
        Sin embargo, su principal limitaci√≥n es que no permite tomar decisiones ni repetir acciones, por lo que solo resulta √∫til para algoritmos simples o con un flujo fijo.
  </p>
<section id="tema-4-2" style="color: #ffffff; background: none; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">

  <h3 style="font-size: 1.2em; font-weight: bold; margin-top: 20px; text-align: left;">
  2. Concepto de estructura condicional
  </h3>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;"> Qu√© son las decisiones en programaci√≥n</h4>
  <p>
  En programaci√≥n, las estructuras condicionales permiten que un algoritmo tome decisiones seg√∫n se cumpla o no una condici√≥n l√≥gica. 
  A diferencia de la estructura secuencial ‚Äîdonde todas las instrucciones se ejecutan en orden‚Äî, las condicionales dirigen el flujo del programa 
  por distintos caminos, dependiendo de si una expresi√≥n es verdadera (<em>True</em>) o falsa (<em>False</em>).
  </p>
  <p>
  Seg√∫n <strong>Joyanes Aguilar (2022)</strong>, ‚Äúlas estructuras de decisi√≥n introducen la posibilidad de seleccionar entre varias acciones, 
  en funci√≥n del resultado de una condici√≥n‚Äù (p. 245). Es decir, el programa analiza una situaci√≥n y, con base en ello, decide qu√© instrucci√≥n ejecutar.
  </p>
  <p>
    Por ejemplo, en la vida real: ‚Äúsi est√° lloviendo, llevo paraguas; si no, salgo sin √©l‚Äù. En programaci√≥n ocurre lo mismo: 
    se eval√∫a una condici√≥n y se elige qu√© bloque de c√≥digo ejecutar.
  </p>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;">‚öôÔ∏è Estructura if ‚Äì else: condicional simple y doble</h4>
  <p>
    En los algoritmos, la instrucci√≥n condicional se expresa con la palabra clave <strong>if</strong> (si), que eval√∫a una condici√≥n l√≥gica.
    En la condicional simple, se ejecuta un bloque de c√≥digo solo si la condici√≥n es verdadera.
    En la condicional doble (<strong>if ‚Äì else</strong>), se ejecuta un bloque si la condici√≥n es verdadera y otro si es falsa.
  </p>
  <p>
    Seg√∫n <strong>Dale y Weems (2023)</strong>, ‚Äúel control condicional es el mecanismo que otorga flexibilidad al programa, 
    al permitir adaptar su comportamiento a distintos escenarios‚Äù (p. 118).
  </p>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;">Ejemplo de condicional simple en pseudoc√≥digo</h4>
  <pre style="background-color: #1e1e1e; color: #e0edf2ff; padding: 10px; border-radius: 6px; font-size: 0.9em;">
Inicio
    Definir edad Como Entero
    Leer edad
    Si edad >= 18 Entonces
        Mostrar "Eres mayor de edad."
    FinSi
Fin
  </pre>
  <p>
    Aqu√≠, la instrucci√≥n <strong>Mostrar</strong> se ejecuta solo si la condici√≥n <code>edad >= 18</code> se cumple. 
    Si no, el programa contin√∫a sin mostrar nada.
  </p>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;"> Ejemplo de condicional doble (if ‚Äì else)</h4>
  <pre style="background-color: #1e1e1e; color: #ffffff; padding: 10px; border-radius: 6px; font-size: 0.9em;">
Inicio
    Definir nota Como Real
    Leer nota
    Si nota >= 11 Entonces
        Mostrar "Aprobado"
    Sino
        Mostrar "Desaprobado"
    FinSi
Fin
  </pre>
  <p>
    Si la nota es mayor o igual a 11, se muestra ‚ÄúAprobado‚Äù; de lo contrario, ‚ÄúDesaprobado‚Äù. 
    Esta estructura controla decisiones y valida datos.
  </p>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;">Representaci√≥n en diagrama de flujo</h4>
  <p>
    En los diagramas de flujo, las estructuras condicionales se representan con un <strong>rombo de decisi√≥n</strong>, 
    donde se formula una pregunta o condici√≥n, como ‚Äú¬ønota ‚â• 11?‚Äù. 
    Seg√∫n <strong>Deitel & Associates (2004)</strong>, ‚Äúel s√≠mbolo de decisi√≥n (rombo) indica el punto donde el programa debe elegir entre alternativas basadas en una condici√≥n‚Äù (p. 8).
  </p>
  <ul style="text-align: left; margin-left: 25px;">
    <li>Una flecha con la etiqueta ‚ÄúS√≠‚Äù o ‚ÄúVerdadero‚Äù.</li>
    <li>Otra con la etiqueta ‚ÄúNo‚Äù o ‚ÄúFalso‚Äù.</li>
  </ul>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;"> Ejemplo en diagrama de flujo</h4>
  <ul style="text-align: left; margin-left: 25px;">
    <li>Inicio.</li>
    <li>Leer n√∫mero.</li>
    <li>Condici√≥n: ¬øn√∫mero ‚â• 0?</li>
    <li>S√≠: Mostrar ‚ÄúPositivo‚Äù.</li>
    <li>No: Mostrar ‚ÄúNegativo‚Äù.</li>
    <li>Fin.</li>
  </ul>

  <h4 style="font-size: 1em; margin-top: 15px; text-align: left;"> Importancia de las estructuras condicionales</h4>
  <p>
    Las estructuras condicionales permiten que los programas reaccionen ante distintas entradas o situaciones. 
    Seg√∫n <strong>Malvino (2021)</strong>, ‚Äúsin estructuras condicionales, los programas se limitar√≠an a ejecutar instrucciones fijas, 
    sin adaptarse a los cambios de contexto o datos‚Äù (p. 214).
  </p>
  <p>
    Toda aplicaci√≥n ‚Äîdesde una calculadora hasta una red social‚Äî utiliza condiciones para tomar decisiones: validar contrase√±as, mostrar mensajes, filtrar informaci√≥n o manejar errores. 
    Dominar su uso es esencial para desarrollar la l√≥gica necesaria en la programaci√≥n.
  </p>

<section id="tema-4-5-4-6" style="color: #ffffff; background: none; font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6;">

  <h3 style="font-size: 1.2em; font-weight: bold; margin-top: 20px; text-align: left;">
  3. Anidaci√≥n de estructuras condicionales
  </h3>

  <p>
    La <strong>anidaci√≥n de estructuras condicionales</strong> ocurre cuando una condici√≥n se encuentra dentro de otra, es decir, 
    cuando el resultado de una primera decisi√≥n determina si se evaluar√° o no una segunda. 
    Este tipo de estructuras permite representar procesos jer√°rquicos o dependientes, en los que cada paso requiere cumplir una condici√≥n anterior para continuar.
  </p>

  <p>
    Por ejemplo, al determinar si una persona puede conducir, primero se verifica si es mayor de edad; 
    si lo es, se revisa si posee una licencia vigente. Solo si ambas condiciones se cumplen, se permite la acci√≥n. 
    Esto refleja un razonamiento l√≥gico secuencial, donde una decisi√≥n conduce a otra.
  </p>

  <p>
    La anidaci√≥n es muy √∫til en algoritmos que requieren verificaciones sucesivas o m√∫ltiples niveles de decisi√≥n. 
    Sin embargo, debe utilizarse con prudencia, ya que un exceso de condicionales dentro de otras puede dificultar la lectura y el mantenimiento del c√≥digo.
  </p>

  <p>
    Seg√∫n <strong>Gaddis (2022)</strong>, ‚Äúlas estructuras de decisi√≥n anidadas permiten representar una l√≥gica compleja de manera jer√°rquica, 
    pero su uso excesivo puede reducir la claridad del programa y aumentar las probabilidades de errores l√≥gicos‚Äù (p. 113). 
    Por ello, se recomienda mantener las anidaciones simples y organizadas, o reemplazarlas por estructuras m√∫ltiples si es posible.
  </p>

  <h3 style="font-size: 1.2em; font-weight: bold; margin-top: 25px; text-align: left;">
     4. Errores comunes en estructuras condicionales
  </h3>

  <p>
    Durante la construcci√≥n de estructuras condicionales, los programadores principiantes suelen cometer errores de l√≥gica o sintaxis 
    que impiden el correcto funcionamiento del algoritmo. Reconocerlos y prevenirlos es esencial para asegurar un c√≥digo funcional y claro.
  </p>

  <p>Entre los errores m√°s frecuentes se encuentran:</p>

  <ul style="text-align: left; margin-left: 25px;">
    <li><strong>Mal uso de operadores:</strong> </li>
   <p style="margin-top: 25px;">
  <img src="assets/img/41.jpg" alt="Pensamiento computacional" style="width: 500px; display: block; margin: 15px auto; border-radius: 10px;">
</p>

    <li><strong>Falta de sangr√≠a o indentaci√≥n (en Python):</strong> </li>
   <p style="margin-top: 25px;">
  <img src="assets/img/4222.jpg" alt="Pensamiento computacional" style="width: 500px; display: block; margin: 15px auto; border-radius: 10px;">
</p>

    <li><strong>Condiciones mal planteadas o confusas:</strong> </li>
<p style="margin-top: 25px;">
  <img src="assets/img/433.jpg" alt="Pensamiento computacional" style="width: 500px; display: block; margin: 15px auto; border-radius: 10px;">
</p>

  </ul>

  <p>
    De acuerdo con <strong>Lambert (2022)</strong>, ‚Äúlos errores de sintaxis y de l√≥gica en las estructuras de decisi√≥n son una de las causas m√°s comunes de fallos en los programas, 
    especialmente cuando las condiciones no est√°n bien organizadas o los operadores se utilizan incorrectamente‚Äù (p. 129).
  </p>

  <p>
    Una buena pr√°ctica es verificar las condiciones de forma individual antes de combinarlas y comentar el c√≥digo 
    para mantener su comprensi√≥n a largo plazo.
  </p>

<section id="recursos_aprendizaje" style="color: #ffffff; font-family: 'Arial', sans-serif; line-height: 1.6; margin-top: 30px;">

  <h3 style="font-size: 1.0em; margin-bottom: 10px;">üé• Videos a consultar</h3>

  <ul style="list-style-type: none; padding-left: 0;">
    <li style="margin-bottom: 18px;">
      <strong>Casta√±o Giraldo, S. A.</strong> (2021, marzo 17). <em>Condicionales en Python desde cero [IF, ELIF, ELSE] #009</em> [Video]. YouTube. <br>
      üëâ <a href="https://www.youtube.com/watch?v=iFBcCDDDsms" target="_blank" style="color: #00bfff; text-decoration: none;">https://www.youtube.com/watch?v=iFBcCDDDsms</a><br>
      <span>Este video introduce las estructuras condicionales en Python de forma sencilla, mostrando el uso de <code>if</code>, <code>elif</code> y <code>else</code> con ejemplos claros y pr√°cticos.</span>
    </li>

    <li style="margin-bottom: 18px;">
      <strong>Code JavaVu.</strong> (2020). <em>Estructura secuencial: ejemplos de algoritmos</em> [Video]. YouTube. <br>
      üëâ <a href="https://www.youtube.com/watch?v=cY78qXjyyXU" target="_blank" style="color: #00bfff; text-decoration: none;">https://www.youtube.com/watch?v=cY78qXjyyXU</a><br>
      <span>Un recurso ideal para comprender c√≥mo funcionan las estructuras secuenciales en los algoritmos, con ejemplos pr√°cticos y explicaciones paso a paso.</span>
    </li>

    <li style="margin-bottom: 18px;">
      <strong>SnekCato.</strong> (2021, abril 25). <em>IF, ELIF, ELSE | Condicionales en Python</em> [Video]. YouTube. <br>
      üëâ <a href="https://www.youtube.com/watch?v=S2gkQHGFiRE" target="_blank" style="color: #00bfff; text-decoration: none;">https://www.youtube.com/watch?v=S2gkQHGFiRE</a><br>
      <span>Explica de manera din√°mica c√≥mo aplicar correctamente las estructuras condicionales en Python, con ejemplos de c√≥digo y ejercicios de pr√°ctica.</span>
    </li>
  </ul>

  <h3 style="font-size: 1.0em; margin-top: 25px;">üíª Programas que te pueden servir para practicar</h3>

  <ul style="list-style-type: none; padding-left: 0;">
    <li style="margin-bottom: 15px;">
      <strong>RAPTOR:</strong><br>
      Herramienta educativa para crear y ejecutar algoritmos mediante diagramas de flujo. Permite visualizar de forma clara c√≥mo se ejecutan las estructuras secuenciales y condicionales paso a paso.
    </li>

    <li style="margin-bottom: 15px;">
      <strong>Flowgorithm:</strong><br>
      Programa gratuito dise√±ado para aprender programaci√≥n a trav√©s de diagramas de flujo interactivos. Es ideal para practicar la l√≥gica de decisiones (<code>if‚Äìelse</code>, <code>if‚Äìelif‚Äìelse</code>) antes de escribir c√≥digo en Python.
    </li>

    <li style="margin-bottom: 15px;">
      <strong>Miro:</strong><br>
      Pizarra digital colaborativa que facilita la creaci√≥n de diagramas de flujo, esquemas y mapas conceptuales. Muy √∫til para representar gr√°ficamente el flujo de un algoritmo antes de implementarlo.
    </li>
  </ul>
  </section>
   <p style="margin-top: 25px;">
  <img src="assets/img/A1.png" alt="Pensamiento computacional" style="width: 500px; display: block; margin: 15px auto; border-radius: 10px;">
</p>

    `,
    ejemplos: `
    
<section id="ejemplos_estructuras" style="color: #ffffff; font-family: 'Arial', sans-serif; line-height: 1.5; margin-top: 10px; text-align: left;">

  <h3 style="font-size: 1.3em; margin-bottom: 8px;">Ejemplo 1: </h3>
  <p style="margin: 5px 0;">Un ejemplo cl√°sico de estructura secuencial es el c√°lculo del promedio de tres notas. En este tipo de estructura, las instrucciones se ejecutan una tras otra, en el mismo orden en que fueron escritas.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir n1, n2, n3, promedio Como Real
  Leer n1, n2, n3
  promedio ‚Üê (n1 + n2 + n3) / 3
  Mostrar "El promedio es: ", promedio
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è En este caso, el flujo es lineal y sin bifurcaciones: primero se leen los datos, luego se realiza el c√°lculo y finalmente se muestra el resultado.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 2:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: calcular el √°rea y el per√≠metro de un rect√°ngulo.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir base, altura, area, perimetro Como Real
  Leer base
  Leer altura
  area ‚Üê base * altura
  perimetro ‚Üê 2 * (base + altura)
  Mostrar "El √°rea es: ", area
  Mostrar "El per√≠metro es: ", perimetro
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Este ejemplo sigue un flujo lineal de lectura, c√°lculo y salida, sin condiciones ni repeticiones.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 3:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: determinar si una persona puede votar.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir edad Como Entero
  Leer edad
  Si edad >= 18 Entonces
      Mostrar "Puede votar"
  Sino
      Mostrar "No puede votar"
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Aqu√≠ se utiliza la estructura if ‚Äì else, que permite tomar una decisi√≥n seg√∫n se cumpla o no la condici√≥n (edad ‚â• 18).</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 4:</h4>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir numero Como Entero
  Leer numero
  Si numero MOD 2 = 0 Entonces
      Mostrar "El n√∫mero es par"
  Sino
      Mostrar "El n√∫mero es impar"
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è El operador MOD calcula el residuo. Si es cero, el n√∫mero es par; de lo contrario, es impar.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 5:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: verificar si una persona puede conducir.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir edad Como Entero
  Definir tiene_licencia Como Caracter
  Leer edad
  Si edad >= 18 Entonces
      Leer tiene_licencia
      Si tiene_licencia = "S" Entonces
          Mostrar "Puede conducir"
      Sino
          Mostrar "No tiene licencia"
      FinSi
  Sino
      Mostrar "No tiene la edad m√≠nima"
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Este ejemplo muestra una anidaci√≥n condicional, donde una decisi√≥n depende del resultado de otra.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 5:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: clasificar una nota seg√∫n el valor num√©rico.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir nota Como Real
  Leer nota
  Si nota >= 17 Entonces
      Mostrar "Calificaci√≥n: A"
  Sino
      Si nota >= 14 Entonces
          Mostrar "Calificaci√≥n: B"
      Sino
          Si nota >= 11 Entonces
              Mostrar "Calificaci√≥n: C"
          Sino
              Mostrar "Calificaci√≥n: D"
          FinSi
      FinSi
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Este tipo de condicional m√∫ltiple permite evaluar varias condiciones de forma ordenada, ejecutando solo la primera que sea verdadera.</p>

  <h4 style="font-size: 1.1em; margin-top: 10px; margin-bottom: 5px;">Ejemplo 6:</h4>
  <p style="margin: 5px 0;">Situaci√≥n: determinar la etapa de vida seg√∫n la edad.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ffffff; font-family: 'Courier New', monospace;">
Inicio
  Definir edad Como Entero
  Leer edad
  Si edad < 12 Entonces
      Mostrar "Ni√±o"
  Sino
      Si edad < 18 Entonces
          Mostrar "Adolescente"
      Sino
          Si edad < 60 Entonces
              Mostrar "Adulto"
          Sino
              Mostrar "Adulto mayor"
          FinSi
      FinSi
  FinSi
Fin
  </pre>

  <p style="margin: 5px 0;">‚û°Ô∏è Este ejemplo permite clasificar rangos de edad usando condiciones jer√°rquicas.</p>

</section>

    
    `
  },
  dia5: {
    objetivo: `<p><strong>Objetivo:</strong></p>
    
     <p>
    ‚úîÔ∏è Comprender la funci√≥n del pseudoc√≥digo como herramienta intermedia entre el razonamiento l√≥gico y la programaci√≥n estructurada.<br>
    ‚úîÔ∏è Aplicar las reglas y estructuras b√°sicas del pseudoc√≥digo para representar soluciones algor√≠tmicas de forma clara y ordenada.<br>
    ‚úîÔ∏è Desarrollar habilidades de an√°lisis y planificaci√≥n mediante la escritura de algoritmos en pseudoc√≥digo.
     </p>
    
    
    `,
    teoria: `<p><strong>Teor√≠a:</strong></p>

    <section id="pseudocodigo" style="color: #ffffff; font-family: 'Arial', sans-serif; line-height: 1.5; margin-top: 30px; text-align: left;">

  <h3 style="font-size: 1.0em; margin-bottom: 8px;">1. Definici√≥n y funci√≥n del pseudoc√≥digo</h3>
  <p>El pseudoc√≥digo es una herramienta utilizada para describir el funcionamiento de un algoritmo mediante una notaci√≥n estructurada, que combina el lenguaje natural con ciertos elementos de la programaci√≥n formal. Su objetivo principal es expresar la l√≥gica de un proceso sin preocuparse por la sintaxis r√≠gida de un lenguaje de programaci√≥n. Esto permite que el analista o el estudiante se concentre en el razonamiento l√≥gico antes de escribir c√≥digo ejecutable.</p>

  <p>El pseudoc√≥digo no es interpretado por una computadora, sino que act√∫a como gu√≠a previa para el desarrollo del software. Gracias a su car√°cter universal, puede ser comprendido por programadores de distintos lenguajes y niveles de experiencia. Adem√°s, se considera una fase intermedia esencial en el dise√±o de programas, ya que evita errores conceptuales en etapas posteriores.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer n√∫mero1, n√∫mero2
   Sumar ‚Üê n√∫mero1 + n√∫mero2
   Mostrar Sumar
Fin
  </pre>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">2. Importancia en la programaci√≥n</h3>
  <p>El uso del pseudoc√≥digo es fundamental para el desarrollo del pensamiento l√≥gico y computacional. Permite que los estudiantes y programadores organicen sus ideas antes de pasar al c√≥digo fuente, reduciendo la posibilidad de errores y mejorando la eficiencia del proceso de programaci√≥n. En la ense√±anza de la inform√°tica, el pseudoc√≥digo se utiliza como una herramienta pedag√≥gica para introducir los conceptos de algoritmia sin necesidad de aprender un lenguaje espec√≠fico.</p>

  <p>Asimismo, fomenta la comprensi√≥n estructurada del flujo de informaci√≥n, lo que facilita la detecci√≥n de errores l√≥gicos, la optimizaci√≥n de procesos y la comunicaci√≥n entre miembros de un equipo de desarrollo. Gracias a su lenguaje neutro, el pseudoc√≥digo puede emplearse en diferentes contextos t√©cnicos y educativos, siendo un recurso ideal para documentar procedimientos o dise√±ar prototipos de programas.</p>

  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer temperatura
   Si temperatura > 37 Entonces
        Mostrar "Tiene fiebre"
   Sino
        Mostrar "Temperatura normal"
Fin
  </pre>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">3. Reglas de escritura del pseudoc√≥digo</h3>
  <p>La correcta redacci√≥n del pseudoc√≥digo garantiza la claridad y la comprensi√≥n del algoritmo. Generalmente, todo pseudoc√≥digo inicia con la palabra ‚ÄúInicio‚Äù y finaliza con ‚ÄúFin‚Äù, lo que delimita el cuerpo del algoritmo. Cada instrucci√≥n debe escribirse en l√≠neas separadas y con una sangr√≠a o indentaci√≥n que refleje la jerarqu√≠a de las estructuras utilizadas.</p>

  <p>Es recomendable emplear verbos de acci√≥n como Leer, Escribir, Calcular o Mostrar, los cuales indican las operaciones que realiza el algoritmo. Los nombres de las variables deben ser claros y representativos del contenido que almacenan. Adem√°s, deben evitarse ambig√ºedades, repeticiones innecesarias y estructuras poco legibles.</p>

  <p><strong>Ejemplo correcto:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer nota
   Si nota >= 11 Entonces
        Mostrar "Aprobado"
   Sino
        Mostrar "Desaprobado"
Fin
  </pre>

  <p><strong>Ejemplo incorrecto:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #ff8080; font-family: 'Courier New', monospace;">
Leer nota
Si nota>=11
Mostrar Aprobado
Sino
Mostrar Desaprobado
  </pre>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">4. Estructuras b√°sicas del pseudoc√≥digo</h3>
  <p>Los algoritmos representados mediante pseudoc√≥digo se organizan en tres estructuras fundamentales: secuencial, condicional y repetitiva.</p>

  <p><strong>Estructura secuencial:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer A, B
   C ‚Üê A + B
   Mostrar C
Fin
  </pre>

  <p><strong>Estructura condicional:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer edad
   Si edad >= 18 Entonces
        Mostrar "Mayor de edad"
   Sino
        Mostrar "Menor de edad"
Fin
  </pre>

  <p><strong>Estructura repetitiva:</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Contador ‚Üê 1
   Mientras Contador <= 5 Hacer
         Mostrar Contador
         Contador ‚Üê Contador + 1
   FinMientras
Fin
  </pre>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">5. Ventajas del pseudoc√≥digo</h3>
  <p>El pseudoc√≥digo presenta m√∫ltiples ventajas en el proceso de dise√±o de algoritmos. En primer lugar, facilita la comprensi√≥n de los procedimientos l√≥gicos gracias a su lenguaje simple y estructurado. En segundo lugar, permite planificar y documentar soluciones antes de implementarlas, lo que disminuye la probabilidad de cometer errores durante la codificaci√≥n. Finalmente, favorece el aprendizaje de la programaci√≥n al centrarse en la l√≥gica m√°s que en la sintaxis.</p>

  <p>Estas caracter√≠sticas convierten al pseudoc√≥digo en una herramienta indispensable para quienes se inician en la programaci√≥n y para los equipos que buscan estandarizar la comunicaci√≥n t√©cnica entre analistas, dise√±adores y desarrolladores.</p>

  <h3 style="font-size: 1.0em; margin-bottom: 8px; margin-top: 20px;">6. Ejemplos aplicados</h3>


  <p><strong>Ejemplo 1: Calcular el promedio de tres n√∫meros</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer n1, n2, n3
   promedio ‚Üê (n1 + n2 + n3) / 3
   Mostrar promedio
Fin
  </pre>

  <p><strong>Ejemplo 2: Determinar si una persona es mayor de edad</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer edad
   Si edad >= 18 Entonces
        Mostrar "Mayor de edad"
   Sino
        Mostrar "Menor de edad"
Fin
  </pre>

  <p><strong>Ejemplo 3: Clasificar una nota seg√∫n su valor num√©rico</strong></p>
  <pre style="background-color: #2a2a2a; padding: 10px; border-radius: 8px; color: #00ffcc; font-family: 'Courier New', monospace;">
Inicio
   Leer nota
   Si nota >= 17 Entonces
        Mostrar "Excelente"
   Sino Si nota >= 14 Entonces
        Mostrar "Bueno"
   Sino Si nota >= 11 Entonces
        Mostrar "Regular"
   Sino
        Mostrar "Desaprobado"
Fin
  </pre>

</section>


    `,
    ejemplos: `<p><strong>Ejemplos:</strong>
    
  <section style="color: white; font-family: 'Poppins', sans-serif; line-height: 1.5; padding: 20px; text-align: left;">

  <p style="margin-bottom: 10px;">
    A continuaci√≥n se presentan ejercicios pr√°cticos para aplicar las estructuras fundamentales del pseudoc√≥digo:
    secuencial, condicional y repetitiva. Cada ejercicio incluye la descripci√≥n del problema, las entradas, los procesos y las salidas esperadas.
  </p>

  <!-- Ejercicio 1 -->
  <h3 style="color: #ffcc00; margin-top: 20px; font-size: 18px;"> Ejercicio 1: C√°lculo del promedio final de un estudiante</h3>
  <p><strong>Descripci√≥n:</strong> Desarrollar un algoritmo que calcule el promedio final de un estudiante a partir de tres notas. Si el promedio es mayor o igual a 11, se mostrar√° ‚ÄúAprobado‚Äù; de lo contrario, ‚ÄúDesaprobado‚Äù.</p>
  <p><strong>Entradas:</strong> n1, n2, n3 (notas del estudiante)</p>
  <p><strong>Proceso:</strong> Leer las tres notas. Calcular el promedio = (n1 + n2 + n3) / 3. Evaluar si el promedio ‚â• 11.</p>
  <p><strong>Salidas:</strong> Promedio del estudiante y mensaje correspondiente.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir n1, n2, n3, promedio Como Real
    Leer n1, n2, n3
    promedio ‚Üê (n1 + n2 + n3) / 3
    Si promedio >= 11 Entonces
        Mostrar "Aprobado con promedio de: ", promedio
    Sino
        Mostrar "Desaprobado con promedio de: ", promedio
    FinSi
Fin
  </pre>

  <!-- Ejercicio 2 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 2: Descuento seg√∫n monto de compra</h3>
  <p><strong>Descripci√≥n:</strong> Calcular el total a pagar considerando un descuento del 10% si el monto es mayor o igual a 500 soles.</p>
  <p><strong>Entradas:</strong> monto (importe total de la compra)</p>
  <p><strong>Proceso:</strong> Leer monto. Si monto ‚â• 500, aplicar descuento = monto * 0.10. Calcular total = monto - descuento.</p>
  <p><strong>Salidas:</strong> Descuento aplicado y total a pagar.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir monto, descuento, total Como Real
    Leer monto
    Si monto >= 500 Entonces
        descuento ‚Üê monto * 0.10
    Sino
        descuento ‚Üê 0
    FinSi
    total ‚Üê monto - descuento
    Mostrar "Descuento aplicado: ", descuento
    Mostrar "Total a pagar: ", total
Fin
  </pre>

  <!-- Ejercicio 3 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 3: Clasificaci√≥n de edades</h3>
  <p><strong>Descripci√≥n:</strong> Determinar la etapa de vida de una persona seg√∫n su edad.</p>
  <p><strong>Entradas:</strong> edad (a√±os)</p>
  <p><strong>Proceso:</strong> Leer edad y evaluar rangos: &lt;12 ‚ÄúNi√±o(a)‚Äù, 12‚Äì17 ‚ÄúAdolescente‚Äù, 18‚Äì59 ‚ÄúAdulto(a)‚Äù, ‚â•60 ‚ÄúAdulto mayor‚Äù.</p>
  <p><strong>Salidas:</strong> Mensaje con la etapa de vida.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir edad Como Entero
    Leer edad
    Si edad < 12 Entonces
        Mostrar "Ni√±o(a)"
    Sino
        Si edad < 18 Entonces
            Mostrar "Adolescente"
        Sino
            Si edad < 60 Entonces
                Mostrar "Adulto(a)"
            Sino
                Mostrar "Adulto mayor"
            FinSi
        FinSi
    FinSi
Fin
  </pre>

  <!-- Ejercicio 4 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 4: C√°lculo del salario semanal</h3>
  <p><strong>Descripci√≥n:</strong> Calcular el salario semanal de un trabajador. Si trabaja m√°s de 40 horas, las horas extra se pagan al 150% del valor normal.</p>
  <p><strong>Entradas:</strong> horas trabajadas, tarifa por hora.</p>
  <p><strong>Proceso:</strong> Leer horas y tarifa. Si horas ‚â§ 40, salario = horas * tarifa; si &gt;40, salario = (40 * tarifa) + ((horas - 40) * tarifa * 1.5).</p>
  <p><strong>Salidas:</strong> Salario semanal total.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir horas, tarifa, salario Como Real
    Leer horas, tarifa
    Si horas <= 40 Entonces
        salario ‚Üê horas * tarifa
    Sino
        salario ‚Üê (40 * tarifa) + ((horas - 40) * tarifa * 1.5)
    FinSi
    Mostrar "El salario semanal es: ", salario
Fin
  </pre>

  <!-- Ejercicio 5 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 5: Suma de n√∫meros positivos</h3>
  <p><strong>Descripci√≥n:</strong> Leer 10 n√∫meros e indicar la suma total solo de los valores positivos.</p>
  <p><strong>Entradas:</strong> 10 n√∫meros enteros (num).</p>
  <p><strong>Proceso:</strong> Inicializar suma ‚Üê 0. Repetir 10 veces: leer num. Si num > 0, sumar a suma.</p>
  <p><strong>Salidas:</strong> Suma total de los n√∫meros positivos.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir num, suma, contador Como Entero
    suma ‚Üê 0
    contador ‚Üê 1
    Mientras contador <= 10 Hacer
        Leer num
        Si num > 0 Entonces
            suma ‚Üê suma + num
        FinSi
        contador ‚Üê contador + 1
    FinMientras
    Mostrar "La suma de los n√∫meros positivos es: ", suma
Fin
  </pre>

  <!-- Ejercicio 6 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 6: Determinar el mayor de tres n√∫meros</h3>
  <p><strong>Descripci√≥n:</strong> Leer tres n√∫meros y determinar cu√°l es el mayor o si todos son iguales.</p>
  <p><strong>Entradas:</strong> a, b, c (n√∫meros reales).</p>
  <p><strong>Proceso:</strong> Leer los tres n√∫meros, compararlos y mostrar el mayor o mensaje de igualdad.</p>
  <p><strong>Salidas:</strong> El n√∫mero mayor o mensaje de igualdad.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir a, b, c Como Real
    Leer a, b, c
    Si a > b Y a > c Entonces
        Mostrar "El mayor es: ", a
    Sino
        Si b > c Entonces
            Mostrar "El mayor es: ", b
        Sino
            Si c > a Y c > b Entonces
                Mostrar "El mayor es: ", c
            Sino
                Mostrar "Todos los n√∫meros son iguales"
            FinSi
        FinSi
    FinSi
Fin
  </pre>

  <!-- Ejercicio 7 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 7: Validaci√≥n de fecha</h3>
  <p><strong>Descripci√≥n:</strong> Leer una fecha (d√≠a, mes, a√±o) y validar si es correcta (sin considerar a√±os bisiestos).</p>
  <p><strong>Entradas:</strong> d√≠a, mes, a√±o (valores enteros).</p>
  <p><strong>Proceso:</strong> Verificar rangos de mes y d√≠a seg√∫n el mes correspondiente.</p>
  <p><strong>Salidas:</strong> Mensaje indicando si la fecha es v√°lida o no.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir dia, mes, a√±o Como Entero
    Leer dia, mes, a√±o
    Si mes < 1 O mes > 12 Entonces
        Mostrar "Mes inv√°lido"
    Sino
        Si dia < 1 O dia > 31 Entonces
            Mostrar "D√≠a inv√°lido"
        Sino
            Si (mes = 4 O mes = 6 O mes = 9 O mes = 11) Y dia > 30 Entonces
                Mostrar "D√≠a inv√°lido para este mes"
            Sino
                Si mes = 2 Y dia > 28 Entonces
                    Mostrar "D√≠a inv√°lido para febrero"
                Sino
                    Mostrar "Fecha v√°lida"
                FinSi
            FinSi
        FinSi
    FinSi
Fin
  </pre>

  <!-- Ejercicio 8 -->
  <h3 style="color: #ffcc00; margin-top: 25px; font-size: 18px;"> Ejercicio 8: Clasificaci√≥n de notas con promedio general</h3>
  <p><strong>Descripci√≥n:</strong> Leer las notas de cinco estudiantes, calcular el promedio general del grupo y mostrar cu√°ntos aprobaron y desaprobaron.</p>
  <p><strong>Entradas:</strong> nota (5 valores reales).</p>
  <p><strong>Proceso:</strong> Acumular notas, contar aprobados y desaprobados, calcular promedio.</p>
  <p><strong>Salidas:</strong> Promedio general, cantidad de aprobados y desaprobados.</p>

  <pre style="background-color: #1a1a1a; padding: 12px; border-radius: 6px; font-family: 'Courier New', monospace; overflow-x: auto;">
Inicio
    Definir nota, suma, promedio Como Real
    Definir contador, aprobados, desaprobados Como Entero
    suma ‚Üê 0
    aprobados ‚Üê 0
    desaprobados ‚Üê 0
    Para contador ‚Üê 1 Hasta 5 Con Paso 1 Hacer
        Leer nota
        suma ‚Üê suma + nota
        Si nota >= 11 Entonces
            aprobados ‚Üê aprobados + 1
        Sino
            desaprobados ‚Üê desaprobados + 1
        FinSi
    FinPara
    promedio ‚Üê suma / 5
    Mostrar "Promedio general: ", promedio
    Mostrar "Aprobados: ", aprobados
    Mostrar "Desaprobados: ", desaprobados
Fin
  </pre>

  <p style="margin-top: 20px;">
    Estos ejercicios te permitir√°n aplicar de forma pr√°ctica las estructuras b√°sicas del pseudoc√≥digo, desarrollando el pensamiento l√≥gico, la secuencia de pasos y la capacidad de traducir problemas reales a soluciones algor√≠tmicas.
  </p>

</section>

    
    `,
    quiz_final: `<p><strong>Quiz final:</strong> Evaluaci√≥n de todo lo aprendido en pseudoc√≥digo.</p>`
  },

  // Curso 2 ‚Äì PSeInt
  pseint1: {
    objetivo: `<p><strong>Objetivo:</strong> Familiarizarse con la sintaxis b√°sica de PSeInt.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Sintaxis b√°sica de PSeInt.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear programas simples en PSeInt.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de sintaxis b√°sica.</p>`
  },
  pseint2: {
    objetivo: `<p><strong>Objetivo:</strong> Aprender condicionales y bucles en PSeInt.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Condicionales y bucles en PSeInt.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear ejercicios con if, while, for.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de condicionales y bucles.</p>`
  },
  pseint3: {
    objetivo: `<p><strong>Objetivo:</strong> Resolver problemas pr√°cticos usando PSeInt.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Resoluci√≥n de problemas pr√°cticos en PSeInt.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Programas completos con entradas y salidas.</p>`,
    quiz: `<p><strong>Quiz:</strong> Evaluaci√≥n de ejercicios pr√°cticos.</p>`
  },

  // Curso 3 ‚Äì Python
  py1: {
    objetivo: `<p><strong>Objetivo:</strong> Comprender variables y tipos de datos en Python.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Variables y tipos de datos en Python.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear variables y operaciones b√°sicas.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de variables y tipos de datos.</p>`
  },
  py2: {
    objetivo: `<p><strong>Objetivo:</strong> Aplicar condicionales y bucles en Python.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Condicionales y bucles en Python.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Estructuras if, while y for.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de control de flujo.</p>`
  },
  py3: {
    objetivo: `<p><strong>Objetivo:</strong> Crear funciones y m√≥dulos reutilizables en Python.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Funciones y m√≥dulos en Python.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear funciones y reutilizar c√≥digo.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas sobre funciones y modularizaci√≥n.</p>`
  },
  py4: {
    objetivo: `<p><strong>Objetivo:</strong> Integrar todo lo aprendido en un proyecto final.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Proyecto final integrando todo lo aprendido.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Mini-proyecto completo.</p>`,
    quiz: `<p><strong>Quiz:</strong> Evaluaci√≥n final del proyecto.</p>`
  },

  // Curso 4 ‚Äì Modular
  mod1: {
    objetivo: `<p><strong>Objetivo:</strong> Entender el concepto de modularizaci√≥n.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Concepto de modularizaci√≥n.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Separar un programa en funciones.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de modularizaci√≥n.</p>`
  },
  mod2: {
    objetivo: `<p><strong>Objetivo:</strong> Aprender a crear funciones en pseudoc√≥digo.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Funciones en pseudoc√≥digo.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear funciones y llamarlas en pseudoc√≥digo.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas sobre funciones.</p>`
  },
  mod3: {
    objetivo: `<p><strong>Objetivo:</strong> Aplicar modularizaci√≥n en un mini-reto.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Mini-reto aplicando modularizaci√≥n.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Resolver mini-reto paso a paso.</p>`,
    quiz: `<p><strong>Quiz:</strong> Evaluaci√≥n del mini-reto.</p>`
  }
};

// === Datos de los cursos ===
const cursos = {
  1: {
    titulo: "Minicurso 1: L√≥gica de Programaci√≥n",
    descripcion: "Desarrolla el pensamiento computacional y aprende a representar algoritmos paso a paso.",
    imagen: "assets/img/C+.png",
    modulos: [
      { nombre: "üß© Tema 1 ‚Äì Pensamiento computacional y algoritmos üß©", id: "dia1", recursos: ["Teor√≠a", "Ejemplos", "Prueba diagn√≥stica"] },
      { nombre: "üîÑ Tema 2 ‚Äì Diagramas de flujo üîÑ", id: "dia2", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "üî¢ Tema 3 ‚Äì Variables y tipos de datos üî¢", id: "dia3", recursos: ["Teor√≠a", "Ejemplos", "Quiz intermedio"] },
      { nombre: "‚öôÔ∏è Tema 4 ‚Äì Estructuras secuenciales y condicionales ‚öôÔ∏è", id: "dia4", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "üíª Tema 5 ‚Äì Pseudoc√≥digo  üíª", id: "dia5", recursos: ["Teor√≠a", "Ejemplos", "Quiz final"] }
    ]
  },
  2: {
    titulo: "Minicurso 2: Introducci√≥n a PSeInt",
    descripcion: "Aprende los fundamentos de la programaci√≥n usando PSeInt.",
    imagen: "assets/img/pseint1.png",
    modulos: [
      { nombre: "D√≠a 1 ‚Äì Sintaxis b√°sica en PSeInt", id: "pseint1", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 2 ‚Äì Condicionales y bucles", id: "pseint2", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 3 ‚Äì Ejercicios pr√°cticos", id: "pseint3", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] }
    ]
  },
  3: {
    titulo: "Minicurso 3: Fundamentos de Python",
    descripcion: "Aprende a programar con Python desde cero con un mini-proyecto final.",
    imagen: "assets/img/python1.png",
    modulos: [
      { nombre: "D√≠a 1 ‚Äì Variables y tipos de datos", id: "py1", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 2 ‚Äì Condicionales y bucles", id: "py2", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 3 ‚Äì Funciones y m√≥dulos", id: "py3", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 4 ‚Äì Proyecto final", id: "py4", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] }
    ]
  },
  4: {
    titulo: "Minicurso 4: Programaci√≥n Modular",
    descripcion: "Organiza tus programas en funciones reutilizables y desarrolla un mini-reto.",
    imagen: "assets/img/modular1.png",
    modulos: [
      { nombre: "D√≠a 1 ‚Äì Concepto de modularizaci√≥n", id: "mod1", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 2 ‚Äì Funciones en pseudoc√≥digo", id: "mod2", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 3 ‚Äì Mini reto final", id: "mod3", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] }
    ]
  }
};

// === Funci√≥n principal ===
function cargarCurso() {
  const curso = cursos[cursoSeleccionado];

  if (!curso) {
    document.getElementById("titulo-curso").textContent = "Curso no encontrado";
    document.getElementById("descripcion-curso").textContent = "Verifica el enlace o selecciona un curso v√°lido.";
    return;
  }

  // Hero
  const hero = document.querySelector(".hero-curso");
  document.getElementById("titulo-curso").textContent = curso.titulo;
  document.getElementById("descripcion-curso").textContent = curso.descripcion;

  if (curso.imagen) {
    hero.style.backgroundImage = `linear-gradient(rgba(5,11,18,0.85), rgba(5,11,18,0.9)), url('${curso.imagen}')`;
    hero.style.backgroundSize = "cover";
    hero.style.backgroundPosition = "center";
    hero.style.backgroundRepeat = "no-repeat";
    hero.style.backgroundAttachment = "fixed";
  }

  // Contenedor de m√≥dulos
  const contenedor = document.getElementById("contenido-curso");
  contenedor.innerHTML = "";

  curso.modulos.forEach(mod => {
    const moduloHTML = `
      <section class="modulo">
        <h2>${mod.nombre}</h2>
        <div class="recursos">
          ${mod.recursos.map(r => `<button class="btn-recurso" data-target="${r.toLowerCase().replace(/\s/g,'-')}-${mod.id}">${r}</button>`).join("")}
        </div>
        ${mod.recursos.map(r => {
          const key = r.toLowerCase()
                        .normalize("NFD")
                        .replace(/[\u0300-\u036f]/g, "") // quitar tildes
                        .replace(/\s/g, "_");

          const contenido = contenidoModulos[mod.id]?.[key] || `<p>Aqu√≠ puedes colocar el contenido de "${r}".</p>`;
          const objetivoHTML = (key === "teoria" && contenidoModulos[mod.id]?.objetivo)
            ? contenidoModulos[mod.id].objetivo
            : "";

          return `
            <div id="${r.toLowerCase().replace(/\s/g,'-')}-${mod.id}" class="subseccion">
              <h3>${r}</h3>
              ${objetivoHTML}
              ${contenido}
            </div>
          `;
        }).join("")}
      </section>
    `;
    contenedor.insertAdjacentHTML("beforeend", moduloHTML);
  });

  // Scroll suave
  document.querySelectorAll(".btn-recurso").forEach(btn => {
    btn.addEventListener("click", () => {
      const target = document.getElementById(btn.dataset.target);
      if (target) {
        target.scrollIntoView({ behavior: "smooth", block: "start" });
      }
    });
  });
}

// === Agregar referencias bibliogr√°ficas por curso ===
function agregarReferencias(cursoId) {
  const contenedor = document.getElementById("contenido-curso");
  if (!contenedor) return;

  const referenciasPorCurso = {
    1: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          <p>‚Ä¢ Cervera-Manjarrez, J. et al. (2023). <em>El pensamiento computacional y la educaci√≥n.</em> Revista Latinoamericana de Tecnolog√≠a Educativa.</p>
          <p>‚Ä¢ Gonz√°lez, R. & Mart√≠nez, D. (2022). <em>Estrategias para fomentar el pensamiento l√≥gico.</em> Editorial Acad√©mica Espa√±ola.</p>
          <p>‚Ä¢ Rodr√≠guez Canfranc, M. (2023). <em>La importancia del pensamiento computacional en la era digital.</em> Fundaci√≥n Telef√≥nica.</p>
          <p>‚Ä¢ Wing, J. (2006). <em>Computational Thinking.</em> Communications of the ACM, 49(3), 33‚Äì35.</p>
        </div>
      </section>
    `,
    2: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          <p>‚Ä¢ Castro, P. (2024). <em>Introducci√≥n pr√°ctica a PSeInt.</em> Universidad Nacional.</p>
          <p>‚Ä¢ Mendoza, L. (2023). <em>Fundamentos de algoritmos con PSeInt.</em> Editorial T√©cnica.</p>
        </div>
      </section>
    `,
    3: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          <p>‚Ä¢ Sweigart, A. (2020). <em>Automate the Boring Stuff with Python.</em> No Starch Press.</p>
          <p>‚Ä¢ Zelle, J. (2017). <em>Python Programming: An Introduction to Computer Science.</em> Franklin, Beedle & Associates.</p>
        </div>
      </section>
    `,
    4: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          <p>‚Ä¢ Gaddis, T. (2021). <em>Starting Out with Programming Logic and Design.</em> Pearson.</p>
          <p>‚Ä¢ Malvino, A. (2019). <em>Programaci√≥n modular aplicada.</em> McGraw-Hill.</p>
        </div>
      </section>
    `
  };

  if (referenciasPorCurso[cursoId]) {
    contenedor.insertAdjacentHTML("beforeend", referenciasPorCurso[cursoId]);
  }
}

// === Inicializaci√≥n ===
document.addEventListener("DOMContentLoaded", () => {
  cargarCurso();
  agregarReferencias(cursoSeleccionado);
});
