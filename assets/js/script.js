console.log("Curso din√°mico cargado correctamente üöÄ");

// Obtener el n√∫mero de curso desde la URL
const params = new URLSearchParams(window.location.search);
const cursoSeleccionado = params.get("curso") || "1";

// === Contenido de los m√≥dulos por recurso ===
const contenidoModulos = {
  // Curso 1 ‚Äì L√≥gica de programaci√≥n
  dia1: {
    objetivo: `<p><strong>Objetivos:</strong></p> 
    <p>
    ‚úîÔ∏è Comprender el significado y la utilidad del pensamiento computacional.<br>
    ‚úîÔ∏è Identificar sus pilares principales y su funci√≥n.<br>
    ‚úîÔ∏è Aplicar estas ideas tanto en el aula como en la vida diaria.
     </p>`,
    teoria: `
      <p><strong>Temas:</strong></p>
      <ul>
        <p><strong>¬øQu√© es el pensamiento computacional?</strong></p>
        <p>En este primer tema se abordar√° el pensamiento computacional, una de las habilidades m√°s importantes en la sociedad actual. No se trata √∫nicamente de aprender a programar, sino de razonar y enfrentar los problemas de forma l√≥gica, creativa y estructurada, de manera similar a como lo har√≠a una computadora, pero aplicado a situaciones reales de la vida cotidiana.</p>
        <p>El pensamiento computacional es un proceso cognitivo que permite analizar un problema complejo, comprenderlo y dise√±ar soluciones efectivas. Para ello, requiere de una secuencia ordenada de acciones que ayudan a simplificar la situaci√≥n, identificar lo esencial y organizar los pasos necesarios para resolverla. En otras palabras, implica pensar con precisi√≥n, planificar estrategias y tomar decisiones basadas en el an√°lisis de la informaci√≥n disponible.</p>
        <p>Esta forma de pensamiento no se limita al √°mbito de la tecnolog√≠a o la inform√°tica. Por el contrario, puede aplicarse en cualquier contexto, desde planificar un viaje o un evento hasta resolver desaf√≠os en el aula o en el trabajo. Por ejemplo, al decidir c√≥mo llegar de un punto a otro en la ciudad, el pensamiento computacional nos ayuda a evaluar variables como la distancia, el tiempo, el tr√°fico o el clima, para luego elegir la mejor alternativa. Si alguna condici√≥n cambia, tambi√©n somos capaces de replantear el proceso o ajustar la estrategia, tal como se hace en la programaci√≥n al modificar un algoritmo.  <p>
        <p>De acuerdo con Cervera-Manjarrez et al. (2023), ‚Äúel pensamiento computacional permite que el ser humano se adentre en un mundo rico y vasto de habilidades de abstracci√≥n y pragmatismo que le posibilitan un uso m√°s consciente y adecuado de la tecnolog√≠a‚Äù. Esta idea refuerza que el pensamiento computacional es una competencia clave en la formaci√≥n moderna, pues impulsa el razonamiento l√≥gico, la creatividad, la capacidad de an√°lisis y la resoluci√≥n efectiva de problemas.<p>
        <p>Asimismo, Gonz√°lez y Mart√≠nez (2022) destacan que este tipo de pensamiento fomenta la autonom√≠a, la reflexi√≥n y la transferencia del conocimiento, ya que al enfrentarse a una situaci√≥n problem√°tica, el estudiante aprende a formular hip√≥tesis, analizar opciones y optimizar soluciones. En conjunto, ambas perspectivas subrayan que el desarrollo del pensamiento computacional no solo fortalece habilidades t√©cnicas, sino tambi√©n cognitivas y sociales, promoviendo un aprendizaje m√°s cr√≠tico, colaborativo y adaptable a los retos del mundo digital. <p>
        <p>En s√≠ntesis, el pensamiento computacional no consiste en programar, sino en entender y estructurar el razonamiento humano de manera l√≥gica y eficiente. Es una herramienta poderosa que permite transformar problemas complejos en soluciones claras, fomentando la creatividad, el pensamiento cr√≠tico y el trabajo en equipo. <p>
        <p> Antes de profundizar en sus componentes principales, es importante reconocer algunas ideas equivocadas y concepciones correctas que suelen presentarse al hablar de este concepto. A continuaci√≥n, se muestra un cuadro comparativo que busca diferenciar los mitos y realidades sobre el pensamiento computacional, con el fin de comprender su verdadero alcance y relevancia. <p>
        <p style="margin-top: 25px;">
        <p style="margin-top: 25px;">
        <img src="assets/img/tema1siyno.jpg" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>  <p>
        <p><strong>Los cuatro pilares del pensamiento computacional:</strong></p>
        <p>  Descomposici√≥n, reconocimiento de patrones , abstracci√≥n y dise√±o de algoritmos<p>
        <img src="assets/img/Pcompu.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p>El pensamiento computacional se apoya en cuatro habilidades fundamentales que permiten comprender, analizar y resolver problemas de manera estructurada. Estas competencias no solo se aplican en el √°mbito de la inform√°tica, sino tambi√©n en la vida cotidiana, el trabajo y la educaci√≥n, ayudando a desarrollar una mente anal√≠tica, creativa y l√≥gica.  <p>
        <p>Seg√∫n Rodr√≠guez Canfranc (2023), el pensamiento computacional es una competencia clave en la era digital, pues permite adaptarse a un mundo cada vez m√°s tecnol√≥gico. Esta afirmaci√≥n resalta la importancia de desarrollar habilidades cognitivas que vayan m√°s all√° de la programaci√≥n. Pensar de manera computacional implica analizar los problemas con l√≥gica, creatividad y organizaci√≥n, cualidades indispensables para desenvolverse con √©xito en entornos acad√©micos, laborales y cotidianos cada vez m√°s influenciados por la tecnolog√≠a.  <p>
        <p>A diferencia de lo que muchos piensan, el pensamiento computacional no se limita al uso de ordenadores o la escritura de c√≥digo; m√°s bien, es un proceso mental que permite formular problemas y dise√±ar soluciones claras y efectivas, aplicables en cualquier √°mbito. Como se√±ala Jeannette Wing, una de las pioneras del concepto, esta disciplina consiste en ‚Äúresolver problemas, dise√±ar sistemas y comprender el comportamiento humano utilizando los principios fundamentales de la inform√°tica‚Äù.  <p>
        <p>De esta forma, el pensamiento computacional se construye sobre cuatro pilares esenciales que orientan el an√°lisis y la resoluci√≥n de problemas: la descomposici√≥n, el reconocimiento de patrones, la abstracci√≥n y el dise√±o de algoritmos. Cada uno de ellos cumple un rol clave en la formaci√≥n del razonamiento l√≥gico y en la aplicaci√≥n de estrategias eficientes tanto en contextos educativos como en situaciones reales de la vida diaria.  <p>
        <p>A continuaci√≥n, se explican cada una de estas habilidades con m√°s detalle:  <p>
        <p>üìä1. Descomposici√≥n: <p>
        <p>La descomposici√≥n consiste en dividir un problema complejo en partes m√°s peque√±as y manejables, lo que facilita su an√°lisis y soluci√≥n. Esta habilidad ayuda a comprender mejor la estructura del problema, identificar sus componentes principales y abordar cada parte de forma organizada. Al resolver paso a paso, se evita la confusi√≥n y se mejora la eficiencia del trabajo.  <p>
        <p>Ejemplo: Si queremos organizar una feria escolar, podemos dividir el proyecto en subtareas: elegir el lugar, definir los stands, asignar responsables y planificar la difusi√≥n. Cada etapa puede resolverse de manera independiente, logrando una gesti√≥n m√°s clara y efectiva.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/descomponer.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>‚è∫Ô∏è2. Reconocimiento de patrones: <p>
        <p>El reconocimiento de patrones permite detectar similitudes, tendencias o repeticiones entre distintos problemas o situaciones. Esta habilidad es fundamental para reutilizar soluciones previas y optimizar el tiempo, ya que muchos desaf√≠os comparten estructuras comunes. Reconocer patrones tambi√©n fomenta la capacidad de predecir resultados y tomar decisiones m√°s acertadas.  <p>
        <p>Ejemplo: Si un docente nota que sus estudiantes aprenden mejor con actividades visuales, puede aplicar esa misma estrategia en diferentes materias o temas, aprovechando un patr√≥n de aprendizaje efectivo.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/profe.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üßä 3. Abstracci√≥n: <p>
        <p>La abstracci√≥n consiste en identificar los aspectos m√°s importantes de un problema y eliminar los detalles que no son relevantes para su soluci√≥n. De esta forma, se logra simplificar la informaci√≥n, concentrarse en lo esencial y dise√±ar modelos m√°s claros y funcionales. Es una habilidad clave para priorizar, sintetizar y comprender la esencia de cualquier situaci√≥n.  <p>
        <p>Ejemplo: Al dise√±ar una aplicaci√≥n de recetas, no es necesario detallar el color o la textura de los ingredientes; lo esencial es definir los pasos del proceso de preparaci√≥n, las cantidades y el tiempo de cocci√≥n.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/recetaPro.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üíª 4. Dise√±o de algoritmos:  <p>
        <p>El dise√±o de algoritmos implica establecer una secuencia l√≥gica y ordenada de pasos que conducen a la soluci√≥n de un problema. Es la base de la programaci√≥n, pero tambi√©n se aplica en la organizaci√≥n de tareas diarias. Un buen algoritmo debe ser claro, preciso y repetible, de modo que cualquier persona pueda seguirlo y obtener el mismo resultado.  <p>
        <p>Ejemplo: Para preparar un s√°ndwich, el algoritmo ser√≠a: tomar pan, colocar los ingredientes en orden, cerrar y servir. Este m√©todo garantiza coherencia y evita errores en el proceso.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/prepararSand.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>Finalmente, estos cuatro pilares fortalecen el razonamiento l√≥gico, la creatividad, la autonom√≠a y la colaboraci√≥n. Desarrollar el pensamiento computacional no solo prepara para comprender la tecnolog√≠a, sino que tambi√©n mejora la forma en que se analizan y resuelven los problemas cotidianos. En un mundo cada vez m√°s digital, estas habilidades se convierten en herramientas esenciales para el aprendizaje significativo y la adaptaci√≥n a los desaf√≠os del siglo XXI.  <p>
        <p style="margin-top: 25px;">
        <img src="assets/img/esquemap.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        
        <p><strong>Qu√© es un algoritmo y sus caracter√≠sticas:</strong></p>
        <p style="margin-top: 25px;">
        <img src="assets/img/Algotmos.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        
        <p><strong>¬øQu√© es un algoritmo?</strong></p>
        <p style="margin-top: 30px;">
        <p style="text-align: center; font-style: italic; font-weight: bold;">
        "Un algoritmo es un conjunto de pasos que define c√≥mo hay que realizar una tarea. 
        Para que una m√°quina como una computadora pueda llevar a cabo una tarea, 
        es preciso dise√±ar y representar un algoritmo en una forma que sea compatible con la m√°quina."
        </p>
        <p style="text-align: center; font-style: italic; font-weight: bold;">
        Brookshear, G. (2012), Introducci√≥n a la Computaci√≥n (11a ed.). Pearson.
        </p>
        <p style="margin-top: 30px;">
        <p>En el √°mbito del pensamiento computacional, un algoritmo se entiende como una secuencia finita y ordenada de pasos l√≥gicos que permiten resolver un problema o realizar una tarea de manera sistem√°tica. Seg√∫n Cede√±o y Cede√±o (2021), los algoritmos representan ‚Äúun conjunto de instrucciones bien definidas que, al ejecutarse paso a paso, conducen a la obtenci√≥n de un resultado esperado.‚Äù
         Esto implica que su aplicaci√≥n no se limita al campo de la programaci√≥n, sino que puede observarse tambi√©n en la vida cotidiana, como al seguir una receta, resolver una operaci√≥n matem√°tica o planificar una actividad. <p>
        <p>El pensamiento computacional utiliza los algoritmos como una herramienta esencial para estructurar el razonamiento y organizar las ideas de forma l√≥gica, secuencial y coherente. En esta l√≠nea, Wing (2006) se√±ala que el pensamiento computacional consiste en ‚Äúla formulaci√≥n de problemas y la representaci√≥n de sus soluciones de manera que puedan ser ejecutadas eficazmente por un agente procesador de informaci√≥n.‚Äù Es decir, un algoritmo no solo define qu√© se debe hacer, sino tambi√©n c√≥mo debe hacerse. <p>
        <p style="margin-top: 25px;">
        <p>‚öôÔ∏è Caracter√≠sticas de un algoritmo : <p>
        <p>De acuerdo con Garc√≠a-Molina y Valverde (2019), un algoritmo debe cumplir con una serie de caracter√≠sticas fundamentales que garantizan su eficacia y aplicabilidad. Estas propiedades permiten que un procedimiento sea comprendido, ejecutado y optimizado tanto por personas como por computadoras. <p>
        
        <p style="margin-top: 30px;">
        <img src="assets/img/finito.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p> 1. Finito: <p>
        <p>Un algoritmo debe estar compuesto por un n√∫mero limitado de pasos. Esto significa que el proceso debe tener un punto de inicio y un final claramente definidos. Si las instrucciones se ejecutaran de forma infinita, el problema nunca llegar√≠a a resolverse.<p>
         <p>Ejemplo: Un algoritmo para calcular el promedio de notas termina una vez que obtiene el resultado final, no contin√∫a calculando indefinidamente. <p>
         <p>2. Claridad: <p>
        <p> Cada paso o instrucci√≥n debe expresarse de forma precisa, sin ambig√ºedades o interpretaciones m√∫ltiples. La claridad garantiza que cualquier persona o m√°quina pueda seguir las instrucciones sin cometer errores por confusi√≥n.<p>
         <p> Ejemplo: En lugar de decir ‚Äúprocesar los datos‚Äù, una instrucci√≥n clara ser√≠a ‚Äúsumar los valores num√©ricos de la columna A‚Äù.<p>
        <p>3. Secuencialidad: <p>
        <p>Las instrucciones de un algoritmo deben seguir un orden l√≥gico y coherente. Cada paso depende del anterior y prepara el contexto para el siguiente, lo cual asegura que el resultado sea correcto.<p>
         <p> Ejemplo: Para preparar una receta, primero se re√∫nen los ingredientes, luego se mezclan y finalmente se cocinan; alterar el orden puede arruinar el resultado. <p>
        <p>4. Eficiencia: <p>
        <p>Un algoritmo debe poder aplicarse a una amplia variedad de casos similares, no √∫nicamente a uno espec√≠fico. Esta caracter√≠stica le otorga flexibilidad y reutilizaci√≥n.<p>
        <p>Ejemplo: Un algoritmo que calcula el promedio puede aplicarse tanto a notas escolares como a temperaturas o ingresos, siempre que los datos sean num√©ricos. <p>
        <p>Estas caracter√≠sticas aseguran que los algoritmos sean comprensibles, precisos y adaptables, permitiendo que cualquier proceso ya sea inform√°tico o cotidiano pueda ejecutarse de forma ordenada y eficiente. <p>
        <p style="margin-top: 30px;">
        <img src="assets/img/caraAlg.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
        <p>üß© Estructura de un algoritmo: <p>
        <p>   Todo algoritmo se compone de tres partes fundamentales que determinan su funcionamiento: <p>
        <p>    - Entrada (input): <p>
        <p>      Corresponde a los datos iniciales o informaci√≥n necesaria para iniciar el proceso. <p>
        <p>      Ejemplo: los ingredientes de una receta o los n√∫meros que se desean sumar. <p>
        <p>    - Proceso (processing): <p>
        <p>      Es el conjunto de pasos, operaciones o transformaciones que se realizan con los datos de entrada para llegar al resultado final.<p>
        <p>      Ejemplo: mezclar los ingredientes, realizar un c√°lculo o seguir un conjunto de reglas l√≥gicas.<p>
        <p>    - Salida (output):<p>
        <p>      Es el resultado final que se obtiene despu√©s de ejecutar correctamente todos los pasos del proceso.<p>
        <p>      Ejemplo: el plato preparado, el resultado de una operaci√≥n matem√°tica o la generaci√≥n de un reporte.<p>
        <p style="margin-top: 30px;">
        <img src="assets/img/eps.png" alt="Pensamiento computacional" style="width: 350px; display: block; margin: 15px auto; border-radius: 10px;">
        <p style="margin-top: 25px;">
      
      </ul>
    `,
    ejemplos: `
      <p><strong>Ejemplos:</strong></p>
        <p><strong>üß† Ejemplo 1: Reuni√≥n con los amigos en un lugar nuevo</strong></p>
        <p>Situaci√≥n: <p>
        <p>Queremos organizar una salida con amigos, pero cada uno tiene gustos, presupuestos y horarios diferentes. <p>
        <p>Aplicaci√≥n del pensamiento computacional: <p>
        <p> - Descomposici√≥n: Dividimos el problema en partes: elegir actividad, decidir lugar, calcular gastos y coordinar horarios.<p>
        <p> - Reconocimiento de patrones: Analizamos experiencias anteriores para ver qu√© actividades funcionaron bien.<p>
        <p> - Abstracci√≥n: Dejamos de lado detalles irrelevantes (como el color de las sillas del restaurante) y nos enfocamos en lo esencial: disponibilidad, precio y transporte.<p>
        <p> - Algoritmo: Paso a paso: crear una lista de opciones ‚Üí verificar disponibilidad ‚Üí calcular costos ‚Üí confirmar el plan.<p>
        <p>Resultado: <p>
        <p>Se obtiene una planificaci√≥n m√°s clara y r√°pida, donde todos pueden participar y decidir con base en informaci√≥n concreta. <p>
    `,
    prueba_diagnostica: `
      <p><strong>Prueba diagn√≥stica:</strong> Preguntas sobre descomposici√≥n de problemas y pasos de algoritmos.</p>
    `
  },
  dia2: {
    objetivo: `<p><strong>Objetivo:</strong> Aprender a crear diagramas de flujo para representar algoritmos.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Diagramas de flujo, s√≠mbolos y reglas de construcci√≥n.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear diagramas de flujo en papel o herramientas digitales.</p>`
  },
  dia3: {
    objetivo: `<p><strong>Objetivo:</strong> Conocer variables y tipos de datos, y c√≥mo manipularlos correctamente.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Concepto de variable, tipos de datos y buenas pr√°cticas para nombrarlas.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear ejercicios de asignaci√≥n paso a paso con entrada y salida de datos.</p>`,
    quiz_intermedio: `<p><strong>Quiz:</strong> Preguntas para reforzar comprensi√≥n de variables y tipos de datos.</p>`
  },
  dia4: {
    objetivo: `<p><strong>Objetivo:</strong> Aplicar estructuras secuenciales y condicionales para resolver problemas.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Estructuras secuenciales y condicionales (if / if-else).</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Construir diagramas y pseudoc√≥digo con decisiones (ej: edad ‚â• 18 ‚Üí mostrar "adulto").</p>`
  },
  dia5: {
    objetivo: `<p><strong>Objetivo:</strong> Integrar todo lo aprendido en pseudoc√≥digo completo.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Estructura general de un programa en pseudoc√≥digo.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Resolver ejercicios completos paso a paso.</p>`,
    quiz_final: `<p><strong>Quiz final:</strong> Evaluaci√≥n de todo lo aprendido en pseudoc√≥digo.</p>`
  },

  // Curso 2 ‚Äì PSeInt
  pseint1: {
    objetivo: `<p><strong>Objetivo:</strong> Familiarizarse con la sintaxis b√°sica de PSeInt.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Sintaxis b√°sica de PSeInt.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear programas simples en PSeInt.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de sintaxis b√°sica.</p>`
  },
  pseint2: {
    objetivo: `<p><strong>Objetivo:</strong> Aprender condicionales y bucles en PSeInt.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Condicionales y bucles en PSeInt.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear ejercicios con if, while, for.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de condicionales y bucles.</p>`
  },
  pseint3: {
    objetivo: `<p><strong>Objetivo:</strong> Resolver problemas pr√°cticos usando PSeInt.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Resoluci√≥n de problemas pr√°cticos en PSeInt.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Programas completos con entradas y salidas.</p>`,
    quiz: `<p><strong>Quiz:</strong> Evaluaci√≥n de ejercicios pr√°cticos.</p>`
  },

  // Curso 3 ‚Äì Python
  py1: {
    objetivo: `<p><strong>Objetivo:</strong> Comprender variables y tipos de datos en Python.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Variables y tipos de datos en Python.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear variables y operaciones b√°sicas.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de variables y tipos de datos.</p>`
  },
  py2: {
    objetivo: `<p><strong>Objetivo:</strong> Aplicar condicionales y bucles en Python.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Condicionales y bucles en Python.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Estructuras if, while y for.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de control de flujo.</p>`
  },
  py3: {
    objetivo: `<p><strong>Objetivo:</strong> Crear funciones y m√≥dulos reutilizables en Python.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Funciones y m√≥dulos en Python.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear funciones y reutilizar c√≥digo.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas sobre funciones y modularizaci√≥n.</p>`
  },
  py4: {
    objetivo: `<p><strong>Objetivo:</strong> Integrar todo lo aprendido en un proyecto final.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Proyecto final integrando todo lo aprendido.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Mini-proyecto completo.</p>`,
    quiz: `<p><strong>Quiz:</strong> Evaluaci√≥n final del proyecto.</p>`
  },

  // Curso 4 ‚Äì Modular
  mod1: {
    objetivo: `<p><strong>Objetivo:</strong> Entender el concepto de modularizaci√≥n.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Concepto de modularizaci√≥n.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Separar un programa en funciones.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas de modularizaci√≥n.</p>`
  },
  mod2: {
    objetivo: `<p><strong>Objetivo:</strong> Aprender a crear funciones en pseudoc√≥digo.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Funciones en pseudoc√≥digo.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Crear funciones y llamarlas en pseudoc√≥digo.</p>`,
    quiz: `<p><strong>Quiz:</strong> Preguntas sobre funciones.</p>`
  },
  mod3: {
    objetivo: `<p><strong>Objetivo:</strong> Aplicar modularizaci√≥n en un mini-reto.</p>`,
    teoria: `<p><strong>Teor√≠a:</strong> Mini-reto aplicando modularizaci√≥n.</p>`,
    ejemplos: `<p><strong>Ejemplos:</strong> Resolver mini-reto paso a paso.</p>`,
    quiz: `<p><strong>Quiz:</strong> Evaluaci√≥n del mini-reto.</p>`
  }
};

// === Datos de los cursos ===
const cursos = {
  1: {
    titulo: "Minicurso 1: L√≥gica de Programaci√≥n",
    descripcion: "Desarrolla el pensamiento computacional y aprende a representar algoritmos paso a paso.",
    imagen: "assets/img/C+.png",
    modulos: [
      { nombre: "üß© Tema 1 ‚Äì Pensamiento computacional y algoritmos üß©", id: "dia1", recursos: ["Teor√≠a", "Ejemplos", "Prueba diagn√≥stica"] },
      { nombre: "üîÑ Tema 2 ‚Äì Diagramas de flujo üîÑ", id: "dia2", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "üî¢ Tema 3 ‚Äì Variables y tipos de datos üî¢", id: "dia3", recursos: ["Teor√≠a", "Ejemplos", "Quiz intermedio"] },
      { nombre: "‚öôÔ∏è Tema 4 ‚Äì Estructuras secuenciales y condicionales ‚öôÔ∏è", id: "dia4", recursos: ["Teor√≠a", "Ejemplos"] },
      { nombre: "üíª Tema 5 ‚Äì Pseudoc√≥digo completo y pr√°ctica guiada üíª", id: "dia5", recursos: ["Teor√≠a", "Ejemplos", "Quiz final"] }
    ]
  },
  2: {
    titulo: "Minicurso 2: Introducci√≥n a PSeInt",
    descripcion: "Aprende los fundamentos de la programaci√≥n usando PSeInt.",
    imagen: "assets/img/pseint1.png",
    modulos: [
      { nombre: "D√≠a 1 ‚Äì Sintaxis b√°sica en PSeInt", id: "pseint1", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 2 ‚Äì Condicionales y bucles", id: "pseint2", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 3 ‚Äì Ejercicios pr√°cticos", id: "pseint3", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] }
    ]
  },
  3: {
    titulo: "Minicurso 3: Fundamentos de Python",
    descripcion: "Aprende a programar con Python desde cero con un mini-proyecto final.",
    imagen: "assets/img/python1.png",
    modulos: [
      { nombre: "D√≠a 1 ‚Äì Variables y tipos de datos", id: "py1", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 2 ‚Äì Condicionales y bucles", id: "py2", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 3 ‚Äì Funciones y m√≥dulos", id: "py3", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 4 ‚Äì Proyecto final", id: "py4", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] }
    ]
  },
  4: {
    titulo: "Minicurso 4: Programaci√≥n Modular",
    descripcion: "Organiza tus programas en funciones reutilizables y desarrolla un mini-reto.",
    imagen: "assets/img/modular1.png",
    modulos: [
      { nombre: "D√≠a 1 ‚Äì Concepto de modularizaci√≥n", id: "mod1", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 2 ‚Äì Funciones en pseudoc√≥digo", id: "mod2", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] },
      { nombre: "D√≠a 3 ‚Äì Mini reto final", id: "mod3", recursos: ["Teor√≠a", "Ejemplos", "Quiz"] }
    ]
  }
};

// === Funci√≥n principal ===
function cargarCurso() {
  const curso = cursos[cursoSeleccionado];

  if (!curso) {
    document.getElementById("titulo-curso").textContent = "Curso no encontrado";
    document.getElementById("descripcion-curso").textContent = "Verifica el enlace o selecciona un curso v√°lido.";
    return;
  }

  // Hero
  const hero = document.querySelector(".hero-curso");
  document.getElementById("titulo-curso").textContent = curso.titulo;
  document.getElementById("descripcion-curso").textContent = curso.descripcion;

  if (curso.imagen) {
    hero.style.backgroundImage = `linear-gradient(rgba(5,11,18,0.85), rgba(5,11,18,0.9)), url('${curso.imagen}')`;
    hero.style.backgroundSize = "cover";
    hero.style.backgroundPosition = "center";
    hero.style.backgroundRepeat = "no-repeat";
    hero.style.backgroundAttachment = "fixed";
  }

  // Contenedor de m√≥dulos
  const contenedor = document.getElementById("contenido-curso");
  contenedor.innerHTML = "";

  curso.modulos.forEach(mod => {
    const moduloHTML = `
      <section class="modulo">
        <h2>${mod.nombre}</h2>
        <div class="recursos">
          ${mod.recursos.map(r => `<button class="btn-recurso" data-target="${r.toLowerCase().replace(/\s/g,'-')}-${mod.id}">${r}</button>`).join("")}
        </div>
        ${mod.recursos.map(r => {
          const key = r.toLowerCase()
                        .normalize("NFD")
                        .replace(/[\u0300-\u036f]/g, "") // quitar tildes
                        .replace(/\s/g, "_");

          const contenido = contenidoModulos[mod.id]?.[key] || `<p>Aqu√≠ puedes colocar el contenido de "${r}".</p>`;
          const objetivoHTML = (key === "teoria" && contenidoModulos[mod.id]?.objetivo)
            ? contenidoModulos[mod.id].objetivo
            : "";

          return `
            <div id="${r.toLowerCase().replace(/\s/g,'-')}-${mod.id}" class="subseccion">
              <h3>${r}</h3>
              ${objetivoHTML}
              ${contenido}
            </div>
          `;
        }).join("")}
      </section>
    `;
    contenedor.insertAdjacentHTML("beforeend", moduloHTML);
  });

  // Scroll suave
  document.querySelectorAll(".btn-recurso").forEach(btn => {
    btn.addEventListener("click", () => {
      const target = document.getElementById(btn.dataset.target);
      if (target) {
        target.scrollIntoView({ behavior: "smooth", block: "start" });
      }
    });
  });
}

// === Agregar referencias bibliogr√°ficas por curso ===
function agregarReferencias(cursoId) {
  const contenedor = document.getElementById("contenido-curso");
  if (!contenedor) return;

  const referenciasPorCurso = {
    1: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          <p>‚Ä¢ Cervera-Manjarrez, J. et al. (2023). <em>El pensamiento computacional y la educaci√≥n.</em> Revista Latinoamericana de Tecnolog√≠a Educativa.</p>
          <p>‚Ä¢ Gonz√°lez, R. & Mart√≠nez, D. (2022). <em>Estrategias para fomentar el pensamiento l√≥gico.</em> Editorial Acad√©mica Espa√±ola.</p>
          <p>‚Ä¢ Rodr√≠guez Canfranc, M. (2023). <em>La importancia del pensamiento computacional en la era digital.</em> Fundaci√≥n Telef√≥nica.</p>
          <p>‚Ä¢ Wing, J. (2006). <em>Computational Thinking.</em> Communications of the ACM, 49(3), 33‚Äì35.</p>
        </div>
      </section>
    `,
    2: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          <p>‚Ä¢ Castro, P. (2024). <em>Introducci√≥n pr√°ctica a PSeInt.</em> Universidad Nacional.</p>
          <p>‚Ä¢ Mendoza, L. (2023). <em>Fundamentos de algoritmos con PSeInt.</em> Editorial T√©cnica.</p>
        </div>
      </section>
    `,
    3: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          <p>‚Ä¢ Sweigart, A. (2020). <em>Automate the Boring Stuff with Python.</em> No Starch Press.</p>
          <p>‚Ä¢ Zelle, J. (2017). <em>Python Programming: An Introduction to Computer Science.</em> Franklin, Beedle & Associates.</p>
        </div>
      </section>
    `,
    4: `
      <section class="modulo referencias" style="text-align: justify; margin-top: 40px; padding: 10px;">
        <h2 style="text-align: center; margin-bottom: 15px;">üìö Referencias bibliogr√°ficas</h2>
        <div style="text-align: left; margin-left: 30px;">
          <p>‚Ä¢ Gaddis, T. (2021). <em>Starting Out with Programming Logic and Design.</em> Pearson.</p>
          <p>‚Ä¢ Malvino, A. (2019). <em>Programaci√≥n modular aplicada.</em> McGraw-Hill.</p>
        </div>
      </section>
    `
  };

  if (referenciasPorCurso[cursoId]) {
    contenedor.insertAdjacentHTML("beforeend", referenciasPorCurso[cursoId]);
  }
}

// === Inicializaci√≥n ===
document.addEventListener("DOMContentLoaded", () => {
  cargarCurso();
  agregarReferencias(cursoSeleccionado);
});
